{"version":3,"sources":["constants/constant.routes.js","logo.svg","services/StorageService.js","services/request.js","services/AuthService.js","components/PrivateRoutes.jsx","services/Validation.js","actions/header-action.js","constants/action-type.js","pages/Login/Login.js","pages/Logout/Logout.js","components/Pagination/Pagination.jsx","services/ContactService.js","components/CustomSpinner/CustomSpinner.js","services/ModalService.js","modal/AddContact.js","modal/UploadContactModal.js","utils.js","pages/Contact/Contact.js","services/StockService.js","components/SearchContact/SearchContact.js","modal/AddStock.js","pages/Stocks/Stocks.js","services/TransactionService.js","modal/AddTransaction.js","pages/Transactions/Transactions.js","services/OpeningBalanceService.js","services/DashboardService.js","modal/AddOpeningBalance.js","pages/Dashboard/Dashboard.js","services/CompanyService.js","modal/AddCompany.js","pages/Company/Company.js","router/router-config.js","router/routes.jsx","App.js","serviceWorker.js","reducer/header-reducer.js","reducer/index.js","store.js","index.js"],"names":["module","exports","routes","API_URL","SIGNIN","SIGNUP","ADD_CONTACT","UPDATE_CONTACT","GET_CONTACTS","UPLOAD_EXCEL","ADD_STOCK","UPDATE_STOCK","GET_STOCKS","DELETE_STOCKS","ADD_TRANSACTION","ADD_OTHER_TRANSACTION","UPDATE_TRANSACTION","GET_TRANSACTIONS","GET_CLOSE_AMOUNT_TODAY","ADD_OPENING_BALANCE","UPDATE_OPENING_BALANCE","GET_TODAY_OPENING_BALANCE","GET_STOCK_AND_AMT_WITH_DALAL","GET_ACCOUNT_SUMMARY","ADD_COMPANY","UPDATE_COMPANY","GET_COMPANIES","StorageService","token","localStorage","setItem","getItem","removeItem","detail","user","JSON","stringify","parse","request","method","url","params","body","headers","companyDetail","Storage","getCompanyDetail","companyId","uuid","getToken","Authorization","options","data","formData","FormData","keys","Object","i","length","append","qs","axios","AuthService","userObj","PrivateRoutes","Component","component","rest","isAuthenticated","isCompanySelected","path","render","props","to","pathname","Validation","email","match","error","errorMsg","control","value","invalidEmail","number","trim","test","undefined","nullValue","invalidPhone","updateHeaderMenus","payload","dispatch","console","log","type","Promise","resolve","updateCompanyDetail","Login","state","controls","phone","valid","touched","password","handleInputChange","e","controlName","target","name","controlValue","setState","handleValidation","firstTime","isSubmit","isFormValid","notNullValidator","showErrorMsg","login","obj","signin","then","userType","setUserDetail","setToken","history","push","catch","this","id","Row","Col","xl","Card","CardBody","Form","FormGroup","Label","for","Input","onChange","className","Button","onClick","sm","connect","Logout","logout","removeToken","removeCompanyDetail","Pagination","findPageRange","currentPage","pageSize","startPage","endPage","totalRecords","margin","page","count","Math","ceil","onPageChange","bind","goFirstPage","goLastPage","goPrevPage","goNextPage","newProps","event","index","Array","prototype","indexOf","call","parentNode","children","pages","range","firstPage","role","lastPage","prevPage","icon","fontSize","color","nextPage","key","classnames","active","style","lineHeight","ContactService","contactObj","search","isDownload","qp","file","post","csvUploadRequest","CustomSpinner","Spinner","ModalService","title","msg","suceess","swal","text","dangerMode","button","visible","closeModal","isLoading","typeDropdownOptions","defaultControls","invalidPassword","mobile1","mobile2","city","address","company","AddContact","saveDetail","addContact","message","openAlert","updateContact","contactData","contactId","response","Modal","isOpen","show","toggle","ModalHeader","ModalBody","map","t","UploadContactModal","errorMessage","uploadFile","uploadExcel","onDropFile","acceptedFiles","right","position","onDrop","getRootProps","getInputProps","height","border","marginBottom","textAlign","width","backgroundColor","monthObj","1","2","3","4","5","6","7","8","9","10","11","12","formatDate","date","day","Date","getDate","month","getMonth","year","getFullYear","toString","slice","getYearString","downlodFile","link","document","createElement","href","setAttribute","appendChild","click","removeChild","objectToQuerystring","reduce","str","delimiter","val","encodeURIComponent","join","Contact","contacts","downloadExcelFields","selectedContactToUpdate","isAddContactModalOpen","isUploadContactModalOpen","downloadCheckbox","required","getContacts","openAddContactModal","closeAddContactModal","reload","openTransactions","openUploadContactModal","closeUploadContactModal","handlePageChange","handleSearchInput","searchContactData","downloadExcel","prepareRows","c","placeholder","Table","StockService","status","SearchContact","personName","showPersonList","person","handleClickOutside","forwardedRef","current","contains","handlePersonSearchChange","openPersonToggle","onSelectPerson","contact","getSelectedPersonControl","contactIndex","findIndex","personProp","addEventListener","removeEventListener","ref","autoComplete","onFocus","React","forwardRef","statusDropDownOptions","priceDropDownOptions","stockId","weight","buyPricePer","sellPricePer","buyDate","buyPrice","sellDate","sellPrice","buyPersonId","sellPersonId","AddStock","handleDateChange","dateControl","getSelectedBuyPersonControl","personControl","getSelectedSellPersonControl","buyDateVar","sellDateVar","setHours","toISOString","addStock","updateStock","stockData","buyPersonIdContainer","createRef","sellPersonIdContainer","stock_id","buy_date","buy_price","buy_person_id","sell_date","sell_price","sell_person_id","buy_price_per","sell_price_per","isUpdate","disabled","s","open","preventDefault","InputGroup","selected","showMonthDropdown","r","dateFormat","showYearDropdown","placeholderText","shouldCloseOnSelect","dropdownMode","p","Stocks","stocks","selectedStockToUpdate","isAddStockModalOpen","selectedStatus","stateValue","getStocks","openAddStockModal","closeAddStockModal","deleteStock","handledownloadCheckboxInput","checkBoxValue","valueIndex","splice","buy_person_name","sell_person_name","TransactionService","personId","mode","transactionDate","debitContactName","creditContactName","note","amount","AddTransaction","isEdit","transactionData","transactionDateVar","debitPersonId","creditPersonId","updateTransaction","addOtherTransaction","addTransaction","container","debitPersoncontainer","creditPersonContainer","transaction_date","credit","debit","person_id","personUuid","Transactions","transactions","selectedTransactionToUpdate","isAddTransactionModalOpen","getTransactions","location","transaction","openAddTransactionModal","closeAddTransactionModal","OpeningBalanceService","DashboardService","query","addOpeningBalance","updateOpeningBalance","openingBalanceData","openingBalanceId","Dashboard","isAddOpeningBalanceModalOpen","isAddOpeningBalanceButtonVisible","selectedOpeningBalanceToUpdate","closingBalanceData","dalalData","searchDalal","pageDalal","pageSizeDalal","totalDalals","pageAccountSummary","pageSizeAccountSummary","totalAccountSummary","searchAccountSummary","accountSummaryData","openAddOpeningBalanceModal","OpeningBalanceData","closeAddOpeningBalanceModal","getTodayOpeningBalance","getTodayCloseAmount","getCloseAmountToday","getStockAndAmtWithDalal","limit","getAccountSummary","handleSearchDalalInput","handleSearchAccountSummaryInput","handleAccountSummaryPageChange","total","openingBalance","d","stones","totalStones","CompanyService","company_name","AddCompany","companyName","addCompany","updateCompany","companyData","Company","companies","selectedCompanyToUpdate","isAddCompanyModalOpen","getCompanies","getCompany","openAddCompanyModal","closeAddCompanyModal","searchCompanyData","openCompany","setCompanyDetail","cursor","publicRouteObj","exact","privateRoutes","Routes","nextProps","publicRoutesObj","route","privateRoutesObj","from","App","updateHeader","logoutFromCompany","headerReducer","header","fontWeight","paddingLeft","activeClassName","Boolean","window","hostname","initialState","combineReducers","action","middleware","thunk","store","next","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducer","applyMiddleware","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3834576.chunk.js","sourcesContent":["module.exports = {\n  routes: {\n    API_URL:'http://localhost:3002/',\n\n    SIGNIN: 'auth/signin',\n    SIGNUP: 'auth/signup',\n\n    ADD_CONTACT: 'contact/add-contact',\n    UPDATE_CONTACT: 'contact/update-contact',\n    GET_CONTACTS: 'contact/get-contacts',\n    UPLOAD_EXCEL:'contact/upload-excel',\n\n    ADD_STOCK: 'stock/add-stock',\n    UPDATE_STOCK: 'stock/update-stock',\n    GET_STOCKS: 'stock/get-stocks',\n    DELETE_STOCKS: 'stock/delete-stock',\n    \n    ADD_TRANSACTION: 'transaction/add-transaction',\n    ADD_OTHER_TRANSACTION: 'transaction/add-other-transaction',\n    UPDATE_TRANSACTION: 'transaction/update-transaction',\n    GET_TRANSACTIONS: 'transaction/get-transactions',\n    GET_CLOSE_AMOUNT_TODAY: 'transaction/get-close-amount-today',\n\n    ADD_OPENING_BALANCE: 'opening-balance/add-opening-balance',\n    UPDATE_OPENING_BALANCE: 'opening-balance/update-opening-balance',\n    GET_TODAY_OPENING_BALANCE: 'opening-balance/get-today-opening-balance',\n\n    GET_STOCK_AND_AMT_WITH_DALAL: 'dashboard/get-stock-and-amount-with-dalal',\n    GET_ACCOUNT_SUMMARY:'dashboard/get-account-summary',\n\n    ADD_COMPANY: 'company/add-company',\n    UPDATE_COMPANY: 'company/update-company',\n    GET_COMPANIES: 'company/get-company',\n  }\n}","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default class StorageService {\n  static setToken(token) {\n    localStorage.setItem(\"token\", token);\n  }\n\n  static getToken() {\n    return localStorage.getItem(\"token\");\n  }\n\n  static removeToken() {\n    return localStorage.removeItem(\"token\");\n  }\n\n  static setUserDetail(detail) {\n    const user = JSON.stringify(detail);\n    localStorage.setItem(\"user\", user);\n  }\n\n  static getUserDetail() {\n    const user = localStorage.getItem(\"user\");\n    return JSON.parse(user);\n  }\n\n  static removeUserDetail() {\n    return localStorage.removeItem(\"user\");\n  }\n\n  static setCompanyDetail(detail) {\n    const user = JSON.stringify(detail);\n    localStorage.setItem(\"company\", user);\n  }\n\n  static getCompanyDetail() {\n    const user = localStorage.getItem(\"company\");\n    return JSON.parse(user);\n  }\n\n  static removeCompanyDetail() {\n    return localStorage.removeItem(\"company\");\n  }\n}\n\n\n","import axios from 'axios';\nimport qs from 'qs';\nimport Storage from './StorageService';\n/**\n * request interceptors\n * @param {String} method GET,PUT,POST,DELETE\n * @param {String} url req url\n * @param {Object} params query parameters\n * @param {Object} body req body\n * @param {Object} headers req headers\n */\nexport const request = (method, url, params, body = {}, headers = {}) => {\n  headers = headers || {};\n  params = params || {};\n  body = body || {};\n  const companyDetail = Storage.getCompanyDetail();\n  let companyId = null;\n  if (companyDetail) {\n    companyId = companyDetail.uuid\n    headers['company-id'] = companyId;\n  }\n  if (!headers['content-type']) {\n    headers['content-type'] = 'application/json';\n  }\n  if (!(url === 'signin' || url === 'signup' || url === 'forgot-password')) {\n    const token = Storage.getToken();\n    headers.Authorization = `Bearer ${token}`;\n    // headers.Authorization = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1X3V1aWQiOiJkNjhiYjU3Zi0zOGY0LTQxOGUtYmIzNy0yMzJmOGQzMDg3MDciLCJmaXJzdF9uYW1lIjoibmlrdW5qIiwibGFzdF9uYW1lIjoiUHJhIiwiZW1haWwiOiJuaWt1bmpAbWFpbGluYXRvci5jb20iLCJmYklkIjpudWxsLCJpZCI6NCwidXNlclR5cGUiOjIsImlhdCI6MTUzMTg5NjMzNH0.g2cvqz_CeBWfaBkAwQwe5B-wy-iM2QlTruF27APva6Q';\n  }\n  const options = {\n    method,\n    headers,\n    params,\n    url,\n  };\n\n  if ((method === 'POST' || method === 'PUT') && headers['content-type'] === 'application/x-www-form-urlencoded') {\n    options.data = qs.stringify(body);\n  } else if ((method === 'POST' || method === 'PUT') && headers['content-type'] === 'multipart/form-data') {\n    headers['content-type'] = 'multipart/form-data';\n\n    // prepate multipart formdata body \n    const formData = new FormData();\n    const keys = Object.keys(body);\n    for (let i = 0; i < keys.length; i++) {\n      formData.append(keys[i], body[keys[i]]);\n    }\n    options.data = formData;\n    // options.data = qs.stringify(body);\n  } else if ((method === 'POST' || method === 'PUT')) {\n    options.data = body;\n  }\n\n  return axios(options);\n};\n\n\nexport const csvUploadRequest = (url, file) => {\n  let formData = new FormData();\n  formData.append('csv', file, file.name);\n  return axios.post(url, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n      'Authorization': `Bearer ${Storage.getToken()}`\n    }\n  })\n}\n","import { request } from './request';\nimport { routes } from '../constants/constant.routes';\nconst API_URL = routes.API_URL;\n\nexport default class AuthService {\n  static signin(userObj) {\n    return request('POST', `${API_URL}${routes.SIGNIN}`, null, userObj, null)\n  }\n} ","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types'; // or PropTypes = require('prop-types');\nimport AuthService from '../services/AuthService';\nimport StorageService from '../services/StorageService';\n/**\n * private route component to prevent unauthorize access\n */\nconst PrivateRoutes = ({ component: Component, ...rest }) => {\n  const token = StorageService.getToken();\n  let isAuthenticated = false;\n  let isCompanySelected = true;\n  if (token) {\n    isAuthenticated = true\n  } else {\n    isAuthenticated = false\n\n  }\n  const compnayDetail = StorageService.getCompanyDetail();\n  if (!compnayDetail && rest.path !== '/company') {\n    isCompanySelected = false;\n  }\n  return (\n    <Route\n      {...rest}\n      render={props => {\n        if (isAuthenticated === true) {\n          if (isCompanySelected) {\n            return <Component {...props} />\n          } else {\n            return <Redirect to={{\n              pathname: '/company',\n            }}\n            />\n          }\n        } else {\n          return <Redirect to={{\n            pathname: '/',\n          }}\n          />\n        }\n      }\n\n      }\n    />\n  );\n};\n\nPrivateRoutes.propTypes = {\n  component: PropTypes.any.isRequired,\n};\n\nexport default PrivateRoutes;\n","export default class Validation {\n  static emailValidator1(email) {\n    const pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if(email) {\n      if(email.match(pattern)) {\n        return null;\n      }\n      return { error: true, errorMsg: 'Email is not valid' };\n    }\n    return { error: true, errorMsg: 'Email is not valid' };\n    // return resolve(null);\n  }\n\n  static emailValidator(control) {\n    const pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if(control.value === null || control.value === '') {\n      control.invalidEmail = false;\n      return control;\n    }\n    if(control.value) {\n      if(control.value.match(pattern)) {\n        control.invalidEmail = false;\n        return control;\n      }\n      control.invalidEmail = true;\n      return control;\n    }\n    control.invalidEmail = true;\n    return control;\n    // return resolve(null);\n  }\n\n\n  /**\n     * @description password validator\n     * @param control\n     */\n  static numberValidatior(number) {\n    const pattern = /(^[0-9]+\\.([0-9])+|^[0-9]+)$/;\n    if(number) {\n      const number1 = number ? number.trim() : '';\n      if(number1.length === 0) {\n        return { error: true, errorMsg: 'Value should not be empty' };\n      } else if(number === 0) {\n        return { error: true, errorMsg: 'Value should not 0' };\n      } else if(!pattern.test(number)) {\n        return { error: true, errorMsg: 'Value you entered is incorrect' };\n      }\n      return null;\n    }\n    return { error: true, errorMsg: 'Value should not be empty' };\n\n  }\n\n  static notNullValidator(control) {\n    if(control.value === null || control.value === '' || control.value === undefined) {\n      control.nullValue = true;\n      return control;\n    } else {\n      control.nullValue = false;\n      return control;\n    }\n  }\n\n  static validatePhoneNumber(control) {\n    const regex = /^[0-9]*$/;\n    const value = control.value;\n    if(!(value === null || value === '')) {\n      if(value.length !== 10) {\n        control.invalidPhone = true;\n        return control;\n      }\n      if(!value.match(regex)) {\n        control.invalidPhone = true;\n      } else {\n        control.invalidPhone = null;\n      }\n    } else {\n      control.invalidPhone = null;\n    }\n    return control;\n  }\n}\n","import {\n    UPDATE_HEADER_MENUS,\n    UPDATE_COMAPANY_DETAIL\n} from \"../constants/action-type\";\n\nexport const updateHeaderMenus = (payload) => dispatch => {\n    console.log(\"fetch posts\");\n    dispatch({\n        type: UPDATE_HEADER_MENUS,\n        payload: payload,\n\n    });\n    return Promise.resolve();\n}\n\nexport const updateCompanyDetail = (payload) => dispatch => {\n    dispatch({\n        type: UPDATE_COMAPANY_DETAIL,\n        payload: payload,\n\n    });\n    return Promise.resolve();\n}","export const UPDATE_HEADER_MENUS = 'UPDATE_HEADER_MENUS';\nexport const UPDATE_COMAPANY_DETAIL = 'UPDATE_COMPANY_DETAIL';\n\n\n\n","import React, { Component } from 'react';\nimport { Row, Col, Card, CardBody, Table, Form, FormGroup, Label, Input, Button } from 'reactstrap';\nimport { connect } from 'react-redux';\n\nimport AuthService from '../../services/AuthService';\nimport StorageService from '../../services/StorageService';\nimport Validation from '../../services/Validation';\nimport { updateHeaderMenus } from '../../actions/header-action';\nimport './Login.css';\n\n\n\nclass Login extends Component {\n    state = {\n        controls: {\n            phone: {\n                value: '',\n                valid: null,\n                touched: false,\n                nullValue: null\n            },\n            password: {\n                value: '',\n                valid: null,\n                touched: false,\n                nullValue: null\n            }\n        }\n    }\n\n    componentDidMount() {\n        const token = StorageService.getToken();\n        if(token) {\n            this.props.history.push(\"/contact\");\n        }\n        // this.getPerson();\n    }\n\n    handleInputChange = (e) => {\n        const controlName = e.target.name;\n        const controlValue = e.target.value;\n        const { controls } = this.state;\n        controls[controlName].value = controlValue;\n        controls[controlName].touched = true;\n        this.setState({ controls });\n        // this.handleValidation();\n    }\n\n\n\n    handleValidation = (firstTime, isSubmit) => {\n        let { controls, isFormValid } = this.state;\n        let {\n            phone, password\n        } = controls;\n\n        if(firstTime === true || phone.touched === true || isSubmit) {\n            phone = Validation.notNullValidator(phone);\n            phone.valid = !(phone.nullValue);\n            if(((isSubmit || phone.touched) && phone.valid === false)) {\n                phone.showErrorMsg = true;\n            } else {\n                phone.showErrorMsg = false;\n            }\n        }\n\n        if(firstTime === true || password.touched === true || isSubmit) {\n            password = Validation.notNullValidator(password);\n            password.valid = !(password.nullValue);\n            if(((isSubmit || password.touched) && password.valid === false)) {\n                password.showErrorMsg = true;\n            } else {\n                password.showErrorMsg = false;\n            }\n        }\n\n        if(\n            phone.valid === true &&\n            password.valid === true\n        ) {\n            isFormValid = true;\n        } else {\n            isFormValid = false;\n        }\n\n        console.log(\"controls\", controls);\n        // console.log('controls', controls);\n        // console.log('isFormValid', isBusinessFormValid);\n        this.setState({ controls, isFormValid });\n        return isFormValid;\n    }\n\n\n\n    login = () => {\n        const { controls } = this.state;\n        const { phone, password } = controls;\n        const isFormValid = this.handleValidation(false, true);\n        if(isFormValid === false) {\n            return;\n        }\n        let obj = {\n            phone: phone.value,\n            password: password.value\n        }\n        AuthService.signin(obj)\n            .then(data => {\n                const token = data.data.data.token;\n                const userObj = {\n                    type: data.data.data.userType\n                }\n                StorageService.setUserDetail(userObj);\n                StorageService.setToken(token);\n                this.props.updateHeaderMenus(\"login\");\n                this.props.history.push(\"/company\");\n                //         this.getPerson();\n                //         this.resetControls();\n            })\n            .catch(e => {\n\n            })\n    }\n\n\n\n\n\n    render() {\n        const { controls } = this.state;\n        const { password, phone } = controls;\n\n        return (\n            <div id=\"login\">\n                <Row>\n                    <Col xl=\"5\">\n                        <Card>\n                            <CardBody>\n                                <Form>\n                                    <FormGroup>\n                                        <Label for=\"phone\">Phone Number</Label>\n                                        <Input\n                                            type=\"text\"\n                                            id=\"phone\"\n                                            name=\"phone\"\n                                            value={phone.value}\n                                            onChange={this.handleInputChange}\n                                        ></Input>\n                                        {phone.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Label for=\"password\">Password</Label>\n                                        <Input\n                                            type=\"password\"\n                                            id=\"password\"\n                                            name=\"password\"\n                                            value={password.value}\n                                            onChange={this.handleInputChange}\n                                        ></Input>\n                                        {password.showErrorMsg && <div className=\"error\">* Please enter password</div>}\n\n                                    </FormGroup>\n                                    <Button onClick={this.login}>Login</Button>\n                                </Form>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col sm=\"1\"></Col>\n                </Row>\n\n            </div>\n        );\n    }\n}\n\nexport default connect(null, { updateHeaderMenus })(Login);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n\nimport { updateHeaderMenus } from '../../actions/header-action';\nimport StorageService from '../../services/StorageService';\n\nimport './Logout.css';\n\n\n\nclass Logout extends Component {\n    state = {\n\n    }\n\n    componentDidMount() {\n        this.logout();\n        // this.getPerson();\n    }\n\n    logout = () => {\n        StorageService.removeToken();\n        StorageService.removeCompanyDetail();\n        this.props.updateHeaderMenus(\"logout\");\n        this.props.history.push(\"/\");\n    }\n\n    render() {\n\n        return (\n            <div id=\"login\">\n\n\n            </div>\n        );\n    }\n}\n\nexport default connect(null, { updateHeaderMenus })(Logout);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'; // or PropTypes = require('prop-types');\nimport classnames from 'classnames';\nimport Ionicon from 'react-ionicons';\n\nimport './Pagination.css';\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n\n    const { margin, page,totalRecords, pageSize } = props;\n    const count = Math.ceil(totalRecords / pageSize);\n    const startPage = page > margin ? page - margin : 1;\n    const endPage = page + margin > count ? count : page + margin;\n    this.state = {\n      startPage,\n      endPage,\n      count,\n    };\n\n\n    this.onPageChange = this.onPageChange.bind(this);\n    this.goFirstPage = this.goFirstPage.bind(this);\n    this.goLastPage = this.goLastPage.bind(this);\n    this.goPrevPage = this.goPrevPage.bind(this);\n    this.goNextPage = this.goNextPage.bind(this);\n  }\n\n  componentWillReceiveProps(newProps) {\n    console.log(\"newProps\", newProps);\n    if(newProps === this.props) return;\n    const { margin, page, totalRecords, pageSize } = newProps;\n    const count = Math.ceil(totalRecords / pageSize);\n    console.log(\"count\", count);\n    const startPage = page > margin ? page - margin : 1;\n    const endPage = page + margin > count ? count : page + margin;\n    this.setState({ startPage, endPage, count });\n  }\n\n  onPageChange(event) {\n    const index =\n      Array.prototype.indexOf.call(event.target.parentNode.children, event.target);\n    this.props.onPageChange(index + this.state.startPage);\n  }\n\n  goFirstPage() {\n    this.props.onPageChange(1);\n  }\n\n  goLastPage() {\n    this.props.onPageChange(this.state.count);\n  }\n\n  goPrevPage() {\n    this.props.onPageChange(this.props.page - 1);\n  }\n\n  goNextPage() {\n    this.props.onPageChange(this.props.page + 1);\n  }\n\n  findPageRange = (currentPage) => {\n    const { pageSize = 10 } = this.props;\n    let startPage = ((currentPage - 1) * pageSize) + 1;\n    let endPage = currentPage * pageSize;\n    if(endPage > this.props.totalRecords) {\n      let remainCounts = this.props.totalRecords % pageSize;\n      endPage = ((currentPage - 1) * pageSize) + remainCounts;\n    }\n    let range = `${startPage}-${endPage}`\n    return range;\n  }\n\n  render() {\n    const { startPage, endPage, count } = this.state;\n    console.log(\"count\", count);\n    const { page, margin } = this.props;\n    const pages = [];\n    const range = this.findPageRange(this.props.page);\n    const firstPage = page - margin > 1 ?\n      (\n        <div\n          className=\"pagination-button pagination-go-first\"\n          onClick={this.goFirstPage}\n          role=\"presentation\"\n        >1\n        </div>\n      ) :\n      null;\n\n    const lastPage = page + margin < count ?\n      (\n        <div\n          className=\"pagination-button pagination-go-last\"\n          onClick={this.goLastPage}\n          role=\"presentation\"\n        >{count}\n        </div>\n      ) :\n      null;\n\n    const prevPage = page === 1 ? null :\n      (\n        <div\n          className=\"pagination-button\"\n          onClick={this.goPrevPage}\n          role=\"presentation\"\n        >\n          <Ionicon icon=\"ios-arrow-back\" fontSize=\"24px\" color=\"#757575\" />\n        </div>\n      );\n\n    const nextPage = page === count ? null :\n      (\n        <div\n          className=\"pagination-button\"\n          onClick={this.goNextPage}\n          role=\"presentation\"\n        >\n          <Ionicon icon=\"ios-arrow-forward\" fontSize=\"24px\" color=\"#757575\" />\n        </div>\n      );\n\n    if(endPage !== 1) {\n      for (let i = startPage; i <= endPage; i++) {\n        pages.push(<li\n          key={i}\n          onClick={this.onPageChange}\n          role=\"presentation\"\n          className={classnames('pagination-list-item', 'pagination-button', {\n            active: i === this.props.page,\n          })}\n        >\n          {i}\n        </li>);\n      }\n    }\n\n    return (\n      <div id=\"pagination-container\">\n        <div id=\"pagination\">\n          <div style={{ lineHeight: '30px' }}>\n            <span className=\"showing-text\">Showing</span>\n            <span className=\"range\">{' '}{range}</span>\n          </div>\n          {prevPage}\n          {firstPage}\n          <ul id=\"pagination-list\">\n            {pages}\n          </ul>\n          {lastPage}\n          {nextPage}\n        </div>\n      </div>\n    );\n  }\n}\n\nPagination.propTypes = {\n  margin: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  // count: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func,\n};\n\nexport default Pagination;\n","import { request,csvUploadRequest } from './request';\nimport { routes } from '../constants/constant.routes';\n\nconst API_URL = routes.API_URL;\n\nexport default class ContactService {\n  static addContact(contactObj) {\n    return request('POST', `${API_URL}${routes.ADD_CONTACT}`, null, contactObj, null)\n  }\n\n  static updateContact(contactObj) {\n    return request('POST', `${API_URL}${routes.UPDATE_CONTACT}`, null, contactObj, null)\n  }\n\n  static getContacts(page, pageSize, search,isDownload,body) {\n    let qp = `?`;\n    if(page) {\n      qp += `page=${page}&`\n    }\n    if(pageSize) {\n      qp += `limit=${pageSize}&`\n    }\n    if(search) {\n      qp += `search=${search}&`\n    }\n    if(isDownload) {\n      qp += `downloadExcel=${isDownload}&`\n    }\n    return request('POST', `${API_URL}${routes.GET_CONTACTS}${qp}`, null, body, null)\n  }\n\n  static uploadExcel(file) {\n    let url = `${API_URL}${routes.UPLOAD_EXCEL}`;\n    return csvUploadRequest(url, file);\n  }\n} ","import React, { Component } from 'react';\nimport {\n  Spinner\n} from 'reactstrap';\n\nclass CustomSpinner extends Component {\n  render() {\n    return <div className=\"spinner-middle-con\">\n      <Spinner className=\"spinner-middle\" />\n    </div>;\n  }\n}\n\nexport default CustomSpinner;","import swal from 'sweetalert';\n\nexport default class ModalService {\n\n  static openAlert(title, msg, suceess) {\n    // swal(title, msg, suceess);\n    swal({\n      text: msg,\n      dangerMode: suceess === 'success' ? false : true,\n      button: {\n        text: \"OK\",\n        value: false,\n        visible: false,\n        className: \"\",\n        closeModal: true,\n      }\n    })\n  }\n\n}","import React, { Component, Fragment } from 'react';\nimport { Modal, ModalHeader, ModalFooter, ModalBody, Button, Row, Col, Input, Form, FormGroup, Label } from 'reactstrap';\n\nimport CustomSpinner from '../components/CustomSpinner/CustomSpinner';\n\nimport ContactService from '../services/ContactService';\nimport Validation from '../services/Validation';\nimport ModalService from '../services/ModalService';\n\nlet isLoading = false;\nconst typeDropdownOptions=[\n  {\n    key: 'Buyer',\n    value:'buyer'\n  },\n  {\n    key: 'Seller',\n    value:'seller'\n  },\n  {\n    key: 'Dalal',\n    value:'dalal'\n  } \n]\nlet defaultControls = {\n  name: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null\n  },\n  // last_name: {\n  //   value: '',\n  //   valid: null,\n  //   touched: false,\n  //   nullValue: null\n  // },\n  email: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  mobile1: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  mobile2: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  city: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  address: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  company: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  type: {\n    value: 'dalal',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  }  \n}\nexport default class AddContact extends Component {\n\n  state = {\n    controls: JSON.parse(JSON.stringify(defaultControls)),\n    isLoading: false\n  }\n\n  constructor() {\n    super();\n  }\n\n\n  componentDidMount() {\n    const { contactData } = this.props;\n    console.log(\"contactData\", contactData);\n    if(contactData) {\n      const { controls } = this.state;\n      const { name, email, address,\n        mobile1,mobile2,city,company,type\n      } = controls;\n      \n      name.value = contactData.name;\n      mobile1.value = contactData.mobile1;\n      mobile2.value = contactData.mobile2;\n      email.value = contactData.email;\n      address.value = contactData.address;\n      city.value = contactData.city;\n      company.value = contactData.company;\n      type.value = contactData.type;\n      this.setState({ controls });\n    }\n  }\n\n  handleInputChange = (e) => {\n    const controlName = e.target.name;\n    const controlValue = e.target.value;\n    const { controls } = this.state;\n    controls[controlName].value = controlValue;\n    controls[controlName].touched = true;\n    this.setState({ controls });\n    // this.handleValidation();\n  }\n\n  handleValidation = (firstTime, isSubmit) => {\n    let { controls, isFormValid } = this.state;\n    let { \n      name\n    } = controls;\n\n    if(firstTime === true || name.touched === true || isSubmit) {\n      name = Validation.notNullValidator(name);\n      name.valid = !(name.nullValue);\n      if(((isSubmit || name.touched) && name.valid === false)) {\n        name.showErrorMsg = true;\n      } else {\n        name.showErrorMsg = false;\n      }\n    }\n\n    // if(firstTime === true || last_name.touched === true || isSubmit) {\n    //   last_name = Validation.notNullValidator(last_name);\n    //   last_name.valid = !(last_name.nullValue);\n    //   if(((isSubmit || last_name.touched) && last_name.valid === false)) {\n    //     last_name.showErrorMsg = true;\n    //   } else {\n    //     last_name.showErrorMsg = false;\n    //   }\n    // }\n\n    // if(firstTime === true || mobile1.touched === true || isSubmit) {\n    //   // mobile1 = Validation.notNullValidator(mobile1);\n    //   // mobile1.valid = !(mobile1.nullValue);\n    //   if(((isSubmit || mobile1.touched) && mobile1.valid === false)) {\n    //     mobile1.showErrorMsg = true;\n    //   } else {\n    //     mobile1.showErrorMsg = false;\n    //   }\n    // }\n\n    // if(firstTime === true || mobile2.touched === true || isSubmit) {\n    //   // mobile2 = Validation.notNullValidator(mobile2);\n    //   // mobile2.valid = !(mobile2.nullValue);\n    //   if(((isSubmit || mobile2.touched) && mobile2.valid === false)) {\n    //     mobile2.showErrorMsg = true;\n    //   } else {\n    //     mobile2.showErrorMsg = false;\n    //   }\n    // }\n\n    // if(firstTime === true || mobile3.touched === true || isSubmit) {\n    //   // mobile3 = Validation.notNullValidator(mobile3);\n    //   // mobile3.valid = !(mobile3.nullValue);\n    //   if(((isSubmit || mobile3.touched) && mobile3.valid === false)) {\n    //     mobile3.showErrorMsg = true;\n    //   } else {\n    //     mobile3.showErrorMsg = false;\n    //   }\n    // }\n\n    // if(firstTime === true || mobile4.touched === true || isSubmit) {\n    //   // mobile4 = Validation.notNullValidator(mobile4);\n    //   // mobile4.valid = !(mobile4.nullValue);\n    //   if(((isSubmit || mobile4.touched) && mobile4.valid === false)) {\n    //     mobile4.showErrorMsg = true;\n    //   } else {\n    //     mobile4.showErrorMsg = false;\n    //   }\n    // }\n\n    // if(firstTime === true || email.touched === true || isSubmit) {\n    //   // email = Validation.notNullValidator(email);\n    //   email = Validation.emailValidator(email);\n    //   email.valid = !(email.invalidEmail);\n    //   if(((isSubmit || email.touched) && email.valid === false)) {\n    //     email.showErrorMsg = true;\n    //   } else {\n    //     email.showErrorMsg = false;\n    //   }\n    // }\n\n    // if(firstTime === true || address.touched === true || isSubmit) {\n    //   // address = Validation.notNullValidator(address);\n    //   address.valid = !(address.nullValue);\n    //   if(((isSubmit || address.touched) && address.valid === false)) {\n    //     address.showErrorMsg = true;\n    //   } else {\n    //     address.showErrorMsg = false;\n    //   }\n    // }\n\n    // if(firstTime === true || income.touched === true || isSubmit) {\n    //   // income = Validation.notNullValidator(income);\n    //   income.valid = !(income.nullValue);\n    //   if(((isSubmit || income.touched) && income.valid === false)) {\n    //     income.showErrorMsg = true;\n    //   } else {\n    //     income.showErrorMsg = false;\n    //   }\n    // }\n\n    // if(firstTime === true || living.touched === true || isSubmit) {\n    //   // living = Validation.notNullValidator(living);\n    //   living.valid = !(living.nullValue);\n    //   if(((isSubmit || living.touched) && living.valid === false)) {\n    //     living.showErrorMsg = true;\n    //   } else {\n    //     living.showErrorMsg = false;\n    //   }\n    // }\n\n    // if(firstTime === true || family_members.touched === true || isSubmit) {\n    //   // family_members = Validation.notNullValidator(family_members);\n    //   family_members.valid = !(family_members.nullValue);\n    //   if(((isSubmit || family_members.touched) && family_members.valid === false)) {\n    //     family_members.showErrorMsg = true;\n    //   } else {\n    //     family_members.showErrorMsg = false;\n    //   }\n    // }\n   \n    // if(firstTime === true || additional_detail.touched === true || isSubmit) {\n    //   // additional_detail = Validation.notNullValidator(additional_detail);\n    //   additional_detail.valid = !(additional_detail.nullValue);\n    //   if(((isSubmit || additional_detail.touched) && additional_detail.valid === false)) {\n    //     additional_detail.showErrorMsg = true;\n    //   } else {\n    //     additional_detail.showErrorMsg = false;\n    //   }\n    // }\n   \n\n    if(\n      name.valid === true \n      // last_name.valid === true &&\n      // email.valid === true &&\n      // mobile1.valid === true &&\n      // mobile2.valid === true &&\n      // mobile3.valid === true &&\n      // mobile4.valid === true &&\n      // address.valid === true &&\n      // living.valid === true &&\n      // income.valid === true &&\n      // family_members.valid === true &&\n      // additional_detail.valid === true \n    ) {\n      isFormValid = true;\n    } else {\n      isFormValid = false;\n    }\n    console.log(\"isFormValid\",isFormValid);\n    console.log(\"controls\", controls);\n    // console.log('controls', controls);\n    // console.log('isFormValid', isBusinessFormValid);\n    this.setState({ controls, isFormValid });\n    return isFormValid;\n  }\n\n  saveDetail = () => {\n    const { controls } = this.state;\n    const { name, email, address,\n      mobile1,mobile2,city,company,type\n    } = controls;   \n\n    if(isLoading === true) {\n      return;\n    }\n    const isFormValid = this.handleValidation(false, true);\n    if(isFormValid === false) {\n      return;\n    }\n    console.log(\"controls\", controls);\n    let obj = {\n      name: name.value,\n      email: email.value,\n      mobile1: mobile1.value,\n      mobile2: mobile2.value,\n      address: address.value,\n      city: city.value,\n      company: company.value,\n      type: type.value\n    }\n    this.setState({ isLoading: true });\n    isLoading = true;\n    ContactService.addContact(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        if(message) {\n          ModalService.openAlert('Person', message, 'success');\n        }\n        this.setState({ isLoading: false });\n        isLoading = false;\n        this.props.closeModal(true);\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        isLoading = false;\n      })\n  }\n\n  updateContact = () => {\n    const { contactData} = this.props;\n    const { controls } = this.state;\n    const { name, email, address,\n      mobile1,mobile2,city,company,type\n    } = controls;   \n    const isFormValid = this.handleValidation(false, true);\n    if(isFormValid === false) {\n      return;\n    }\n    console.log(\"controls\", controls);\n    let obj = {\n      name: name.value,\n      email: email.value,\n      mobile1: mobile1.value,\n      mobile2: mobile2.value,\n      address: address.value,\n      city: city.value,\n      company: company.value,\n      type:type.value,\n      contactId: contactData.uuid\n    }\n    this.setState({ isLoading: true });\n    ContactService.updateContact(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        this.setState({ isLoading: false });\n        if(message) {\n          ModalService.openAlert('Person', message, 'success');\n        }\n        this.props.closeModal(true);\n        // this.getPerson();\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        const message = e.response && e.response.data && e.response.data.message ? e.response.data.message : 'Something went wrong';\n        ModalService.openAlert('Person', message, 'error');\n      })\n  }\n\n  render() {\n    const { contactData } = this.props;\n    const { controls,isLoading } = this.state;\n    const { name, email, address,\n      mobile1,mobile2,city,company,type\n    } = controls;\n\n\n    return <Modal isOpen={this.props.show} toggle={this.props.closeModal} >\n      <ModalHeader toggle={this.props.closeModal}>Add Person</ModalHeader>\n      <ModalBody>\n        {isLoading && <CustomSpinner></CustomSpinner>}\n        <Form>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"name\">Name</Label>\n                <Input\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  value={name.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {name.showErrorMsg && <div className=\"error\">* Please enter name</div>}\n\n              </FormGroup>\n            </Col>\n            {/* <Col>\n              <FormGroup>\n                <Label for=\"name\">Last Name</Label>\n                <Input\n                  type=\"text\"\n                  id=\"last_name\"\n                  name=\"last_name\"\n                  value={last_name.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {last_name.showErrorMsg && <div className=\"error\">* Please enter last name</div>}\n              </FormGroup>\n            </Col> */}\n          </Row>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"mobile1\">Mobile Number 1</Label>\n                <Input\n                  type=\"number\"\n                  id=\"mobile1\"\n                  name=\"mobile1\"\n                  value={mobile1.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {mobile1.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"mobile2\">Mobile Number 2</Label>\n                <Input\n                  type=\"number\"\n                  id=\"mobile2\"\n                  name=\"mobile2\"\n                  value={mobile2.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {mobile2.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n              </FormGroup>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"email\">Email</Label>\n                <Input\n                  type=\"text\"\n                  id=\"email\"\n                  name=\"email\"\n                  value={email.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {email.showErrorMsg && <div className=\"error\">* Please enter valid email address</div>}\n\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"company\">company</Label>\n                <Input\n                  type=\"text\"\n                  id=\"company\"\n                  name=\"company\"\n                  value={company.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {company.showErrorMsg && <div className=\"error\">* Please enter valid company name</div>}\n\n              </FormGroup>\n            </Col>\n          </Row>\n          <FormGroup>\n            <Label for=\"address\">Address</Label>\n            <Input\n              type=\"text\"\n              id=\"address\"\n              name=\"address\"\n              value={address.value}\n              onChange={this.handleInputChange}\n            ></Input>\n            {address.showErrorMsg && <div className=\"error\">* Please enter  address</div>}\n\n          </FormGroup>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"city\">City</Label>\n                <Input\n                  type=\"text\"\n                  id=\"city\"\n                  name=\"city\"\n                  value={city.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {city.showErrorMsg && <div className=\"error\">* Please enter valid city name</div>}\n\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"type\">Type</Label>\n                <select name=\"type\" onChange={this.handleInputChange} value={type.value}>\n                  {typeDropdownOptions.map(t=><option value={t.value}>{t.key}</option>)}\n                </select>\n              </FormGroup>\n            </Col>\n          </Row>\n          <Button onClick={contactData ? this.updateContact: this.saveDetail}>\n            Save\n          </Button>\n        </Form>\n      </ModalBody>\n\n    </Modal>\n  }\n}","import React, { Component } from 'react';\nimport { Modal, ModalBody, ModalHeader, Button } from \"reactstrap\";\nimport Dropzone from 'react-dropzone';\nimport ContactService from '../services/ContactService';\nlet file = null;\n\nclass UploadContactModal extends Component {\n\n    state = {\n        file: null,\n        errorMessage: ''\n    }\n\n    componentDidMount(){\n        console.log(\"opening modal\")\n    }\n    uploadFile = () => {\n        if(!this.state.file) {\n            this.setState({ errorMessage: 'Please select file' })\n            return;\n        }\n        ContactService.uploadExcel(this.state.file)\n            .then(data => {\n                this.props.toggle(true);\n                console.log(\"data\", data);\n            })\n            .catch(e => {\n                console.error(\"e\", e);\n            })\n    }\n\n    onDropFile = (acceptedFiles) => {\n        file = acceptedFiles[0];\n        this.setState({ file: file });\n    }\n\n    render() {\n        return (\n            // <div>\n                <Modal isOpen={this.props.show} toggle={() => null} >\n                    <ModalHeader>\n                        <div>\n                            <span>Upload Excel</span>\n                            <span style={{ right: '10px', position: 'absolute' }} onClick={this.props.closeModal}>X</span>\n                        </div>\n                    </ModalHeader>\n                    <ModalBody>\n                        <Dropzone onDrop={acceptedFiles => this.onDropFile(acceptedFiles)}>\n                            {({ getRootProps, getInputProps }) => (\n                                <section>\n                                    <div {...getRootProps()} style={{ height: '300px', border: '1px solid black', marginBottom: '20px' }}>\n                                        <input {...getInputProps()} />\n                                        <p>Drag 'n' drop some files here, or click to select files</p>\n                                    </div>\n                                </section>\n                            )}\n                        </Dropzone>\n                        {this.state.file && <div>{this.state.file.name}</div>}\n                        {this.state.errorMessage && !this.state.file && <div className=\"error\">* {this.state.errorMessage}</div>}\n                        <div style={{ textAlign: 'right' }}>\n                            <Button style={{ width: '100%', backgroundColor: '#ab3b60' }} onClick={this.uploadFile.bind(this)}>Upload </Button>\n                        </div>\n                    </ModalBody>\n                </Modal>\n            // </div>\n        );\n    }\n}\n\nexport default UploadContactModal;\n\n// export default ImportAttendeeModal;","import ModalService from './services/ModalService';\n\nconst monthObj = {\n  1: \"Jan\",\n  2: \"Feb\",\n  3: \"Mar\",\n  4: \"Apr\",\n  5: \"May\",\n  6: \"Jun\",\n  7: \"Jul\",\n  8: \"Aug\",\n  9: \"Sep\",\n  10: \"Oct\",\n  11: \"Nov\",\n  12: \"Dec\"\n}\n\n\nexport function formatDate(date) {\n  date = new Date(date);\n  let day = date.getDate();\n  let month = date.getMonth() + 1;\n  let year = date.getFullYear().toString();\n  year = getYearString(year);\n  if(day < 10) {\n    day = `0` + day\n  }\n  month = monthObj[month];\n  return `${day} ${month}${year}`\n}\n\nfunction getYearString(year) {\n  if(!year) {\n    year = new Date().getFullYear().toString();\n  }\n  return \"'\" + year.slice(2);\n}\n\n\nexport function downlodFile(url) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.setAttribute('download', 'sample.xlsx');\n  link.setAttribute('target', '_blank');\n  // 3. Append to html page\n  document.body.appendChild(link);\n  // 4. Force download\n  link.click();\n  // 5. Clean up and remove the link\n  link.parentNode.removeChild(link);\n}\n\nexport function objectToQuerystring (obj) {\n  return Object.keys(obj).reduce(function (str, key, i) {\n    var delimiter, val;\n    delimiter = (i === 0) ? '?' : '&';\n    key = encodeURIComponent(key);\n    if(obj[key]){\n      val = encodeURIComponent(obj[key]);\n    }\n    return [str, delimiter, key, '=', val].join('');\n  }, '');\n}\n\nexport function showErrorMsg(title,e){\n  let msg= 'Something went wrong';\n  if(e && e.response && e.response.data && e.response.data.message){\n      msg = e.response.data.message;\n  }\n  ModalService.openAlert(title,msg,'failure');\n}","import React, { Component } from 'react';\nimport { Row, Col, Card, CardBody, Table, Form, FormGroup, Label, Input, Button } from 'reactstrap';\nimport Ionicon from 'react-ionicons';\n\nimport Pagination from '../../components/Pagination/Pagination';\n\nimport ContactService from '../../services/ContactService';\nimport Validation from '../../services/Validation';\n\nimport AddContact from '../../modal/AddContact';\nimport UploadContact from '../../modal/UploadContactModal';\n\nimport {downlodFile} from '../../utils';\nimport './Contact.css';\n\nconst pageSize = 10;\n\n\nclass Contact extends Component {\n    state = {\n        contacts: [],\n        downloadExcelFields:['all'],\n        selectedContactToUpdate: null,\n        isAddContactModalOpen: false,\n        isUploadContactModalOpen: false,\n        page: 1,\n        totalRecords: 0,\n        search: null,\n        controls:{\n            downloadCheckbox: {\n                value: ['all'],\n                valid: null,\n                touched: false,\n                required: true,\n                showErrorMsg: false\n              },\n        }\n    }\n\n    componentDidMount() {\n        this.getContacts(this.state.page);\n    }\n\n    getContacts = (page, search,isDownload) => {\n        let {controls}=this.state;\n        let {downloadCheckbox}=controls;\n        let body={\n            downloadExcelFields:downloadCheckbox.value\n        }\n        ContactService.getContacts(page, pageSize, search,isDownload,body)\n            .then(data => {\n                console.log(data.data);\n                if(isDownload){\n                    if(data.data.data && data.data.data.file){\n                        downlodFile(data.data.data.file);\n                    }\n                } else {\n                    const contacts = data.data.data.contacts;\n                    const totalRecords = data.data.data.count;\n                    this.setState({ contacts, totalRecords });\n                }      \n            })\n            .catch(e => {\n\n            })\n    }\n\n    openAddContactModal = (contactData) => {\n        this.setState({ isAddContactModalOpen: true, selectedContactToUpdate: contactData });\n    }\n    closeAddContactModal = (reload) => {\n        console.log(\"closing modal\");\n        this.setState({ isAddContactModalOpen: false, selectedContactToUpdate: null });\n        if(reload) {\n            this.getContacts(this.state.page);\n        }\n    }\n\n    openTransactions = (contactData) =>{\n        this.props.history.push({\n            pathname: \"/transactions\",\n            contactData\n        })\n    }\n\n    openUploadContactModal = () => {\n        this.setState({ isUploadContactModalOpen: true });\n    }\n    closeUploadContactModal = (reload) => {\n        this.setState({ isUploadContactModalOpen: false });\n        if(reload) {\n            this.getContacts(this.state.page);\n        }\n    }\n\n    \n\n    handlePageChange = (page) => {\n        this.setState({ page: page });\n        this.getContacts(page, this.state.search);\n        // this.getAllDealerReport(page, null, false, uuid);\n    }\n\n    handleSearchInput = (e) => {\n        const value = e.target.value;\n        this.setState({ search: value });\n        this.searchContactData(value);\n    }\n\n    searchContactData = (search) => {\n        this.setState({ page: 1 });\n        this.getContacts(1, search);\n    }\n\n    downloadExcel=()=>{\n        this.getContacts(this.state.page,this.state.search,true);\n    }\n\n\n    render() {\n        const { contacts, selectedContactToUpdate, isAddContactModalOpen,\n             page, totalRecords, search,controls,\n             isUploadContactModalOpen\n            } = this.state;\n        const {downloadCheckbox}=controls;\n        const prepareRows = contacts.map(c => <tr>\n            <td>{c.name}</td>\n            <td>\n                <div>{c.mobile1}</div>\n                <div>{c.mobile2}</div>\n            </td>\n            <td>{c.email}</td>\n            <td>{c.address}</td>\n            <td>{c.city}</td>\n            <td>{c.company}</td>\n            <td>{c.type}</td>\n            <td>\n                <span  onClick={this.openAddContactModal.bind(this, c)}>\n                    <Ionicon icon=\"md-create\" fontSize=\"16px\" color=\"#fdbb1f\" />    \n                </span>&nbsp;\n                <span  onClick={this.openTransactions.bind(this, c)} title=\"Transactions\">\n                    <Ionicon icon=\"md-git-compare\" fontSize=\"16px\" color=\"#fdbb1f\"></Ionicon>\n                </span>\n            </td>\n        </tr>)\n        return (\n            <div id=\"contact\">\n                {isAddContactModalOpen &&\n                    <AddContact\n                        show={isAddContactModalOpen}\n                        closeModal={this.closeAddContactModal}\n                        contactData={selectedContactToUpdate}>\n                    </AddContact>}\n\n                    {isUploadContactModalOpen &&\n                    <UploadContact\n                        show={isUploadContactModalOpen}\n                        closeModal={this.closeUploadContactModal}\n                        >\n                    </UploadContact>}\n                <Row>\n                    <Col xl=\"12\">\n                        <Card>\n                            <CardBody>\n                                <Row>\n                                    <Col sm=\"4\">\n                                        <Input\n                                            name=\"search\"\n                                            id=\"search\"\n                                            type=\"text\"\n                                            placeholder=\"Enter person name,phone numeber or company\"\n                                            onChange={this.handleSearchInput}\n                                            value={search}\n                                        ></Input>\n                                    </Col>\n                                    <Col className=\"text-align-right\">\n                                    <span className=\"download-link\" onClick={this.openAddContactModal.bind(this, null)}>Add Contact</span>&nbsp;&nbsp;\n                                        <span className=\"download-link\" onClick={this.openUploadContactModal}>Upload Contact</span>\n                                    </Col>\n                                </Row>\n\n                                <Table className=\"width-100 margin-top-10\">\n                                    <thead>\n                                        <tr>\n                                            <th>Name</th>\n                                            <th>Phone</th>\n                                            <th>Email</th>\n                                            <th>Address</th>\n                                            <th>City</th>\n                                            <th>Company</th>\n                                            <th>Type</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {prepareRows}\n                                    </tbody>\n                                </Table>\n                                {<Pagination\n                                    margin={2}\n                                    page={page}\n                                    pageSize={pageSize}\n                                    totalRecords={totalRecords}\n                                    onPageChange={this.handlePageChange}\n                                ></Pagination>}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    \n                </Row>\n\n            </div>\n        );\n    }\n}\n\nexport default Contact;","import { request,csvUploadRequest } from './request';\nimport { routes } from '../constants/constant.routes';\n\nconst API_URL = routes.API_URL;\n\nexport default class StockService {\n  static addStock(contactObj) {\n    return request('POST', `${API_URL}${routes.ADD_STOCK}`, null, contactObj, null)\n  }\n\n  static updateStock(contactObj) {\n    return request('POST', `${API_URL}${routes.UPDATE_STOCK}`, null, contactObj, null)\n  }\n\n  static deleteStock(uuid) {\n    let qp = `?`;\n    if(uuid) {\n      qp += `u=${uuid}&`\n    }\n    return request('DELETE', `${API_URL}${routes.DELETE_STOCKS}${qp}`, null, null, null)\n  }\n\n  static getStocks(page, pageSize, search,isDownload,body,status) {\n    let qp = `?`;\n    if(page) {\n      qp += `page=${page}&`\n    }\n    if(pageSize) {\n      qp += `limit=${pageSize}&`\n    }\n    if(search) {\n      qp += `search=${search}&`\n    }\n    if(status) {\n      qp += `status=${status}&`\n    }\n    if(isDownload) {\n      qp += `downloadExcel=${isDownload}&`\n    }\n    return request('POST', `${API_URL}${routes.GET_STOCKS}${qp}`, null, body, null)\n  }\n} ","import React,{ Component } from 'react';\nimport { Label, Input, Button } from 'reactstrap';\nimport ContactService from '../../services/ContactService';\n\nclass SearchContact extends Component {\n  state = {\n    contacts:[],\n    personName :null, \n    showPersonList : false,\n    controls:{\n      person: {\n        value: '',\n        valid: null,\n        touched: false,\n        nullValue: null,\n        invalidPassword: null\n      },\n    }\n  }\n\n  componentDidMount() {\n    let { controls } =this.state;\n    const { person: personProp } = this.props;\n    controls.person = personProp;\n    this.setState({ controls });\n    this.getContacts(true);\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n   handleClickOutside = event => {\n      const { forwardedRef } = this.props;\n      if(forwardedRef.current && !forwardedRef.current.contains(event.target)) {\n        this.setState({\n          showPersonList: false,\n        });\n      }\n  }\n\n  handlePersonSearchChange = (e) => {\n    let { personName, controls } = this.state;\n    const { person } = controls;\n    personName = e.target.value;\n    person.value = null;\n    // const value = e.target.value;\n    this.setState({ personName,controls  },()=>{\n      this.getContacts();\n    });\n  }\n\n  openPersonToggle = () => {\n    let { showPersonList } = this.state;\n    showPersonList = true;\n    this.setState({\n      showPersonList\n    });\n  }\n\n  onSelectPerson = (contact) => {\n    const { controlName } = this.props;\n    let { personName, showPersonList, controls } = this.state;\n    const { person } = controls;\n    const { name, uuid } = contact;\n    personName = name;\n    person.value = uuid;\n    showPersonList = false;\n    this.props.getSelectedPersonControl(person,controlName);\n    this.setState({ personName, controls, showPersonList });\n  }\n\n  getContacts = (firstTime) =>{\n    let { personName } =this.state;\n    const { person } = this.props;\n    ContactService.getContacts(1,1000000,personName,false)\n      .then(data=>{\n        console.log(\"data\",data);\n        if(data.data && data.data.data && data.data.data.contacts){\n          this.setState({ contacts : data.data.data.contacts })\n          if(person.value){\n            let contactIndex = data.data.data.contacts.findIndex(c=>c.uuid === person.value)\n            personName = data.data.data.contacts[contactIndex].name;\n            this.setState({personName})\n          }\n        }\n      })\n      .catch(e=>{\n        console.log(\"e\",e);\n      })\n  }\n  \n  render(){\n    const { personName, showPersonList, controls, contacts } = this.state;\n    const { person } = controls;\n    const { forwardedRef } = this.props;\n\n    return <div ref={forwardedRef}>\n        {/* <Label for=\"status\">Contact Name</Label> */}\n        <Input type=\"text\" name=\"person\" autoComplete=\"off\" value={personName} onChange={this.handlePersonSearchChange.bind(this)}\n          onFocus={this.openPersonToggle.bind(this)}></Input>\n        {showPersonList &&\n          <div className=\"p-list\">\n            {contacts.map((c, i) =>\n              <Button\n                className=\"list-button\"\n                onClick={this.onSelectPerson.bind(this, c)}\n              >\n                {c.name}\n              </Button>\n            )}\n          </div>\n        }\n      </div>\n    \n  }\n}\n\nexport default React.forwardRef(\n  function myFunction(props, ref) {\n    return <SearchContact {...props} forwardedRef={ref} />;\n  }\n);","import React, { Component, Fragment } from 'react';\nimport { Modal, ModalHeader, ModalFooter, ModalBody, Button, Row, Col, Input, Form, FormGroup, Label, InputGroup } from 'reactstrap';\nimport DatePicker from 'react-datepicker';\n\nimport CustomSpinner from '../components/CustomSpinner/CustomSpinner';\nimport SearchContact from '../components/SearchContact/SearchContact';\n\nimport StockService from '../services/StockService';\nimport ContactService from '../services/ContactService';\nimport Validation from '../services/Validation';\nimport ModalService from '../services/ModalService';\n\nlet isLoading = false;\nlet statusDropDownOptions = [\n  {\n    key: 'Current Stock',\n    value: 'current-stock'\n  },\n  {\n    key: 'Jangad',\n    value: 'jangad'\n  },\n  {\n    key: 'Sold',\n    value: 'sold'\n  }\n]\n\nlet priceDropDownOptions = [\n  {\n    key: 'Carat',\n    value: 'carat'\n  },\n  {\n    key: 'Total Price',\n    value: 'total_price'\n  }\n]\n\n\nlet defaultControls = {\n  stockId: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null\n  },\n  // last_name: {\n  //   value: '',\n  //   valid: null,\n  //   touched: false,\n  //   nullValue: null\n  // },\n  status: {\n    value: 'current-stock',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  weight: {\n    value: null,\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  buyPricePer: {\n    value: 'carat',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  sellPricePer: {\n    value: 'carat',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  buyDate: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  buyPrice: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  sellDate: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  sellPrice: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  buyPersonId: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  sellPersonId: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  }\n}\nexport default class AddStock extends Component {\n\n  state = {\n    controls: JSON.parse(JSON.stringify(defaultControls)),\n    contacts: [],\n    isLoading: false\n  }\n\n  constructor() {\n    super();\n    this.buyPersonIdContainer = React.createRef();\n    this.sellPersonIdContainer = React.createRef();\n  }\n\n\n\n  componentDidMount() {\n    const { stockData } = this.props;\n    console.log(\"stockData\", stockData);\n    if (stockData) {\n      const { controls } = this.state;\n      const {\n        stockId, buyDate, buyPrice, buyPersonId, sellDate,\n        sellPersonId, sellPrice, status, weight, buyPricePer, sellPricePer\n      } = controls;\n\n      stockId.value = stockData.stock_id;\n      buyDate.value = new Date(stockData.buy_date);\n      buyPrice.value = stockData.buy_price;\n      buyPersonId.value = stockData.buy_person_id;\n      if (stockData.sell_date) {\n        sellDate.value = new Date(stockData.sell_date);\n      }\n      sellPrice.value = stockData.sell_price;\n      sellPersonId.value = stockData.sell_person_id;\n      status.value = stockData.status;\n      weight.value = stockData.weight;\n      buyPricePer.value = stockData.buy_price_per;\n      sellPricePer.value = stockData.sell_price_per;\n      this.setState({ controls });\n    }\n    this.getContacts();\n  }\n\n  handleInputChange = (e) => {\n    const controlName = e.target.name;\n    const controlValue = e.target.value;\n    const { controls } = this.state;\n    controls[controlName].value = controlValue;\n    controls[controlName].touched = true;\n    this.setState({ controls });\n    // this.handleValidation();\n  }\n\n  handleDateChange = (controlName, e) => {\n    console.log(\"e\", e);\n    console.log(\"controlName\", controlName);\n    const { controls } = this.state;\n    let dateControl = controls[controlName];\n    dateControl.value = e;\n    dateControl.touched = true;\n    this.setState({ controls });\n    // this.handleValidation();\n  }\n\n  handleValidation = (firstTime, isSubmit) => {\n    let { controls } = this.state;\n    let {\n      stockId, weight, buyDate, buyPrice,\n      sellDate, sellPrice, buyPersonId,\n      sellPersonId, status\n    } = controls;\n\n    if (firstTime === true || stockId.touched === true || isSubmit) {\n      stockId = Validation.notNullValidator(stockId);\n      stockId.valid = !(stockId.nullValue);\n      if (((isSubmit || stockId.touched) && stockId.valid === false)) {\n        stockId.showErrorMsg = true;\n      } else {\n        stockId.showErrorMsg = false;\n      }\n    }\n\n    if (firstTime === true || weight.touched === true || isSubmit) {\n      weight = Validation.notNullValidator(weight);\n      weight.valid = !(weight.nullValue);\n      if (((isSubmit || weight.touched) && weight.valid === false)) {\n        weight.showErrorMsg = true;\n      } else {\n        weight.showErrorMsg = false;\n      }\n    }\n\n    if (status.value === 'current-stock') {\n      if (firstTime === true || buyDate.touched === true || isSubmit) {\n        console.log(\"buyDate\", buyDate);\n        buyDate = Validation.notNullValidator(buyDate);\n        buyDate.valid = !(buyDate.nullValue);\n        if (((isSubmit || buyDate.touched) && buyDate.valid === false)) {\n          buyDate.showErrorMsg = true;\n        } else {\n          buyDate.showErrorMsg = false;\n        }\n      }\n\n\n      if (firstTime === true || buyPrice.touched === true || isSubmit) {\n        buyPrice = Validation.notNullValidator(buyPrice);\n        buyPrice.valid = !(buyPrice.nullValue);\n        if (((isSubmit || buyPrice.touched) && buyPrice.valid === false)) {\n          buyPrice.showErrorMsg = true;\n        } else {\n          buyPrice.showErrorMsg = false;\n        }\n      }\n\n      if (firstTime === true || buyPersonId.touched === true || isSubmit) {\n        buyPersonId = Validation.notNullValidator(buyPersonId);\n        buyPersonId.valid = !(buyPersonId.nullValue);\n        if (((isSubmit || buyPersonId.touched) && buyPersonId.valid === false)) {\n          buyPersonId.showErrorMsg = true;\n        } else {\n          buyPersonId.showErrorMsg = false;\n        }\n      }\n    }\n\n    if (status.value === 'jangad' || status.value === 'sold') {\n\n      if (firstTime === true || sellPrice.touched === true || isSubmit) {\n        sellPrice = Validation.notNullValidator(sellPrice);\n        sellPrice.valid = !(sellPrice.nullValue);\n        if (((isSubmit || sellPrice.touched) && sellPrice.valid === false)) {\n          sellPrice.showErrorMsg = true;\n        } else {\n          sellPrice.showErrorMsg = false;\n        }\n      }\n\n      if (firstTime === true || sellDate.touched === true || isSubmit) {\n        sellDate = Validation.notNullValidator(sellDate);\n        sellDate.valid = !(sellDate.nullValue);\n        if (((isSubmit || sellDate.touched) && sellDate.valid === false)) {\n          sellDate.showErrorMsg = true;\n        } else {\n          sellDate.showErrorMsg = false;\n        }\n      }\n    }\n\n    if (status.value === 'jangad') {\n      if (firstTime === true || sellPersonId.touched === true || isSubmit) {\n        sellPersonId = Validation.notNullValidator(sellPersonId);\n        sellPersonId.valid = !(sellPersonId.nullValue);\n        if (((isSubmit || sellPersonId.touched) && sellPersonId.valid === false)) {\n          sellPersonId.showErrorMsg = true;\n        } else {\n          sellPersonId.showErrorMsg = false;\n        }\n      }\n    }\n    let isFormValid = stockId.valid && weight.valid;\n    if (status.value === 'current-stock') {\n      isFormValid = isFormValid && buyPersonId.valid && buyPrice.valid && buyDate.valid\n    }\n    if (status.value === 'jangad' || status.value === 'sold') {\n      isFormValid = isFormValid && sellPrice.valid && sellDate.valid\n    }\n    if (status.value === 'jangad') {\n      isFormValid = isFormValid && sellPersonId.valid\n    }\n    console.log(\"isFormValid\", isFormValid);\n    console.log(\"controls\", controls);\n    // console.log('controls', controls);\n    // console.log('isFormValid', isBusinessFormValid);\n    this.setState({ controls, isFormValid });\n    return isFormValid;\n  }\n\n  getSelectedBuyPersonControl = (personControl) => {\n    const { controls } = this.state;\n    controls.buyPersonId = personControl;\n    console.log(\"person\", controls);\n    this.setState({ controls });\n  }\n\n  getSelectedSellPersonControl = (personControl) => {\n    const { controls } = this.state;\n    controls.sellPersonId = personControl;\n    console.log(\"person\", controls);\n    this.setState({ controls });\n  }\n\n  getContacts = () => {\n    ContactService.getContacts(1, 10, null, false)\n      .then(data => {\n        console.log(\"data\", data);\n        if (data.data && data.data.data && data.data.data.contacts) {\n          this.setState({ contacts: data.data.data.contacts })\n        }\n      })\n      .catch(e => {\n        console.log(\"e\", e);\n      })\n  }\n\n  saveDetail = () => {\n    const { controls } = this.state;\n    const { stockId, buyDate, buyPersonId,\n      buyPrice, sellDate, sellPrice, sellPersonId, status, weight, buyPricePer, sellPricePer\n    } = controls;\n\n    if (isLoading === true) {\n      return;\n    }\n    const isFormValid = this.handleValidation(false, true);\n    if (isFormValid === false) {\n      return;\n    }\n    let buyDateVar = null;\n    let sellDateVar = null;\n    if (buyDate.value) {\n      buyDate.value.setHours(5, 30, 0, 0);\n      console.log(\"buyDate\", buyDate);\n      buyDateVar = buyDate.value.toISOString();\n    }\n    if (sellDate.value) {\n      sellDate.value.setHours(5, 30, 0, 0);\n      console.log(\"sellDate\", sellDate);\n      sellDateVar = sellDate.value.toISOString();\n    }\n    console.log(\"controls\", controls);\n    let obj = {\n      stockId: stockId.value,\n      buyDate: buyDateVar,\n      buyPersonId: buyPersonId.value,\n      buyPrice: buyPrice.value,\n      sellDate: sellDateVar,\n      sellPersonId: sellPersonId.value,\n      sellPrice: sellPrice.value,\n      status: status.value,\n      weight: weight.value,\n      buyPricePer: buyPricePer.value,\n      sellPricePer: sellPricePer.value\n    }\n    this.setState({ isLoading: true });\n    isLoading = true;\n    StockService.addStock(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        if (message) {\n          ModalService.openAlert('Person', message, 'success');\n        }\n        this.setState({ isLoading: false });\n        isLoading = false;\n        this.props.closeModal(true);\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        isLoading = false;\n      })\n  }\n\n  updateStock = () => {\n    const { stockData } = this.props;\n    const { controls } = this.state;\n    const { stockId, buyDate, buyPersonId,\n      buyPrice, sellDate, sellPrice, sellPersonId, status, weight, buyPricePer, sellPricePer\n    } = controls;\n    const isFormValid = this.handleValidation(false, true);\n    if (isFormValid === false) {\n      return;\n    }\n    console.log(\"controls\", controls);\n    let buyDateVar = null;\n    let sellDateVar = null;\n    if (buyDate.value) {\n      buyDate.value.setHours(5, 30, 0, 0);\n      console.log(\"buyDate\", buyDate);\n      buyDateVar = buyDate.value.toISOString();\n    }\n    if (sellDate.value) {\n      sellDate.value.setHours(5, 30, 0, 0);\n      console.log(\"sellDate\", sellDate);\n      sellDateVar = sellDate.value.toISOString();\n    }\n\n    let obj = {\n      stockId: stockId.value,\n      buyDate: buyDateVar,\n      buyPersonId: buyPersonId.value,\n      buyPrice: buyPrice.value,\n      sellDate: sellDateVar,\n      sellPersonId: sellPersonId.value,\n      sellPrice: sellPrice.value,\n      status: status.value,\n      weight: weight.value,\n      id: stockData.uuid,\n      buyPricePer: buyPricePer.value,\n      sellPricePer: sellPricePer.value\n    }\n    this.setState({ isLoading: true });\n    StockService.updateStock(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        this.setState({ isLoading: false });\n        if (message) {\n          ModalService.openAlert('Person', message, 'success');\n        }\n        this.props.closeModal(true);\n        // this.getPerson();\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        const message = e.response && e.response.data && e.response.data.message ? e.response.data.message : 'Something went wrong';\n        ModalService.openAlert('Person', message, 'error');\n      })\n  }\n\n  render() {\n    const { stockData, } = this.props;\n    const { controls, contacts } = this.state;\n    const { stockId, buyDate, buyPersonId,\n      buyPrice, sellDate, sellPrice, sellPersonId, status, weight, buyPricePer, sellPricePer\n    } = controls;\n    let isUpdate = stockData && stockData.uuid ? true : false;\n    return <Modal isOpen={this.props.show} toggle={this.props.closeModal} >\n      <ModalHeader toggle={this.props.closeModal}>Add Stock</ModalHeader>\n      <ModalBody>\n        {isLoading && <CustomSpinner></CustomSpinner>}\n        <Form>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"name\">Stock Id</Label>\n                <Input\n                  type=\"text\"\n                  id=\"stockId\"\n                  name=\"stockId\"\n                  value={stockId.value}\n                  onChange={this.handleInputChange}\n                  disabled={isUpdate}\n                ></Input>\n                {stockId.showErrorMsg && <div className=\"error\">* Please enter name</div>}\n\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"weight\">Weight</Label>\n                <Input\n                  type=\"number\"\n                  id=\"weight\"\n                  name=\"weight\"\n                  value={weight.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {weight.showErrorMsg && <div className=\"error\">* Please enter weight</div>}\n              </FormGroup>\n            </Col>\n            {/* <Col>\n              <FormGroup>\n                <Label for=\"name\">Last Name</Label>\n                <Input\n                  type=\"text\"\n                  id=\"last_name\"\n                  name=\"last_name\"\n                  value={last_name.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {last_name.showErrorMsg && <div className=\"error\">* Please enter last name</div>}\n              </FormGroup>\n            </Col> */}\n          </Row>\n\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"status\">Status</Label>\n                <select name=\"status\" onChange={this.handleInputChange} value={status.value}>\n                  {statusDropDownOptions.map((s, i) => {\n                    if (!isUpdate) {\n                      if (i === 0) {\n                        return <option value={s.value}>{s.key}</option>\n                      }\n                    } else {\n                      return <option value={s.value}>{s.key}</option>\n                    }\n                  })}\n                </select>\n              </FormGroup>\n            </Col>\n          </Row>\n          {/* {status.value === 'current-stock' && <Row> */}\n          {<Row>\n            <Col sm=\"4\">\n              <FormGroup>\n                <Label for=\"password\" className=\"field-title\">Buy Date</Label>\n                <div>\n                  <Label className=\"width-100\"\n                    onClick={e => this.buyDate.state.open && e.preventDefault()}\n                  >\n                    <InputGroup>\n                      <DatePicker className={\"form-control calendar-input\"}\n                        selected={buyDate.value}\n                        onChange={this.handleDateChange.bind(this, 'buyDate')}\n                        showMonthDropdown\n                        ref={r => this.buyDate = r}\n                        // shouldCloseOnSelect={true}\n                        dateFormat=\"dd/MM/yyyy\"\n                        showYearDropdown\n                        placeholderText=\"Select\"\n                        shouldCloseOnSelect\n                        dropdownMode=\"select\"\n                      />\n                    </InputGroup>\n                  </Label>\n                  {buyDate.showErrorMsg && <div className=\"error\">\n                    *Please enter buy date\n                  </div>}\n                </div>\n              </FormGroup>\n            </Col>\n            <Col sm=\"4\">\n              <FormGroup>\n                <Label for=\"buyPrice\">Buy Price</Label>\n                <Input\n                  type=\"number\"\n                  id=\"buyPrice\"\n                  name=\"buyPrice\"\n                  value={buyPrice.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {buyPrice.showErrorMsg && <div className=\"error\">* Please enter buy price</div>}\n              </FormGroup>\n            </Col>\n            <Col sm=\"4\">\n              <FormGroup>\n                <Label for=\"buyPricePer\">Buy Price Per</Label>\n                <select name=\"buyPricePer\" onChange={this.handleInputChange} value={buyPricePer.value}>\n                  {\n                    priceDropDownOptions.map((p, i) => {\n                      return <option value={p.value}>{p.key}</option>\n                    })\n                  }\n                </select>\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"buyPersonId\">Buy Contact</Label>\n                <SearchContact\n                  ref={this.buyPersonIdContainer}\n                  person={buyPersonId}\n                  getSelectedPersonControl={this.getSelectedBuyPersonControl}\n                ></SearchContact>\n                {/* <select name=\"buyPersonId\" onChange={this.handleInputChange} value={buyPersonId.value}>\n                  <option>None</option>\n                  {contacts.map(c=><option value={c.uuid}>{c.name}</option>)}\n                </select> */}\n                {buyPersonId.showErrorMsg && <div className=\"error\">* Please enter buy contact</div>}\n              </FormGroup>\n            </Col>\n          </Row>}\n\n          {status.value !== 'current-stock' && <Row>\n            {/* {(status.value === 'jangad' || status.value === 'sold') && <Row> */}\n            <Col sm=\"4\">\n              <FormGroup>\n                <Label for=\"password\" className=\"field-title\">Sell Date</Label>\n                <div>\n                  <Label className=\"width-100\"\n                    onClick={e => this.sellDate.state.open && e.preventDefault()}\n                  >\n                    <InputGroup>\n                      <DatePicker className={\"form-control calendar-input\"}\n                        selected={sellDate.value}\n                        onChange={this.handleDateChange.bind(this, 'sellDate')}\n                        showMonthDropdown\n                        ref={r => this.sellDate = r}\n                        // shouldCloseOnSelect={true}\n                        dateFormat=\"dd/MM/yyyy\"\n                        showYearDropdown\n                        placeholderText=\"Select\"\n                        shouldCloseOnSelect\n                        dropdownMode=\"select\"\n                      />\n                    </InputGroup>\n                  </Label>\n                  {sellDate.showErrorMsg && <div className=\"error\">\n                    * Please enter sell date\n                  </div>}\n                </div>\n              </FormGroup>\n            </Col>\n            <Col sm=\"4\">\n              <FormGroup>\n                <Label for=\"sellPrice\">Sell Price</Label>\n                <Input\n                  type=\"number\"\n                  id=\"sellPrice\"\n                  name=\"sellPrice\"\n                  value={sellPrice.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {sellPrice.showErrorMsg && <div className=\"error\">* Please enter sell price</div>}\n              </FormGroup>\n            </Col>\n            <Col sm=\"4\">\n              <FormGroup>\n                <Label for=\"sellPricePer\">Price</Label>\n                <select name=\"sellPricePer\" onChange={this.handleInputChange} value={sellPricePer.value}>\n                  {\n                    priceDropDownOptions.map((p, i) => {\n                      return <option value={p.value}>{p.key}</option>\n                    })\n                  }\n                </select>\n              </FormGroup>\n            </Col>\n\n            <Col>\n              <FormGroup>\n                <Label for=\"sellPersonId\">Sell Contact</Label>\n                <SearchContact\n                  ref={this.sellPersonIdContainer}\n                  person={sellPersonId}\n                  getSelectedPersonControl={this.getSelectedSellPersonControl}\n                ></SearchContact>\n                {/* <select name=\"sellPersonId\" onChange={this.handleInputChange} value={sellPersonId.value}>\n                  <option>None</option>\n                  {contacts.map(c=><option value={c.uuid}>{c.name}</option>)}\n                </select> */}\n                {sellPersonId.showErrorMsg && <div className=\"error\">* Please enter sell contact</div>}\n              </FormGroup>\n            </Col>\n          </Row>}\n\n\n          <Button onClick={stockData ? this.updateStock : this.saveDetail}>\n            Save\n          </Button>\n        </Form>\n      </ModalBody>\n\n    </Modal>\n  }\n}","import React, { Component } from 'react';\nimport { Row, Col, Card, CardBody, Table, Input,Label } from 'reactstrap';\nimport Ionicon from 'react-ionicons';\nimport Pagination from '../../components/Pagination/Pagination';\n\nimport StockService from '../../services/StockService';\nimport ModalService from '../../services/ModalService';\n\nimport AddStock from '../../modal/AddStock';\nimport {downlodFile,formatDate, showErrorMsg} from '../../utils';\n\nimport './Stocks.css';\n\nconst pageSize = 10;\n\nlet statusDropDownOptions = [\n    {\n        key:'All',\n        value:'all'\n    },\n    {\n      key:'Current Stock',\n      value:'current-stock'\n    },\n    {\n      key:'Jangad',\n      value:'jangad'\n    },\n    {\n      key:'Sold',\n      value:'sold'\n    }\n]\n\nclass Stocks extends Component {\n    state = {\n      stocks: [],\n      downloadExcelFields:['all'],\n      selectedStockToUpdate: null,\n      isAddContactModalOpen: false,\n      isAddStockModalOpen: false,\n      isUploadContactModalOpen: false,\n      page: 1,\n      totalRecords: 0,\n      search: null,\n      controls:{\n          downloadCheckbox: {\n              value: ['all'],\n              valid: null,\n              touched: false,\n              required: true,\n              showErrorMsg: false\n            },\n      },\n      selectedStatus:'all'\n    }\n\n    componentDidMount() {\n        this.getStocks(this.state.page);\n    }\n\n    handleInputChange = (e) => {\n        const controlName = e.target.name;\n        const controlValue = e.target.value;\n        console.log(\"controlName\",)\n        let stateValue = controlValue;\n        let obj = {\n            page:1\n        };\n        obj[controlName]=stateValue;\n        console.log(\"obj\",obj);\n        this.setState(obj,()=>{\n            this.getStocks()\n        });\n        // this.handleValidation();\n      }\n    \n\n    getStocks = (page, search,isDownload) => {\n        let { controls, selectedStatus  }=this.state;\n        let {downloadCheckbox}=controls;\n        let body={\n            downloadExcelFields:downloadCheckbox.value\n        }\n        StockService.getStocks(page, pageSize, search,isDownload,body,selectedStatus)\n            .then(data => {\n                console.log(data.data);\n                if(isDownload){\n                    if(data.data.data && data.data.data.file){\n                        downlodFile(data.data.data.file);\n                    }\n                } else {\n                    const stocks = data.data.data.stocks;\n                    const totalRecords = data.data.data.count;\n                    this.setState({ stocks, totalRecords });\n                }      \n            })\n            .catch(e => {\n                \n            })\n    }\n\n    openAddStockModal = (stockData) => {\n        this.setState({ isAddStockModalOpen: true, selectedStockToUpdate: stockData });\n    }\n    closeAddStockModal = (reload) => {\n        console.log(\"closing modal\");\n        this.setState({ isAddStockModalOpen: false, selectedStockToUpdate: null });\n        if(reload) {\n            this.getStocks(this.state.page);\n        }\n    }\n\n    deleteStock = (uuid) => {\n        StockService.deleteStock(uuid)\n            .then(data=>{\n                this.setState({page:1},()=>{\n                    this.getStocks(1,this.state.search);\n                })\n            })\n            .catch(e=>{\n                showErrorMsg('',e);\n            })\n    }\n\n    handlePageChange = (page) => {\n        this.setState({ page: page });\n        this.getStocks(page, this.state.search);\n        // this.getAllDealerReport(page, null, false, uuid);\n    }\n\n    handleSearchInput = (e) => {\n        const value = e.target.value;\n        this.setState({ search: value });\n        this.searchContactData(value);\n    }\n\n    searchContactData = (search) => {\n        this.setState({ page: 1 });\n        this.getStocks(1, search);\n    }\n\n    downloadExcel=()=>{\n        this.getStocks(this.state.page,this.state.search,true);\n    }\n\n    handledownloadCheckboxInput = (e) => {\n        const { controls } = this.state;\n        const { downloadCheckbox } = controls;\n        let checkBoxValue = downloadCheckbox.value;\n        let valueIndex = checkBoxValue.indexOf(e);\n        if(valueIndex < 0) {\n          if((e !== 'all' && checkBoxValue && checkBoxValue[0] === 'all') || e === 'all') {\n            checkBoxValue = [e];\n          } else {\n            checkBoxValue.push(e);\n          }\n        } else {\n          checkBoxValue.splice(valueIndex, 1);\n        }\n        downloadCheckbox.value = checkBoxValue;\n        \n        this.setState({ controls })\n      }\n\n    render() {\n        const { stocks, selectedStockToUpdate, isAddContactModalOpen,\n             page, totalRecords, search,controls,\n             isAddStockModalOpen,selectedStatus\n            } = this.state;\n        const { downloadCheckbox }=controls;\n        const prepareRows = stocks.map(s => <tr>\n            <td>{s.stock_id}</td>\n            <td>{s.status}</td>\n            <td>{s.weight}</td>\n            <td>{s.buy_person_name}</td>\n            <td>\n                <div>{formatDate(s.buy_date)}</div>\n            </td>\n            <td>{s.buy_price}</td>\n            <td>{s.buy_price_per}</td>\n            <td>{s.sell_person_name}</td>\n            <td>{s.sell_date && formatDate(s.sell_date)}</td>\n            <td>{s.sell_price}</td>\n            <td>{s.sell_price_per}</td>\n            <td>\n              <Ionicon onClick={this.openAddStockModal.bind(this, s)} icon=\"md-create\" fontSize=\"16px\" color=\"#fdbb1f\" />&nbsp;\n              {!(s.sell_person_name || s.sell_date || s.sell_price) && <Ionicon onClick={this.deleteStock.bind(this, s.uuid)} icon=\"md-trash\" fontSize=\"16px\" color=\"#fdbb1f\" />}\n            </td>\n        </tr>)\n        return (\n            <div id=\"contact\">\n                {/* {isAddContactModalOpen &&\n                    <AddContact\n                        show={isAddContactModalOpen}\n                        closeModal={this.closeAddContactModal}\n                        contactData={selectedContactToUpdate}>\n                    </AddContact>} */}\n\n                {isAddStockModalOpen &&\n                    <AddStock\n                        show={isAddStockModalOpen}\n                        closeModal={this.closeAddStockModal}\n                        stockData={selectedStockToUpdate}>\n                    </AddStock>}\n\n                <Row>\n                    <Col xl=\"12\">\n                        <Card>\n                            <CardBody>\n                                <Row>\n                                    <Col sm=\"3\">\n                                    <Label for=\"status\">Search</Label>\n                                        <Input\n                                            name=\"search\"\n                                            id=\"search\"\n                                            type=\"text\"\n                                            placeholder=\"Enter person name,phone numeber or company\"\n                                            onChange={this.handleSearchInput}\n                                            value={search}\n                                        ></Input>\n                                    </Col>\n                                    <Col sm=\"2\">\n                                        <Label for=\"status\">Status</Label>\n                                        <select name=\"selectedStatus\" onChange={this.handleInputChange} value={selectedStatus}>\n                                            {statusDropDownOptions.map(s=><option value={s.value}>{s.key}</option>)}\n                                        </select>\n                                    </Col>\n                                    <Col className=\"text-align-right\">\n                                    <span className=\"download-link\" onClick={this.openAddStockModal.bind(this, null)}>Add Stock</span>&nbsp;&nbsp;\n                                        {/* <span className=\"download-link\" onClick={this.openUploadContactModal}>Upload Contact</span> */}\n                                    </Col>\n                                </Row>\n\n                                <Table className=\"width-100 margin-top-10\">\n                                    <thead>\n                                        <tr>\n                                            <th>Stock Id</th>\n                                            <th>Status</th>\n                                            <th>Weight</th>\n                                            <th>Buy Contact</th>\n                                            <th>Buy Date</th>\n                                            <th>Buy Price</th>\n                                            <th>Buy Price Per</th>\n                                            <th>Sell Contact</th>\n                                            <th>Sell Date</th>\n                                            <th>Sell Price</th>\n                                            <th>Sell Price per</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {prepareRows}\n                                    </tbody>\n                                </Table>\n                                {<Pagination\n                                    margin={2}\n                                    page={page}\n                                    pageSize={pageSize}\n                                    totalRecords={totalRecords}\n                                    onPageChange={this.handlePageChange}\n                                ></Pagination>}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                   \n                </Row>\n\n            </div>\n        );\n    }\n}\n\nexport default Stocks;","import { request,csvUploadRequest } from './request';\nimport { routes } from '../constants/constant.routes';\n\nconst API_URL = routes.API_URL;\n\nexport default class TransactionService {\n  static addTransaction(contactObj) {\n    return request('POST', `${API_URL}${routes.ADD_TRANSACTION}`, null, contactObj, null)\n  }\n\n  static addOtherTransaction(contactObj) {\n    return request('POST', `${API_URL}${routes.ADD_OTHER_TRANSACTION}`, null, contactObj, null)\n  }\n\n  static updateTransaction(contactObj) {\n    return request('POST', `${API_URL}${routes.UPDATE_TRANSACTION}`, null, contactObj, null)\n  }\n\n  static getTransactions(page, pageSize, search,isDownload,body,personId,mode) {\n    let qp = `?`;\n    if(page) {\n      qp += `page=${page}&`\n    }\n    if(pageSize) {\n      qp += `limit=${pageSize}&`\n    }\n    if(search) {\n      qp += `search=${search}&`\n    }\n    if(mode) {\n      qp += `mode=${mode}&`\n    }\n    if(isDownload) {\n      qp += `downloadExcel=${isDownload}&`\n    }\n    if(personId) {\n      qp += `u=${personId}&`\n    }\n    return request('POST', `${API_URL}${routes.GET_TRANSACTIONS}${qp}`, null, body, null)\n  }\n\n  static getCloseAmountToday() {\n    return request('GET', `${API_URL}${routes.GET_CLOSE_AMOUNT_TODAY}`, null, null, null)\n  }\n} ","import React, { Component, Fragment } from 'react';\nimport { Modal, ModalHeader, ModalFooter, ModalBody, Button, Row, Col, Input, Form, FormGroup, Label, InputGroup } from 'reactstrap';\nimport DatePicker from 'react-datepicker';\n\nimport CustomSpinner from '../components/CustomSpinner/CustomSpinner';\nimport SearchContact from '../components/SearchContact/SearchContact';\n\nimport TransactionService from '../services/TransactionService';\nimport ContactService from '../services/ContactService';\nimport Validation from '../services/Validation';\nimport ModalService from '../services/ModalService';\n\nlet isLoading = false;\n\nlet defaultControls = {\n  transactionDate: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null\n  },\n  // last_name: {\n  //   value: '',\n  //   valid: null,\n  //   touched: false,\n  //   nullValue: null\n  // },\n  person: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  debitContactName: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  creditContactName: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  type: {\n    value: 'credit',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  mode: {\n    value: 'cash',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  note: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  amount: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  } \n}\n\nexport default class AddTransaction extends Component {\n\n  state = {\n    contacts:[],\n    controls: JSON.parse(JSON.stringify(defaultControls)),\n    isLoading: false,\n    personName :null, \n    search:null,\n    showPersonList : false\n  }\n\n  constructor() {\n    super();\n    this.container = React.createRef();\n    this.debitPersoncontainer = React.createRef();\n    this.creditPersonContainer = React.createRef();\n  }\n\n\n  componentDidMount() {\n    // document.addEventListener(\"mousedown\", this.handleClickOutside);\n    const { transactionData } = this.props;\n    console.log(\"transactionData\", transactionData);\n    this.getContacts();\n    if(transactionData) {\n      const { controls } = this.state;\n      const { \n        transactionDate, type, mode, note, amount, person\n      } = controls;\n      \n      transactionDate.value = new Date(transactionData.transaction_date);\n      if(transactionData.credit){\n        type.value = 'credit';\n        amount.value = transactionData.credit;\n      } \n      if(transactionData.debit) {\n        type.value = 'debit';\n        amount.value = transactionData.debit;\n      }\n      mode.value = transactionData.mode;\n      note.value = transactionData.note;\n      person.value = transactionData.person_id;\n\n      this.setState({ controls });\n    }\n  }\n\n  componentWillUnmount() {\n    // document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  handleInputChange = (e) => {\n    const controlName = e.target.name;\n    const controlValue = e.target.value;\n    const { controls } = this.state;\n    controls[controlName].value = controlValue;\n    controls[controlName].touched = true;\n    this.setState({ controls });\n    // this.handleValidation();\n  }\n\n\n  handleDateChange = (controlName, e) => {\n    console.log(\"e\", e);\n    console.log(\"controlName\", controlName);\n    const { controls } = this.state;\n    let dateControl = controls[controlName];\n    dateControl.value = e;\n    dateControl.touched = true;\n    this.setState({ controls });\n    // this.handleValidation();\n  }\n\n  handleValidation = (firstTime, isSubmit) => {\n    let { controls, isFormValid } = this.state;\n    let { \n      transactionDate, type, mode, note, amount, person\n    } = controls;\n\n    if(mode.value !== 'other'){\n      if(firstTime === true || person.touched === true || isSubmit) {\n        person = Validation.notNullValidator(person);\n        person.valid = !(person.nullValue);\n        if(((isSubmit || person.touched) && person.valid === false)) {\n          person.showErrorMsg = true;\n        } else {\n          person.showErrorMsg = false;\n        }\n      }\n    }\n\n    if(firstTime === true || type.touched === true || isSubmit) {\n      type = Validation.notNullValidator(type);\n      type.valid = !(type.nullValue);\n      if(((isSubmit || type.touched) && type.valid === false)) {\n        type.showErrorMsg = true;\n      } else {\n        type.showErrorMsg = false;\n      }\n    }\n\n\n    if(firstTime === true || mode.touched === true || isSubmit) {\n      mode = Validation.notNullValidator(mode);\n      mode.valid = !(mode.nullValue);\n      if(((isSubmit || mode.touched) && mode.valid === false)) {\n        mode.showErrorMsg = true;\n      } else {\n        mode.showErrorMsg = false;\n      }\n    }\n\n    if(firstTime === true || amount.touched === true || isSubmit) {\n      amount = Validation.notNullValidator(amount);\n      amount.valid = !(amount.nullValue);\n      if(((isSubmit || amount.touched) && amount.valid === false)) {\n        amount.showErrorMsg = true;\n      } else {\n        amount.showErrorMsg = false;\n      }\n    }\n\n    \n\n    if(\n      type.valid === true &&\n      mode.valid === true && \n      amount.valid === true \n      // &&  person.valid === true\n      // last_name.valid === true &&\n      // email.valid === true &&\n      // mobile1.valid === true &&\n      // mobile2.valid === true &&\n      // mobile3.valid === true &&\n      // mobile4.valid === true &&\n      // address.valid === true &&\n      // living.valid === true &&\n      // income.valid === true &&\n      // family_members.valid === true &&\n      // additional_detail.valid === true \n    ) {\n      isFormValid = true;\n    } else {\n      isFormValid = false;\n    }\n    console.log(\"isFormValid\",isFormValid);\n    console.log(\"controls\", controls);\n    // console.log('controls', controls);\n    // console.log('isFormValid', isBusinessFormValid);\n    this.setState({ controls, isFormValid });\n    return isFormValid;\n  }\n\n  getContacts = () => {\n    const { personName } =this.state;\n    ContactService.getContacts(1,1000000,personName,false)\n      .then(data=>{\n        console.log(\"data\",data);\n        if(data.data && data.data.data && data.data.data.contacts){\n          this.setState({ contacts : data.data.data.contacts })\n        }\n      })\n      .catch(e=>{\n        console.log(\"e\",e);\n      })\n  }\n\n\n  // handlePersonSearchChange = (e) => {\n  //   let { personName, controls } = this.state;\n  //   const { person } = controls;\n  //   personName = e.target.value;\n  //   person.value = null;\n  //   // const value = e.target.value;\n  //   this.setState({ personName,controls  },()=>{\n  //     this.getContacts();\n  //   });\n  // }\n\n  // openPersonToggle = () => {\n  //   let { showPersonList } = this.state;\n  //   showPersonList = true;\n  //   this.setState({\n  //     showPersonList\n  //   });\n  // }\n\n  // onSelectPerson = (contact) => {\n  //   let { personName, showPersonList, controls } = this.state;\n  //   const { person } = controls;\n  //   const { name, uuid } = contact;\n  //   personName = name;\n  //   person.value = uuid;\n  //   showPersonList = false;\n  //   this.setState({ personName, controls, showPersonList });\n  // }\n\n  saveDetail = (isEdit = false) => {\n    const { controls } = this.state;\n    const { transactionDate, type, mode, amount, note, person,debitContactName,creditContactName } = controls;   \n    const { transactionData } = this.props;\n    if(isLoading === true) {\n      return;\n    }\n    const isFormValid = this.handleValidation(false, true);\n    if(isFormValid === false) {\n      return;\n    }\n    console.log(\"controls\", controls);\n    const { contactData } = this.props;\n    let transactionDateVar = null;\n    if(transactionDate.value){\n      transactionDate.value.setHours(5,30,0,0);\n      transactionDateVar = transactionDate.value.toISOString();\n    }\n    let obj = {\n      transactionDate: transactionDateVar,\n      type: type.value,\n      mode: mode.value,\n      amount: amount.value,\n      note: note.value,\n      personId: person.value\n    }\n    console.log(mode.value,isEdit);\n    if(isEdit !== true && mode.value === 'other'){\n      delete obj.type;\n      delete obj.personId;\n      obj.debitPersonId = debitContactName.value;\n      obj.creditPersonId = creditContactName.value;\n    }\n    \n    if(isEdit === true){\n      obj.id = transactionData.uuid\n    }\n\n    this.setState({ isLoading: true });\n    isLoading = true;\n    let functionToCall = null;\n    if(isEdit === true){\n      functionToCall = TransactionService.updateTransaction(obj);\n    } else {\n      if(mode.value === 'other'){\n        functionToCall = TransactionService.addOtherTransaction(obj);\n      } else {\n        functionToCall = TransactionService.addTransaction(obj);\n      }\n    }\n\n    functionToCall\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        if(message) {\n          ModalService.openAlert('Person', message, 'success');\n        }\n        this.setState({ isLoading: false });\n        isLoading = false;\n        this.props.closeModal(true);\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        isLoading = false;\n      })\n  }\n\n  handleClickOutside = event => {\n    if(this.container.current && !this.container.current.contains(event.target)) {\n      // if(!this.container.current ) {\n      console.log(\"setting to hide\");\n      this.setState({\n        showPersonList: false,\n      });\n    }\n  }\n  \n  getSelectedPersonControl = (personControl,controlName) => {\n    const { controls } = this.state;\n    controls[controlName] = personControl;\n    this.setState({ controls });\n  }\n\n  render() {\n    const { transactionData } = this.props;\n    const { controls,isLoading, contacts, personName, personUuid, showPersonList } = this.state;\n    const { transactionDate, mode, type, amount, note, person, debitContactName, creditContactName } = controls;\n\n\n    return <Modal isOpen={this.props.show} toggle={this.props.closeModal} >\n      <ModalHeader toggle={this.props.closeModal}>Add Transaction</ModalHeader>\n      <ModalBody>\n        {isLoading && <CustomSpinner></CustomSpinner>}\n        <Form>\n          <Row>\n          <Col>\n              <FormGroup>\n                <Label for=\"mode\">Mode</Label>\n                <div>\n                  <select name=\"mode\" onChange={this.handleInputChange} value={mode.value}>\n                    <option value='cash'>Cash</option>\n                    {/* <option value='check'>Check</option> */}\n                    <option value='other'>Other</option>\n                    {/* <option value='stock'>Stock</option> */}\n                  </select>\n                  {mode.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n                </div>\n              </FormGroup>\n            </Col>\n          <Col>\n                <FormGroup>\n                <Label for=\"password\" className=\"field-title\">Transaction Date</Label>\n                <div>\n                  <Label className=\"width-100\"\n                    onClick={e => this.transactionDate.state.open && e.preventDefault()}\n                  >\n                    <InputGroup>\n                      <DatePicker className={\"form-control calendar-input\"}\n                        selected={transactionDate.value}\n                        onChange={this.handleDateChange.bind(this, 'transactionDate')}\n                        showMonthDropdown\n                        ref={r => this.transactionDate = r}\n                        // shouldCloseOnSelect={true}\n                        dateFormat=\"dd/MM/yyyy\"\n                        showYearDropdown\n                        placeholderText=\"Select\"\n                        shouldCloseOnSelect\n                        dropdownMode=\"select\"\n                      />\n                    </InputGroup>\n                  </Label>\n                  {transactionDate.showErrorMsg && <div className=\"error\">\n                    {/* {EMPTY_BANNER_END_DATE} */}\n                  </div>}\n                </div>\n              </FormGroup>\n            </Col>\n            \n          </Row>\n          <Row >\n            {!(mode.value === 'other' && !transactionData ) && <Col>\n              <Label for=\"person\">Contact Name</Label>\n              <SearchContact \n                ref={this.container} \n                person={person}\n                controlName=\"person\"\n                getSelectedPersonControl={this.getSelectedPersonControl}\n              ></SearchContact>\n              {person.showErrorMsg && <div className=\"error\">* Please select person name</div>}\n              </Col>}\n              {mode.value === 'other' && !transactionData && <>\n                <Col>\n                  <Label for=\"debitContactName\">Debit Contact Name</Label>\n                  <SearchContact \n                    ref={this.debitPersoncontainer}\n                    person={debitContactName}\n                    controlName=\"debitContactName\"\n                    getSelectedPersonControl={this.getSelectedPersonControl}\n                  ></SearchContact>\n                  {debitContactName.showErrorMsg && <div className=\"error\">* Please select person name</div>}\n                </Col>\n                <Col>\n                  <Label for=\"creditContactName\">Credit Contact Name</Label>\n                  <SearchContact \n                    ref={this.creditPersonContainer} \n                    person={creditContactName}\n                    controlName=\"creditContactName\"\n                    getSelectedPersonControl={this.getSelectedPersonControl}\n                  ></SearchContact>\n                  {creditContactName.showErrorMsg && <div className=\"error\">* Please select person name</div>}\n                </Col>\n              </>}\n          </Row>\n          {!(mode.value === 'other' && !transactionData ) && <Row className=\"margin-top-5\">\n            <Col>\n              <FormGroup>\n                <Label for=\"type\">Type</Label>\n                <div>\n                  <select name=\"type\" onChange={this.handleInputChange} value={type.value}>\n                    <option value='credit'>Credit</option>\n                    <option value='debit'>Debit</option>\n                  </select>\n                  {type.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>}\n\n          <Row className=\"margin-top-5\">\n            <Col>\n              <FormGroup>\n                <Label for=\"amount\">Amount</Label>\n                <Input\n                  type=\"number\"\n                  id=\"amount\"\n                  name=\"amount\"\n                  value={amount.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {amount.showErrorMsg && <div className=\"error\">* Please enter valid amount</div>}\n\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"note\">Note</Label>\n                <Input\n                  type=\"text\"\n                  id=\"note\"\n                  name=\"note\"\n                  value={note.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {note.showErrorMsg && <div className=\"error\">* Please enter valid company name</div>}\n\n              </FormGroup>\n            </Col>\n          </Row>\n          \n          \n          <Button onClick={transactionData ? this.saveDetail.bind(this,true): this.saveDetail}>\n            Save\n          </Button>\n        </Form>\n      </ModalBody>\n\n    </Modal>\n  }\n}","import React, { Component } from 'react';\nimport { Row, Col, Card, CardBody, Table, Form, FormGroup, Label, Input, Button } from 'reactstrap';\nimport Ionicon from 'react-ionicons';\n\nimport Pagination from '../../components/Pagination/Pagination';\n\n\nimport TransactionService from '../../services/TransactionService';\nimport Validation from '../../services/Validation';\n\nimport AddContact from '../../modal/AddContact';\nimport UploadContact from '../../modal/UploadContactModal';\nimport AddTransaction from '../../modal/AddTransaction';\n\nimport {downlodFile,formatDate} from '../../utils';\nimport './Transactions.css';\n\nconst pageSize = 10;\n\n\nclass Transactions extends Component {\n    state = {\n        transactions: [],\n        downloadExcelFields:['all'],\n        selectedContactToUpdate: null,\n        selectedTransactionToUpdate: null,\n        isAddContactModalOpen: false,\n        isAddTransactionModalOpen: false,\n        isUploadContactModalOpen: false,\n        page: 1,\n        totalRecords: 0,\n        search: null,\n        controls:{\n            downloadCheckbox: {\n                value: ['all'],\n                valid: null,\n                touched: false,\n                required: true,\n                showErrorMsg: false\n              },\n        },\n        mode:'all'\n    }\n\n    componentDidMount() {   \n        this.getTransactions();\n    }\n\n    handleInputChange = (e) => {\n        const controlName = e.target.name;\n        const controlValue = e.target.value;\n        let stateValue = controlValue;\n        let obj = {\n            page:1\n        };\n        obj[controlName]=stateValue;\n        console.log(\"obj\",obj);\n        this.setState(obj,()=>{\n            this.getTransactions()\n        });\n        // this.handleValidation();\n    }\n\n    getTransactions = (isDownload) => {\n        let { controls, page, search,mode }=this.state;\n        console.log(\"this.props\",this.props);\n        let personId = null;\n        if(this.props.location && this.props.location.contactData){\n            personId = this.props.location.contactData.uuid;\n        }\n        let {downloadCheckbox} = controls;\n        let body={\n            downloadExcelFields:downloadCheckbox.value\n        }\n        TransactionService.getTransactions(page, pageSize, search,isDownload,body,personId,mode)\n            .then(data => {\n                console.log(data.data);\n                if(isDownload){\n                    if(data.data.data && data.data.data.file){\n                        downlodFile(data.data.data.file);\n                    }\n                } else {\n                    const transactions = data.data.data.transaction;\n                    const totalRecords = data.data.data.count;\n                    this.setState({ transactions, totalRecords });\n                }      \n            })\n            .catch(e => {\n\n            })\n    }\n\n    openAddContactModal = (contactData) => {\n        this.setState({ isAddContactModalOpen: true, selectedContactToUpdate: contactData });\n    }\n    closeAddContactModal = (reload) => {\n        console.log(\"closing modal\");\n        this.setState({ isAddContactModalOpen: false, selectedContactToUpdate: null });\n        if(reload) {\n            this.getContacts(this.state.page);\n        }\n    }\n\n    openAddTransactionModal = (contactData) => {\n        this.setState({ isAddTransactionModalOpen: true, selectedTransactionToUpdate: contactData });\n    }\n    \n    closeAddTransactionModal = (reload) => {\n        console.log(\"closing modal\");\n        this.setState({ isAddTransactionModalOpen: false, selectedTransactionToUpdate: null });\n        if(reload) {\n            this.getTransactions();\n        }\n    }\n\n    openUploadContactModal = () => {\n        this.setState({ isUploadContactModalOpen: true });\n    }\n    closeUploadContactModal = (reload) => {\n        this.setState({ isUploadContactModalOpen: false });\n        if(reload) {\n            this.getContacts(this.state.page);\n        }\n    }\n\n    handlePageChange = (page) => {\n        this.setState({ page: page },() => {\n            this.getTransactions();\n        });\n    }\n\n    handleSearchInput = (e) => {\n        const value = e.target.value;\n        this.setState({ page:1, search: value },()=>{\n            this.getTransactions();\n        })\n    }\n\n    downloadExcel=()=>{\n        this.getContacts(this.state.page,this.state.search,true);\n    }\n\n    handledownloadCheckboxInput = (e) => {\n        const { controls } = this.state;\n        const { downloadCheckbox } = controls;\n        let checkBoxValue = downloadCheckbox.value;\n        let valueIndex = checkBoxValue.indexOf(e);\n        if(valueIndex < 0) {\n          if((e !== 'all' && checkBoxValue && checkBoxValue[0] === 'all') || e === 'all') {\n            checkBoxValue = [e];\n          } else {\n            checkBoxValue.push(e);\n          }\n        } else {\n          checkBoxValue.splice(valueIndex, 1);\n        }\n        downloadCheckbox.value = checkBoxValue;\n        \n        this.setState({ controls })\n      }\n\n    render() {\n        const { transactions, selectedContactToUpdate, isAddContactModalOpen,\n             page, totalRecords, search,controls,\n             isUploadContactModalOpen,isAddTransactionModalOpen,selectedTransactionToUpdate,mode\n            } = this.state;\n        const {downloadCheckbox}=controls;\n        const prepareRows = transactions.map(t => <tr>\n            <td>{t.name}</td>\n            <td>{formatDate(t.transaction_date)}</td>\n            <td>\n                <div>{t.credit}</div>\n                \n            </td>\n            <td>{t.debit}</td>\n            <td>{t.mode}</td>\n            <td>{t.note}</td>\n            <td>\n              {!(t.mode === 'stock' || !t.person_id) && <Ionicon onClick={this.openAddTransactionModal.bind(this, t)} icon=\"md-create\" fontSize=\"16px\" color=\"#fdbb1f\" />}\n            </td>\n        </tr>)\n        return (\n            <div id=\"contact\">\n                {/* {isAddContactModalOpen &&\n                    <AddContact\n                        show={isAddContactModalOpen}\n                        closeModal={this.closeAddContactModal}\n                        contactData={selectedContactToUpdate}>\n                    </AddContact>}\n\n                    {isUploadContactModalOpen &&\n                    <UploadContact\n                        show={isUploadContactModalOpen}\n                        closeModal={this.closeUploadContactModal}\n                        >\n                    </UploadContact>} */}\n\n                    {isAddTransactionModalOpen &&\n                    <AddTransaction\n                        show={isAddTransactionModalOpen}\n                        closeModal={this.closeAddTransactionModal}\n                        transactionData={selectedTransactionToUpdate}>\n                    </AddTransaction>}\n                <Row>\n                    <Col xl=\"12\">\n                        <Card>\n                            <CardBody>\n                                <Row>\n                                    <Col sm=\"3\">\n                                    <Label for=\"mode\">Search</Label>\n                                        <Input\n                                            name=\"search\"\n                                            id=\"search\"\n                                            type=\"text\"\n                                            placeholder=\"Enter person name,phone numeber or company\"\n                                            onChange={this.handleSearchInput}\n                                            value={search}\n                                        ></Input>\n                                    </Col>\n                                    <Col sm=\"2\">\n                                        <Label for=\"mode\">Mode</Label>\n                                        <div>\n                                            <select name=\"mode\" onChange={this.handleInputChange} value={mode}>\n                                                <option value='all'>All</option>\n                                                <option value='cash'>Cash</option>\n                                                <option value='check'>Check</option>\n                                                <option value='stock'>Stock</option>\n                                                <option value='other'>Other</option>\n                                            </select>\n                                        </div>\n                                    </Col>\n                                    <Col className=\"text-align-right\">\n                                    <span className=\"download-link\" onClick={this.openAddTransactionModal.bind(this, null)}>Add Transaction</span>&nbsp;&nbsp;\n                                    {/* <span className=\"download-link\" onClick={this.openAddContactModal.bind(this, null)}>Add Contact</span>&nbsp;&nbsp; */}\n                                        {/* <span className=\"download-link\" onClick={this.openUploadContactModal}>Upload Contact</span> */}\n                                    </Col>\n                                </Row>\n\n                                <Table className=\"width-100 margin-top-10\">\n                                    <thead>\n                                        <tr>\n                                            <th>Name</th>\n                                            <th>Date</th>\n                                            <th>Credit</th>\n                                            <th>Debit</th>\n                                            <th>Mode</th>\n                                            <th>Note</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {prepareRows}\n                                    </tbody>\n                                </Table>\n                                {<Pagination\n                                    margin={2}\n                                    page={page}\n                                    pageSize={pageSize}\n                                    totalRecords={totalRecords}\n                                    onPageChange={this.handlePageChange}\n                                ></Pagination>}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                   \n                </Row>\n\n            </div>\n        );\n    }\n}\n\nexport default Transactions;","import { request,csvUploadRequest } from './request';\nimport { routes } from '../constants/constant.routes';\nconst {\n  ADD_OPENING_BALANCE,\n  UPDATE_OPENING_BALANCE,\n  GET_TODAY_OPENING_BALANCE\n} = routes;\n\nconst API_URL = routes.API_URL;\n\nexport default class OpeningBalanceService {\n  static addOpeningBalance(obj) {\n    return request('POST', `${API_URL}${ADD_OPENING_BALANCE}`, null, obj, null)\n  }\n\n  static updateOpeningBalance(obj) {\n    return request('POST', `${API_URL}${UPDATE_OPENING_BALANCE}`, null, obj, null)\n  }\n\n  static getTodayOpeningBalance(obj) {\n    return request('GET', `${API_URL}${GET_TODAY_OPENING_BALANCE}`, null, null, null)\n  }\n}\n","import { request,csvUploadRequest } from './request';\nimport { routes } from '../constants/constant.routes';\nimport { objectToQuerystring } from '../utils';\n\nconst API_URL = routes.API_URL;\n\nconst { GET_STOCK_AND_AMT_WITH_DALAL, GET_ACCOUNT_SUMMARY } = routes;\n\nexport default class DashboardService {\n  static getStockAndAmtWithDalal(obj) {\n    const query = objectToQuerystring(obj);\n    return request('GET', `${API_URL}${GET_STOCK_AND_AMT_WITH_DALAL}${query}`, null,null , null)\n  }\n\n  static getAccountSummary(obj) {\n    const query = objectToQuerystring(obj);\n    return request('GET', `${API_URL}${GET_ACCOUNT_SUMMARY}${query}`, null,null , null)\n  }\n}","import React, { Component, Fragment } from 'react';\nimport { Modal, ModalHeader, ModalFooter, ModalBody, Button, Row, Col, Input, Form, FormGroup, Label } from 'reactstrap';\n\nimport CustomSpinner from '../components/CustomSpinner/CustomSpinner';\n\nimport OpeningBalanceService from '../services/OpeningBalanceService';\nimport Validation from '../services/Validation';\nimport ModalService from '../services/ModalService';\n\nlet isLoading = false;\n\nlet defaultControls = {\n  amount: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null\n  }\n}\nexport default class AddContact extends Component {\n\n  state = {\n    controls: JSON.parse(JSON.stringify(defaultControls)),\n    isLoading: false\n  }\n\n  constructor() {\n    super();\n  }\n\n\n  componentDidMount() {\n    const { openingBalanceData } = this.props;\n    console.log(\"openingBalanceData\", openingBalanceData);\n    if(openingBalanceData) {\n      const { controls } = this.state;\n      const { amount } = controls;\n      \n      amount.value = openingBalanceData.amount;\n      \n      this.setState({ controls });\n    }\n  }\n\n  handleInputChange = (e) => {\n    const controlName = e.target.name;\n    const controlValue = e.target.value;\n    const { controls } = this.state;\n    controls[controlName].value = controlValue;\n    controls[controlName].touched = true;\n    this.setState({ controls });\n    // this.handleValidation();\n  }\n\n  handleValidation = (firstTime, isSubmit) => {\n    let { controls, isFormValid } = this.state;\n    let { \n      amount\n    } = controls;\n\n    if(firstTime === true || amount.touched === true || isSubmit) {\n      amount = Validation.notNullValidator(amount);\n      amount.valid = !(amount.nullValue);\n      if(((isSubmit || amount.touched) && amount.valid === false)) {\n        amount.showErrorMsg = true;\n      } else {\n        amount.showErrorMsg = false;\n      }\n    }   \n\n    if(\n      amount.valid === true \n    ) {\n      isFormValid = true;\n    } else {\n      isFormValid = false;\n    }\n    console.log(\"isFormValid\",isFormValid);\n    console.log(\"controls\", controls);\n    \n    this.setState({ controls, isFormValid });\n    return isFormValid;\n  }\n\n  saveDetail = () => {\n    const { controls } = this.state;\n    const { amount } = controls;   \n\n    if(isLoading === true) {\n      return;\n    }\n    const isFormValid = this.handleValidation(false, true);\n    if(isFormValid === false) {\n      return;\n    }\n    console.log(\"controls\", controls);\n    let obj = {\n      amount: amount.value\n    }\n    this.setState({ isLoading: true });\n    isLoading = true;\n    OpeningBalanceService.addOpeningBalance(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        if(message) {\n          ModalService.openAlert('Opening Balance', message, 'success');\n        }\n        this.setState({ isLoading: false });\n        isLoading = false;\n        this.props.closeModal(true);\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        isLoading = false;\n      })\n  }\n\n  updateOpeningBalance = () => {\n    const { openingBalanceData } = this.props;\n    const { controls } = this.state;\n    const { amount } = controls;   \n    const isFormValid = this.handleValidation(false, true);\n    if(isFormValid === false) {\n      return;\n    }\n    console.log(\"controls\", controls);\n    let obj = {\n      amount: amount.value,\n      openingBalanceId: openingBalanceData.uuid\n    }\n    this.setState({ isLoading: true });\n    OpeningBalanceService.updateOpeningBalance(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        this.setState({ isLoading: false });\n        if(message) {\n          ModalService.openAlert('Opening Balance', message, 'success');\n        }\n        this.props.closeModal(true);\n        // this.getPerson();\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        const message = e.response && e.response.data && e.response.data.message ? e.response.data.message : 'Something went wrong';\n        ModalService.openAlert('Person', message, 'error');\n      })\n  }\n\n  render() {\n    const { openingBalanceData } = this.props;\n    const { controls,isLoading } = this.state;\n    const { amount } = controls;\n\n\n    return <Modal isOpen={this.props.show} toggle={this.props.closeModal} >\n      <ModalHeader toggle={this.props.closeModal}>Add Opening Balance</ModalHeader>\n      <ModalBody>\n        {isLoading && <CustomSpinner></CustomSpinner>}\n        <Form>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"amount\">Amount</Label>\n                <Input\n                  type=\"text\"\n                  id=\"amount\"\n                  name=\"amount\"\n                  value={amount.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {amount.showErrorMsg && <div className=\"error\">* Please enter amount</div>}\n\n              </FormGroup>\n            </Col>\n\n          </Row>\n          <Button onClick={openingBalanceData ? this.updateOpeningBalance: this.saveDetail}>\n            Save\n          </Button>\n        </Form>\n      </ModalBody>\n\n    </Modal>\n  }\n}","import React, { Component } from 'react';\nimport { Card, CardBody, Row, Col,Input, Table } from 'reactstrap';\nimport Ionicon from 'react-ionicons';\n\nimport Pagination from '../../components/Pagination/Pagination';\n\nimport OpeningBalanceService from '../../services/OpeningBalanceService';\nimport TransactionService from '../../services/TransactionService';\nimport DashboardService from '../../services/DashboardService';\n\nimport AddStock from '../../modal/AddStock';\nimport AddOpeningBalance from '../../modal/AddOpeningBalance';\nimport AddTransaction from '../../modal/AddTransaction';\n\nclass Dashboard extends Component {\n  state = {\n    isAddOpeningBalanceModalOpen: false,\n    isAddOpeningBalanceButtonVisible:false,\n    openingBalanceData:{},\n    selectedOpeningBalanceToUpdate: null,\n    closingBalanceData:{},\n    dalalData: [],\n    searchDalal: null,\n    pageDalal: 1,\n    pageSizeDalal: 10,\n    totalDalals:0,\n    pageAccountSummary: 1,\n    pageSizeAccountSummary: 10,\n    totalAccountSummary:0,\n    searchAccountSummary: null,\n    accountSummaryData:[],\n    isAddStockModalOpen:false,\n    isAddTransactionModalOpen: false,\n  }\n\n  componentDidMount(){\n    this.getTodayOpeningBalance();\n    this.getTodayCloseAmount();\n    this.getStockAndAmtWithDalal();\n    this.getAccountSummary();\n  }\n\n  openAddOpeningBalanceModal = (OpeningBalanceData) => {\n    this.setState({ isAddOpeningBalanceModalOpen: true, selectedOpeningBalanceToUpdate:OpeningBalanceData });\n  }\n  \n  closeAddOpeningBalanceModal = (reload) => {\n    this.setState({ isAddOpeningBalanceModalOpen: false,selectedOpeningBalanceToUpdate:null });\n    if(reload) {\n        this.getTodayOpeningBalance();\n    }\n  }\n\n  getTodayOpeningBalance = () => {\n    OpeningBalanceService.getTodayOpeningBalance()\n      .then(data=>{\n        if(data.data.data){\n          this.setState({openingBalanceData: data.data.data });\n        } else {\n          this.setState({ isAddOpeningBalanceButtonVisible:true });\n        }\n        console.error(\"data\",data);\n      })\n      .catch(e=>{\n        console.error(\"e\",e);\n      })\n  }\n\n  getTodayCloseAmount = () => {\n    TransactionService.getCloseAmountToday()\n    .then(data=>{\n      if(data.data.data){\n        this.setState({ closingBalanceData: data.data.data });\n      }\n    })\n    .catch(e=>{\n\n    })\n  }\n\n  getStockAndAmtWithDalal = () => {\n    const { pageDalal, pageSizeDalal, searchDalal }=this.state;\n    const obj={\n      page: pageDalal,\n      limit: pageSizeDalal,\n      search: searchDalal\n    }\n    DashboardService.getStockAndAmtWithDalal(obj)\n    .then(data=>{\n      if(data.data.data && data.data.data.data){\n        this.setState({ dalalData: data.data.data.data });\n      }\n      if(data.data.data && data.data.data.count){\n        this.setState({ totalDalals: data.data.data.count });\n      }\n    })\n    .catch(e=>{\n\n    })\n  }\n\n  getAccountSummary = () => {\n    const { pageAccountSummary, pageSizeAccountSummary, searchAccountSummary }=this.state;\n    const obj={\n      page: pageAccountSummary,\n      limit: pageSizeAccountSummary,\n      search: searchAccountSummary\n    }\n    DashboardService.getAccountSummary(obj)\n    .then(data=>{\n      if(data.data.data && data.data.data.data){\n        this.setState({ accountSummaryData: data.data.data.data });\n      }\n      if(data.data.data && data.data.data.count){\n        this.setState({ totalAccountSummary: data.data.data.count });\n      }\n    })\n    .catch(e=>{\n\n    })\n  }\n\n  handleSearchDalalInput = (e) => {\n    const value = e.target.value;\n    this.setState({ pageDalal:1, searchDalal: value },()=>{;\n      this.getStockAndAmtWithDalal();\n    })\n  }\n\n  handlePageChange = (page) => {\n    this.setState({ pageDalal: page },()=>{\n      this.getStockAndAmtWithDalal();\n    });\n  }\n\n  handleSearchAccountSummaryInput = (e) => {\n    const value = e.target.value;\n    this.setState({ pageAccountSummary:1, searchAccountSummary: value },()=>{;\n      this.getAccountSummary();\n    })\n  }\n\n  handleAccountSummaryPageChange = (page) => {\n    this.setState({ pageAccountSummary: page },()=>{\n      this.getAccountSummary();\n    });\n  }\n\n  openAddStockModal = (stockData) => {\n    this.setState({ isAddStockModalOpen: true, selectedStockToUpdate: stockData });\n  }\n  \n  closeAddStockModal = (reload) => {\n    console.log(\"closing modal\");\n    this.setState({ isAddStockModalOpen: false, selectedStockToUpdate: null });\n    // if(reload) {\n    //     this.getStocks(this.state.page);\n    // }\n  }\n\n  openAddTransactionModal = (contactData) => {\n    this.setState({ isAddTransactionModalOpen: true, selectedTransactionToUpdate: contactData });\n  }\n\n  closeAddTransactionModal = (reload) => {\n    console.log(\"closing modal\");\n    this.setState({ isAddTransactionModalOpen: false, selectedTransactionToUpdate: null });\n    // if(reload) {\n    //     this.getTransactions();\n    // }\n  }\n\n  \n  render(){\n    const { \n      isAddOpeningBalanceModalOpen,isAddOpeningBalanceButtonVisible,\n      openingBalanceData ={}, selectedOpeningBalanceToUpdate,\n      closingBalanceData={}, dalalData=[], searchDalal, pageDalal, pageSizeDalal, searchAccountSummary,\n      totalDalals, accountSummaryData, pageAccountSummary, pageSizeAccountSummary, totalAccountSummary,\n      isAddStockModalOpen, isAddTransactionModalOpen\n    } = this.state;\n    const { value: amount, uuid } = openingBalanceData;\n    const { total, openingBalance } = closingBalanceData;\n    return <div>\n      {\n        isAddOpeningBalanceModalOpen &&\n        <AddOpeningBalance\n          show={isAddOpeningBalanceModalOpen}\n          closeModal={this.closeAddOpeningBalanceModal}\n          openingBalanceData={selectedOpeningBalanceToUpdate}\n        >\n        </AddOpeningBalance>\n      }\n\n      {isAddStockModalOpen &&\n        <AddStock\n            show={isAddStockModalOpen}\n            closeModal={this.closeAddStockModal}\n            // stockData={selectedStockToUpdate}\n          >\n        </AddStock>\n      }\n\n      {isAddTransactionModalOpen &&\n        <AddTransaction\n            show={isAddTransactionModalOpen}\n            closeModal={this.closeAddTransactionModal}\n            // transactionData={selectedTransactionToUpdate}\n          >\n        </AddTransaction>\n      }\n       <Row>\n        <Col sm=\"3\">\n          <Card>\n            <CardBody>\n              {!isAddOpeningBalanceButtonVisible &&\n              <>\n                \n                <Row>\n                  <Col sm=\"10\">Opening Balance : {amount}</Col>\n                  <Col className=\"text-align-right\">\n                    <div onClick={this.openAddOpeningBalanceModal.bind(this,openingBalanceData)}>\n                    <Ionicon icon=\"md-create\" fontSize=\"16px\" color=\"#fdbb1f\" />\n                </div>\n                  </Col>\n                </Row>\n                <div> </div>\n              </>}\n\n              {isAddOpeningBalanceButtonVisible &&\n              <>\n                <div onClick={this.openAddOpeningBalanceModal.bind(this,null)}>Add Opening Balance</div>\n              </>}\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm=\"3\">\n          <Card>\n            <CardBody>\n              {/* <div>Opening Balance : {openingBalance}</div> */}\n              <div>Current Balance : {total}</div>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm=\"6\" className=\"text-align-right\">\n          {/* <Card>\n            <CardBody> */}\n              {/* <div>Opening Balance : {openingBalance}</div> */}\n              <button onClick={this.openAddStockModal.bind(this,null)}>Add Stock</button>&nbsp;\n              <button onClick={this.openAddTransactionModal.bind(this,null)}>Add Transaction</button>\n\n            {/* </CardBody>\n          </Card> */}\n        </Col>\n      </Row>\n      <Row>\n        <Col sm=\"6\">\n          <Card className=\"width-100 margin-top-10\">\n            <CardBody>\n            <Row>\n              <Col>\n                <h4>Dalal Data</h4>\n              </Col>\n            </Row>\n            <Row>\n              <Col sm=\"6\">\n                <Input\n                  name=\"search\"\n                  id=\"search\"\n                  type=\"text\"\n                  placeholder=\"Enter person name,phone numeber or company\"\n                  onChange={this.handleSearchDalalInput}\n                  value={searchDalal}\n                ></Input>\n              </Col>\n            </Row>\n              <Table className=\"width-100 margin-top-10\">\n                <thead>\n                  <tr>\n                    <th style={{width:'190px'}}>Name</th>\n                    <th>Stock Id</th>\n                    <th>Total Weight</th>\n                    <th>Total diamond piece</th>\n                    <th>Total diamond price</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {dalalData.map(d=><tr>\n                    <td>{d.name}</td>\n                    <td>{d.stones}</td>\n                    <td>{d.weight}</td>\n                    <td>{d.totalStones}</td>\n                    <td>{d.amount}</td>\n                  </tr>)}\n                </tbody>\n              </Table>\n              {<Pagination\n                  margin={2}\n                  page={pageDalal}\n                  pageSize={pageSizeDalal}\n                  totalRecords={totalDalals}\n                  onPageChange={this.handlePageChange}\n              ></Pagination>}\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm=\"6\">\n          <Card className=\"width-100 margin-top-10\">\n            <CardBody>\n            <Row>\n              <Col>\n                <h4>Account Summary</h4>\n              </Col>\n            </Row>\n            <Row>\n              <Col sm=\"6\">\n                <Input\n                  name=\"search\"\n                  id=\"search\"\n                  type=\"text\"\n                  placeholder=\"Enter person name,phone numeber or company\"\n                  onChange={this.handleSearchAccountSummaryInput}\n                  value={searchAccountSummary}\n                ></Input>\n              </Col>\n            </Row>\n              <Table className=\"width-100 margin-top-10\">\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Debit</th>\n                    <th>Credit</th>\n                    <th>Total</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {accountSummaryData.map(d=><tr>\n                    <td>{d.name}</td>\n                    <td>{d.debit}</td>\n                    <td>{d.credit}</td>\n                    <td>{d.total}</td>\n                  </tr>)}\n                </tbody>\n              </Table>\n              {<Pagination\n                  margin={2}\n                  page={pageAccountSummary}\n                  pageSize={pageSizeAccountSummary}\n                  totalRecords={totalAccountSummary}\n                  onPageChange={this.handleAccountSummaryPageChange}\n              ></Pagination>}\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  }\n}\n\nexport default Dashboard;","import { request, csvUploadRequest } from './request';\nimport { routes } from '../constants/constant.routes';\n\nconst API_URL = routes.API_URL;\n\nexport default class CompanyService {\n  static addCompany(contactObj) {\n    return request('POST', `${API_URL}${routes.ADD_COMPANY}`, null, contactObj, null)\n  }\n\n  static updateCompany(contactObj) {\n    return request('POST', `${API_URL}${routes.UPDATE_COMPANY}`, null, contactObj, null)\n  }\n\n  static getCompany(search, body) {\n    let qp = `?`;\n    if (search) {\n      qp += `search=${search}&`\n    }\n    return request('POST', `${API_URL}${routes.GET_COMPANIES}${qp}`, null, body, null)\n  }\n} ","import React, { Component, Fragment } from 'react';\nimport { Modal, ModalHeader, ModalFooter, ModalBody, Button, Row, Col, Input, Form, FormGroup, Label } from 'reactstrap';\n\nimport CustomSpinner from '../components/CustomSpinner/CustomSpinner';\n\nimport CompanyService from '../services/CompanyService';\nimport Validation from '../services/Validation';\nimport ModalService from '../services/ModalService';\n\nlet isLoading = false;\nconst typeDropdownOptions = [\n  {\n    key: 'Buyer',\n    value: 'buyer'\n  },\n  {\n    key: 'Seller',\n    value: 'seller'\n  },\n  {\n    key: 'Dalal',\n    value: 'dalal'\n  }\n]\nlet defaultControls = {\n  company_name: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null\n  },\n  // last_name: {\n  //   value: '',\n  //   valid: null,\n  //   touched: false,\n  //   nullValue: null\n  // },\n  phone: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n}\nexport default class AddCompany extends Component {\n\n  state = {\n    controls: JSON.parse(JSON.stringify(defaultControls)),\n    isLoading: false\n  }\n\n  constructor() {\n    super();\n  }\n\n\n  componentDidMount() {\n    const { companyData } = this.props;\n    if (companyData) {\n      const { controls } = this.state;\n      const { company_name, phone } = controls;\n\n      company_name.value = companyData.company_name;\n      phone.value = companyData.phone;\n      this.setState({ controls });\n    }\n  }\n\n  handleInputChange = (e) => {\n    const controlName = e.target.name;\n    const controlValue = e.target.value;\n    const { controls } = this.state;\n    controls[controlName].value = controlValue;\n    controls[controlName].touched = true;\n    this.setState({ controls });\n    // this.handleValidation();\n  }\n\n  handleValidation = (firstTime, isSubmit) => {\n    let { controls, isFormValid } = this.state;\n    let {\n      company_name\n    } = controls;\n\n    if (firstTime === true || company_name.touched === true || isSubmit) {\n      company_name = Validation.notNullValidator(company_name);\n      company_name.valid = !(company_name.nullValue);\n      if (((isSubmit || company_name.touched) && company_name.valid === false)) {\n        company_name.showErrorMsg = true;\n      } else {\n        company_name.showErrorMsg = false;\n      }\n    }\n\n\n\n\n    if (\n      company_name.valid === true\n    ) {\n      isFormValid = true;\n    } else {\n      isFormValid = false;\n    }\n    console.log(\"isFormValid\", isFormValid);\n    console.log(\"controls\", controls);\n    // console.log('controls', controls);\n    // console.log('isFormValid', isBusinessFormValid);\n    this.setState({ controls, isFormValid });\n    return isFormValid;\n  }\n\n  saveDetail = () => {\n    const { controls } = this.state;\n    const { company_name, phone } = controls;\n\n    if (isLoading === true) {\n      return;\n    }\n    const isFormValid = this.handleValidation(false, true);\n    if (isFormValid === false) {\n      return;\n    }\n    let obj = {\n      companyName: company_name.value,\n      phone: phone.value,\n    }\n    this.setState({ isLoading: true });\n    isLoading = true;\n    CompanyService.addCompany(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        if (message) {\n          ModalService.openAlert('Company', message, 'success');\n        }\n        this.setState({ isLoading: false });\n        isLoading = false;\n        this.props.closeModal(true);\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        isLoading = false;\n      })\n  }\n\n  updateCompany = () => {\n    const { companyData } = this.props;\n    const { controls } = this.state;\n    const { company_name, phone } = controls;\n    const isFormValid = this.handleValidation(false, true);\n    if (isFormValid === false) {\n      return;\n    }\n    console.log(\"controls\", controls);\n    let obj = {\n      companyName: company_name.value,\n      phone: phone.value,\n      companyId: companyData.uuid\n    }\n    this.setState({ isLoading: true });\n    CompanyService.updateCompany(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        this.setState({ isLoading: false });\n        if (message) {\n          ModalService.openAlert('Company', message, 'success');\n        }\n        this.props.closeModal(true);\n        // this.getPerson();\n        // this.resetControls();\n      })\n      .catch(e => {\n        console.log(\"e\", e);\n        this.setState({ isLoading: false });\n        const message = e.response && e.response.data && e.response.data.message ? e.response.data.message : 'Something went wrong';\n        ModalService.openAlert('Person', message, 'error');\n      })\n  }\n\n  render() {\n    const { companyData } = this.props;\n    const { controls, isLoading } = this.state;\n    const { company_name, phone } = controls;\n\n\n    return <Modal isOpen={this.props.show} toggle={this.props.closeModal} >\n      <ModalHeader toggle={this.props.closeModal}>{companyData ? 'Update' : 'Add'} Company</ModalHeader>\n      <ModalBody>\n        {isLoading && <CustomSpinner></CustomSpinner>}\n        <Form>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"company_name\">Company Name</Label>\n                <Input\n                  type=\"text\"\n                  id=\"company_name\"\n                  name=\"company_name\"\n                  value={company_name.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {company_name.showErrorMsg && <div className=\"error\">* Please enter name</div>}\n\n              </FormGroup>\n            </Col>\n\n          </Row>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"phone\">Phone</Label>\n                <Input\n                  type=\"number\"\n                  id=\"phone\"\n                  name=\"phone\"\n                  value={phone.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {phone.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n              </FormGroup>\n            </Col>\n\n          </Row>\n          <Button onClick={companyData ? this.updateCompany : this.saveDetail}>\n            Save\n          </Button>\n        </Form>\n      </ModalBody>\n\n    </Modal>\n  }\n}","import React, { Component } from 'react';\nimport { Row, Col, Card, CardBody, Table, Input } from 'reactstrap';\nimport Ionicon from 'react-ionicons';\nimport { connect } from 'react-redux';\nimport CompanyService from '../../services/CompanyService';\n\nimport AddCompany from '../../modal/AddCompany';\nimport { updateCompanyDetail } from '../../actions/header-action';\nimport './Company.css';\nimport StorageService from '../../services/StorageService';\n\nclass Company extends Component {\n    state = {\n        companies: [],\n        selectedCompanyToUpdate: null,\n        isAddCompanyModalOpen: false,\n        page: 1,\n        totalRecords: 0,\n        search: null\n    }\n\n    componentDidMount() {\n        StorageService.removeCompanyDetail();\n        this.props.updateCompanyDetail(null)\n        this.getCompanies();\n    }\n\n    getCompanies = (search) => {\n        CompanyService.getCompany(search)\n            .then(data => {\n                console.log(data.data);\n                const companies = data.data.data.companies;\n                this.setState({ companies });\n            })\n            .catch(e => {\n\n            })\n    }\n\n    openAddCompanyModal = (companyData) => {\n        this.setState({ isAddCompanyModalOpen: true, selectedCompanyToUpdate: companyData });\n    }\n\n    closeAddCompanyModal = () => {\n        this.setState({ isAddCompanyModalOpen: false, selectedCompanyToUpdate: null });\n        this.getCompanies();\n    }\n\n    handleSearchInput = (e) => {\n        const value = e.target.value;\n        this.setState({ search: value });\n        this.searchCompanyData(value);\n    }\n\n    searchCompanyData = (search) => {\n        this.getCompanies(search);\n    }\n\n    openCompany = (companyData) => {\n        StorageService.setCompanyDetail(companyData);\n        this.props.updateCompanyDetail(companyData);\n        this.props.history.push(\"/home\");\n    }\n\n    render() {\n        const { companies, selectedCompanyToUpdate, isAddCompanyModalOpen, search } = this.state;\n        const prepareRows = companies.map(c => <tr>\n            <td>{c.company_name}</td>\n            <td>\n                <div>{c.phone}</div>\n            </td>\n            <td>\n                <span onClick={this.openAddCompanyModal.bind(this, c)}>\n                    <Ionicon icon=\"md-create\" fontSize=\"16px\" color=\"#fdbb1f\" />\n                </span>&nbsp;\n                <span onClick={this.openCompany.bind(this, c)} style={{cursor:'pointer'}}>\n                    Go to Company\n                </span>&nbsp;\n            </td>\n        </tr>)\n        return (\n            <div id=\"contact\">\n                {isAddCompanyModalOpen &&\n                    <AddCompany\n                        show={isAddCompanyModalOpen}\n                        closeModal={this.closeAddCompanyModal}\n                        companyData={selectedCompanyToUpdate}>\n                    </AddCompany>}\n                <Row>\n                    <Col xl=\"3\"></Col>\n                    <Col xl=\"6\">\n                        <Card>\n                            <CardBody>\n                                <Row>\n                                    <Col sm=\"6\">\n                                        <Input\n                                            name=\"search\"\n                                            id=\"search\"\n                                            type=\"text\"\n                                            placeholder=\"Enter company name\"\n                                            onChange={this.handleSearchInput}\n                                            value={search}\n                                        ></Input>\n                                    </Col>\n                                    <Col className=\"text-align-right\">\n                                        <span className=\"download-link\" onClick={this.openAddCompanyModal.bind(this, null)}>Add Company</span>&nbsp;&nbsp;\n                                    </Col>\n\n                                </Row>\n\n                                <Table className=\"width-100 margin-top-10\">\n                                    <thead>\n                                        <tr>\n                                            <th>Company Name</th>\n                                            <th>Phone</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {prepareRows}\n                                    </tbody>\n                                </Table>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col xl=\"3\"></Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n}\n\nexport default connect(null, { updateCompanyDetail })(Company);\n","// import { Home, About, Login, Logout, Users, Product, ForgotPassword, Exchanges, PaymentHistory } from '../containers';\n// import Loadable from 'react-loadable';\n// import { connect } from 'react-redux';\n\nimport Login from '../pages/Login/Login';\nimport Logout from '../pages/Logout/Logout';\nimport Contact from '../pages/Contact/Contact';\nimport Stocks from '../pages/Stocks/Stocks';\nimport Transactions from '../pages/Transactions/Transactions';\nimport Dashboard from '../pages/Dashboard/Dashboard';\nimport Company from '../pages/Company/Company';\n// Lazy loading sample code\n// const Home = Loadable({\n//   loader: () => import(/* webpackChunkName: \"home\" */ '../containers/Home'),\n//   loading: () => <div>Loading...</div>,\n// });\n\n\nexport const publicRouteObj = [\n  {\n    exact: true,\n    path: '/',\n    component: Login,\n    key: 'Login',\n  },\n  {\n    exact: true,\n    path: '/logout',\n    component: Logout,\n    key: 'Logout',\n  },\n];\n\nexport const privateRouteObj = [\n  {\n    exact: true,\n    path: '/contact',\n    component: Contact,\n    key: 'contact',\n  },\n  {\n    exact: true,\n    path: '/company',\n    component: Company,\n    key: 'company',\n  },\n  {\n    exact: true,\n    path: '/stocks',\n    component: Stocks,\n    key: 'Stocks',\n  },\n  {\n    exact: true,\n    path: '/transactions',\n    component: Transactions,\n    key: 'Transactions',\n  },\n  {\n    exact: true,\n    path: '/dashboard',\n    component: Dashboard,\n    key: 'Dashboard',\n  }\n];\n\n// class RouterConfig extends Component {\n\n//   componentWillReceiveProps(nextProps) {\n//     console.log(\"Router config\", nextProps);\n//   }\n\n//   render() {\n//     return (\n//       <div>\n\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => ({\n//   route: state.route\n// })\n\n// export default connect(mapStateToProps, null)(RouterConfig);\n// export default RouterConfig;","import React, { Component } from 'react';\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\n// import { connect } from 'react-redux';\n\nimport PrivateRoute from '../components/PrivateRoutes';\nimport { publicRouteObj, privateRouteObj } from './router-config';\n// import PrivateRoute from '../component/private-route/PrivateRoute';\n\n\nlet privateRoutes = privateRouteObj;\n\nclass Routes extends Component {\n\n    componentWillReceiveProps(nextProps) {\n        console.log(\"Router config\", nextProps);\n        // privateRoutes = privateRouteObj.filter(route => {\n        //     return true;\n        // })\n    }\n\n    render() {\n        const publicRoutesObj = publicRouteObj.map(route => (\n            <Route key={route.key} exact={route.exact} path={route.path} component={route.component} />\n        ));\n\n        const privateRoutesObj = privateRoutes.map(route => (\n            <PrivateRoute\n                key={route.key}\n                exact={route.exact}\n                path={route.path}\n                component={route.component}\n            />\n        ));\n        return (\n            <Switch>\n                {publicRoutesObj}\n                {privateRoutesObj}\n                {/* if user enter wrong path redirect to home page */}\n                <Redirect from=\"*\" to=\"/\" />\n            </Switch>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    route: state.routeReducer\n})\n\n// export default connect(mapStateToProps, null)(Routes);\n// export default (withRouter(Routes));\nexport default Routes;\n","import React, { Fragment, Component } from 'react';\nimport { HashRouter as Router, NavLink } from 'react-router-dom';\nimport { Row, Col } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport Routes from './router/routes';\nimport { updateCompanyDetail } from './actions/header-action';\nimport StorageService from './services/StorageService';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    updateHeader: 'login',\n    companyDetail: null\n  }\n\n  componentDidMount() {\n    const companyDetail = StorageService.getCompanyDetail();\n    this.props.updateCompanyDetail(companyDetail);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(\"header props\", nextProps);\n    const headerReducer = nextProps.headerReducer;\n    const updateHeader = headerReducer && headerReducer.header ? headerReducer.header : 'login';\n    const companyDetail = headerReducer && headerReducer.companyDetail ? headerReducer.companyDetail : null;\n    this.setState({ updateHeader: updateHeader, companyDetail });\n  }\n\n  logoutFromCompany = () => {\n    StorageService.removeCompanyDetail();\n    this.props.updateCompanyDetail(null);\n  }\n\n  render() {\n    const { updateHeader, companyDetail } = this.state;\n    console.log(\"updateHeader\", updateHeader);\n    console.log(\"companyDetail\", companyDetail);\n    const token = StorageService.getToken();\n    return (\n      <div>\n        <Router>\n\n          {/* <header className=\"App-header\">\n        </header> */}\n          <header style={{ height: '50px' }}>\n            <Row>\n              <Col sm=\"4\" style={{ lineHeight: '67px' }}>\n                <span style={{ fontWeight: 'bold', fontSize: '20px', paddingLeft: '20px' }}>AV&Co.</span>\n                {companyDetail && <span\n                  style={{ fontSize: '20px', paddingLeft: '20px', cursor: 'pointer' }}\n                  onClick={this.logoutFromCompany}\n                >\n                  Logout From {companyDetail.company_name}\n                </span>}\n              </Col>\n              {token && <Fragment>\n                <Col sm=\"6\" className=\"text-align-right\">\n                  {companyDetail && <>\n                    <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/dashboard\">Dashboard</NavLink>\n                    <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/contact\">Contact</NavLink>\n                    <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/stocks\">Stock</NavLink>\n                    <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/transactions\">Transactions</NavLink>\n                  </>}\n                </Col>\n                <Col sm=\"2\" className=\"text-align-right\">\n                  <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/logout\">Logout</NavLink>\n\n                </Col>\n              </Fragment>}\n            </Row>\n          </header>\n          <hr />\n\n          <Routes />\n        </Router>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  headerReducer: state.headerReducer\n})\nexport default connect(mapStateToProps, { updateCompanyDetail })(App);\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if(process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if(publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if(isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if(installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if(installingWorker.state === 'installed') {\n            if(navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if(config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if(config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if(\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { UPDATE_HEADER_MENUS, UPDATE_COMAPANY_DETAIL } from '../constants/action-type';\n\nconst initialState = {\n    header: null,\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_HEADER_MENUS:\n            return {\n                ...state,\n                header: action.payload,\n            };\n\n        case UPDATE_COMAPANY_DETAIL:\n            return {\n                ...state,\n                companyDetail: action.payload,\n            };\n\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from \"redux\";\nimport headerReducer from \"./header-reducer\";\n\nexport default combineReducers({\n    headerReducer: headerReducer,\n})","import { createStore, applyMiddleware,compose } from \"redux\";\nimport reducer from \"./reducer\"\nimport thunk from \"redux-thunk\";\n\nconst initialState = {};\n\n// create custom middle ware for thunk\nconst customMiddleWare = store => next => action => {\n    console.log(\"Middleware triggered:\", action);\n    next(action);\n}\n\nconst middleware = [thunk,customMiddleWare];\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeEnhancers(\n        applyMiddleware(...middleware)\n        // ,\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect, Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';    \nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport store from './store';\n\nReactDOM.render(\n  // Provider is root component for app because of redux\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}