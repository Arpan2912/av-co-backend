{"version":3,"sources":["constants/constant.routes.js","logo.svg","services/StorageService.js","services/request.js","services/AuthService.js","components/PrivateRoutes.jsx","services/Validation.js","actions/header-action.js","constants/action-type.js","pages/Login/Login.js","pages/Logout/Logout.js","components/Pagination/Pagination.jsx","services/ContactService.js","components/CustomSpinner/CustomSpinner.js","services/ModalService.js","modal/AddContact.js","modal/UploadContactModal.js","utils.js","pages/Contact/Contact.js","services/StockService.js","components/SearchContact/SearchContact.js","modal/AddStock.js","pages/Stocks/Stocks.js","services/TransactionService.js","modal/AddTransaction.js","pages/Transactions/Transactions.js","services/OpeningBalanceService.js","services/DashboardService.js","modal/AddOpeningBalance.js","pages/Dashboard/Dashboard.js","router/router-config.js","router/routes.jsx","App.js","serviceWorker.js","reducer/header-reducer.js","reducer/index.js","store.js","index.js"],"names":["module","exports","routes","API_URL","SIGNIN","SIGNUP","ADD_CONTACT","UPDATE_CONTACT","GET_CONTACTS","UPLOAD_EXCEL","ADD_STOCK","UPDATE_STOCK","GET_STOCKS","DELETE_STOCKS","ADD_TRANSACTION","UPDATE_TRANSACTION","GET_TRANSACTIONS","GET_CLOSE_AMOUNT_TODAY","ADD_OPENING_BALANCE","UPDATE_OPENING_BALANCE","GET_TODAY_OPENING_BALANCE","GET_STOCK_AND_AMT_WITH_DALAL","GET_ACCOUNT_SUMMARY","StorageService","token","localStorage","setItem","getItem","removeItem","detail","user","JSON","stringify","parse","request","method","url","params","body","headers","Storage","getToken","Authorization","options","data","formData","FormData","keys","Object","i","length","append","qs","axios","AuthService","userObj","PrivateRoutes","Component","component","rest","isAuthenticated","render","props","to","pathname","Validation","email","match","error","errorMsg","control","value","invalidEmail","number","trim","test","undefined","nullValue","invalidPhone","updateHeaderMenus","payload","dispatch","console","log","type","Promise","resolve","Login","state","controls","phone","valid","touched","password","handleInputChange","e","controlName","target","name","controlValue","setState","handleValidation","firstTime","isSubmit","isFormValid","notNullValidator","showErrorMsg","login","obj","signin","then","userType","setUserDetail","setToken","history","push","catch","this","id","Row","Col","xl","Card","CardBody","Form","FormGroup","Label","for","Input","onChange","className","Button","onClick","sm","connect","Logout","logout","removeToken","Pagination","findPageRange","currentPage","pageSize","startPage","endPage","totalRecords","margin","page","count","Math","ceil","onPageChange","bind","goFirstPage","goLastPage","goPrevPage","goNextPage","newProps","event","index","Array","prototype","indexOf","call","parentNode","children","pages","range","firstPage","role","lastPage","prevPage","icon","fontSize","color","nextPage","key","classnames","active","style","lineHeight","ContactService","contactObj","search","isDownload","qp","file","post","csvUploadRequest","CustomSpinner","Spinner","ModalService","title","msg","suceess","swal","text","dangerMode","button","visible","closeModal","isLoading","typeDropdownOptions","defaultControls","invalidPassword","mobile1","mobile2","city","address","company","AddContact","saveDetail","addContact","message","openAlert","updateContact","contactData","contactId","uuid","response","Modal","isOpen","show","toggle","ModalHeader","ModalBody","map","t","UploadContactModal","errorMessage","uploadFile","uploadExcel","onDropFile","acceptedFiles","right","position","onDrop","getRootProps","getInputProps","height","border","marginBottom","textAlign","width","backgroundColor","monthObj","1","2","3","4","5","6","7","8","9","10","11","12","formatDate","date","day","Date","getDate","month","getMonth","year","getFullYear","toString","slice","getYearString","downlodFile","link","document","createElement","href","setAttribute","appendChild","click","removeChild","objectToQuerystring","reduce","str","delimiter","val","encodeURIComponent","join","Contact","contacts","downloadExcelFields","selectedContactToUpdate","isAddContactModalOpen","isUploadContactModalOpen","downloadCheckbox","required","getContacts","openAddContactModal","closeAddContactModal","reload","openTransactions","openUploadContactModal","closeUploadContactModal","handlePageChange","handleSearchInput","searchContactData","downloadExcel","prepareRows","c","placeholder","Table","StockService","status","SearchContact","personName","showPersonList","person","handleClickOutside","forwardedRef","current","contains","handlePersonSearchChange","openPersonToggle","onSelectPerson","contact","getSelectedPersonControl","contactIndex","findIndex","personProp","addEventListener","removeEventListener","ref","autoComplete","onFocus","React","forwardRef","statusDropDownOptions","stockId","weight","buyDate","buyPrice","sellDate","sellPrice","buyPersonId","sellPersonId","AddStock","handleDateChange","dateControl","getSelectedBuyPersonControl","personControl","getSelectedSellPersonControl","buyDateVar","sellDateVar","setHours","toISOString","addStock","updateStock","stockData","buyPersonIdContainer","createRef","sellPersonIdContainer","stock_id","buy_date","buy_price","buy_person_id","sell_date","sell_price","sell_person_id","s","open","preventDefault","InputGroup","selected","showMonthDropdown","r","dateFormat","showYearDropdown","placeholderText","shouldCloseOnSelect","dropdownMode","Stocks","stocks","selectedStockToUpdate","isAddStockModalOpen","selectedStatus","stateValue","getStocks","openAddStockModal","closeAddStockModal","deleteStock","handledownloadCheckboxInput","checkBoxValue","valueIndex","splice","buy_person_name","sell_person_name","TransactionService","personId","mode","transactionDate","note","amount","AddTransaction","isEdit","transactionData","transactionDateVar","updateTransaction","addTransaction","container","transaction_date","credit","debit","person_id","personUuid","Transactions","transactions","selectedTransactionToUpdate","isAddTransactionModalOpen","getTransactions","location","transaction","openAddTransactionModal","closeAddTransactionModal","OpeningBalanceService","DashboardService","query","addOpeningBalance","updateOpeningBalance","openingBalanceData","openingBalanceId","Dashboard","isAddOpeningBalanceModalOpen","isAddOpeningBalanceButtonVisible","selectedOpeningBalanceToUpdate","closingBalanceData","dalalData","searchDalal","pageDalal","pageSizeDalal","totalDalals","pageAccountSummary","pageSizeAccountSummary","totalAccountSummary","searchAccountSummary","accountSummaryData","openAddOpeningBalanceModal","OpeningBalanceData","closeAddOpeningBalanceModal","getTodayOpeningBalance","getTodayCloseAmount","getCloseAmountToday","getStockAndAmtWithDalal","limit","getAccountSummary","handleSearchDalalInput","handleSearchAccountSummaryInput","handleAccountSummaryPageChange","total","openingBalance","d","stones","totalStones","publicRouteObj","exact","path","privateRoutes","Routes","nextProps","publicRoutesObj","route","privateRoutesObj","from","App","updateHeader","headerReducer","header","fontWeight","paddingLeft","activeClassName","Boolean","window","hostname","initialState","combineReducers","action","middleware","thunk","store","next","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducer","applyMiddleware","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf8c5ff4.chunk.js","sourcesContent":["module.exports = {\n  routes: {\n    API_URL:'http://localhost:3002/',\n\n    SIGNIN: 'auth/signin',\n    SIGNUP: 'auth/signup',\n\n    ADD_CONTACT: 'contact/add-contact',\n    UPDATE_CONTACT: 'contact/update-contact',\n    GET_CONTACTS: 'contact/get-contacts',\n    UPLOAD_EXCEL:'contact/upload-excel',\n\n    ADD_STOCK: 'stock/add-stock',\n    UPDATE_STOCK: 'stock/update-stock',\n    GET_STOCKS: 'stock/get-stocks',\n    DELETE_STOCKS: 'stock/delete-stock',\n    \n    ADD_TRANSACTION: 'transaction/add-transaction',\n    UPDATE_TRANSACTION: 'transaction/update-transaction',\n    GET_TRANSACTIONS: 'transaction/get-transactions',\n    GET_CLOSE_AMOUNT_TODAY: 'transaction/get-close-amount-today',\n\n    ADD_OPENING_BALANCE: 'opening-balance/add-opening-balance',\n    UPDATE_OPENING_BALANCE: 'opening-balance/update-opening-balance',\n    GET_TODAY_OPENING_BALANCE: 'opening-balance/get-today-opening-balance',\n\n    GET_STOCK_AND_AMT_WITH_DALAL: 'dashboard/get-stock-and-amount-with-dalal',\n    GET_ACCOUNT_SUMMARY:'dashboard/get-account-summary'\n  }\n}","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default class StorageService {\n  static setToken(token) {\n    localStorage.setItem(\"token\", token);\n  }\n\n  static getToken() {\n    return localStorage.getItem(\"token\");\n  }\n\n  static removeToken() {\n    return localStorage.removeItem(\"token\");\n  }\n\n  static setUserDetail(detail) {\n    const user = JSON.stringify(detail);\n    localStorage.setItem(\"user\", user);\n  }\n\n  static getUserDetail() {\n    const user = localStorage.getItem(\"user\");\n    return JSON.parse(user);\n  }\n\n  static removeUserDetail() {\n    return localStorage.removeItem(\"user\");\n  }\n}\n\n\n","import axios from 'axios';\nimport qs from 'qs';\nimport Storage from './StorageService';\n/**\n * request interceptors\n * @param {String} method GET,PUT,POST,DELETE\n * @param {String} url req url\n * @param {Object} params query parameters\n * @param {Object} body req body\n * @param {Object} headers req headers\n */\nexport const request = (method, url, params, body = {}, headers = {}) => {\n  headers = headers || {};\n  params = params || {};\n  body = body || {};\n  if (!headers['content-type']) {\n    headers['content-type'] = 'application/json';\n  }\n  if (!(url === 'signin' || url === 'signup' || url === 'forgot-password')) {\n    const token = Storage.getToken();\n    headers.Authorization = `Bearer ${token}`;\n    // headers.Authorization = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1X3V1aWQiOiJkNjhiYjU3Zi0zOGY0LTQxOGUtYmIzNy0yMzJmOGQzMDg3MDciLCJmaXJzdF9uYW1lIjoibmlrdW5qIiwibGFzdF9uYW1lIjoiUHJhIiwiZW1haWwiOiJuaWt1bmpAbWFpbGluYXRvci5jb20iLCJmYklkIjpudWxsLCJpZCI6NCwidXNlclR5cGUiOjIsImlhdCI6MTUzMTg5NjMzNH0.g2cvqz_CeBWfaBkAwQwe5B-wy-iM2QlTruF27APva6Q';\n  }\n  const options = {\n    method,\n    headers,\n    params,\n    url,\n  };\n\n  if ((method === 'POST' || method === 'PUT') && headers['content-type'] === 'application/x-www-form-urlencoded') {\n    options.data = qs.stringify(body);\n  } else if ((method === 'POST' || method === 'PUT') && headers['content-type'] === 'multipart/form-data') {\n    headers['content-type'] = 'multipart/form-data';\n\n    // prepate multipart formdata body \n    const formData = new FormData();\n    const keys = Object.keys(body);\n    for (let i = 0; i < keys.length; i++) {\n      formData.append(keys[i], body[keys[i]]);\n    }\n    options.data = formData;\n    // options.data = qs.stringify(body);\n  } else if ((method === 'POST' || method === 'PUT')) {\n    options.data = body;\n  }\n\n  return axios(options);\n};\n\n\nexport const csvUploadRequest = (url, file) => {\n  let formData = new FormData();\n  formData.append('csv', file, file.name);\n  return axios.post(url, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n      'Authorization': `Bearer ${Storage.getToken()}`\n    }\n  })\n}\n","import { request } from './request';\nimport { routes } from '../constants/constant.routes';\nconst API_URL = routes.API_URL;\n\nexport default class AuthService {\n  static signin(userObj) {\n    return request('POST', `${API_URL}${routes.SIGNIN}`, null, userObj, null)\n  }\n} ","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types'; // or PropTypes = require('prop-types');\nimport AuthService from '../services/AuthService';\nimport StorageService from '../services/StorageService';\n/**\n * private route component to prevent unauthorize access\n */\nconst PrivateRoutes = ({ component: Component, ...rest }) => {\n  const token = StorageService.getToken();\n  let isAuthenticated = false;\n  if (token) {\n    isAuthenticated = true\n  } else {\n    isAuthenticated = false\n\n  }\n\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        // if user is authenticated successfully then redirect to component or\n        // redirect to login page\n        (\n          isAuthenticated === true\n            ? <Component {...props} />\n            : <Redirect to={{\n              pathname: '/',\n            }}\n            />\n        )\n\n      }\n    />\n  );\n};\n\nPrivateRoutes.propTypes = {\n  component: PropTypes.any.isRequired,\n};\n\nexport default PrivateRoutes;\n","export default class Validation {\n  static emailValidator1(email) {\n    const pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (email) {\n      if (email.match(pattern)) {\n        return null;\n      }\n      return { error: true, errorMsg: 'Email is not valid' };\n    }\n    return { error: true, errorMsg: 'Email is not valid' };\n    // return resolve(null);\n  }\n\n  static emailValidator(control) {\n    const pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (control.value === null || control.value === '') {\n      control.invalidEmail = false;\n      return control;\n    }\n    if (control.value) {\n      if (control.value.match(pattern)) {\n        control.invalidEmail = false;\n        return control;\n      }\n      control.invalidEmail = true;\n      return control;\n    }\n    control.invalidEmail = true;\n    return control;\n    // return resolve(null);\n  }\n\n\n  /**\n     * @description password validator\n     * @param control\n     */\n  static numberValidatior(number) {\n    const pattern = /(^[0-9]+\\.([0-9])+|^[0-9]+)$/;\n    if (number) {\n      const number1 = number ? number.trim() : '';\n      if (number1.length === 0) {\n        return { error: true, errorMsg: 'Value should not be empty' };\n      } else if (number === 0) {\n        return { error: true, errorMsg: 'Value should not 0' };\n      } else if (!pattern.test(number)) {\n        return { error: true, errorMsg: 'Value you entered is incorrect' };\n      }\n      return null;\n    }\n    return { error: true, errorMsg: 'Value should not be empty' };\n\n  }\n\n  static notNullValidator(control) {\n    if (control.value === null || control.value === '' || control.value === undefined) {\n      control.nullValue = true;\n      return control;\n    } else {\n      control.nullValue = false;\n      return control;\n    }\n  }\n\n  static validatePhoneNumber(control) {\n    const regex = /^[0-9]*$/;\n    const value = control.value;\n    if (!(value === null || value === '')) {\n      if (value.length !== 10) {\n        control.invalidPhone = true;\n        return control;\n      }\n      if (!value.match(regex)) {\n        control.invalidPhone = true;\n      } else {\n        control.invalidPhone = null;\n      }\n    } else {\n      control.invalidPhone = null;\n    }\n    return control;\n  }\n}\n","import {\n    UPDATE_HEADER_MENUS\n} from \"../constants/action-type\";\n\nexport const updateHeaderMenus = (payload) => dispatch => {\n    console.log(\"fetch posts\");\n    dispatch({\n        type: UPDATE_HEADER_MENUS,\n        payload: payload,\n\n    });\n    return Promise.resolve();\n}","export const UPDATE_HEADER_MENUS = 'UPDATE_HEADER_MENUS';\n\n\n\n","import React, { Component } from 'react';\nimport { Row, Col, Card, CardBody, Table, Form, FormGroup, Label, Input, Button } from 'reactstrap';\nimport { connect } from 'react-redux';\n\nimport AuthService from '../../services/AuthService';\nimport StorageService from '../../services/StorageService';\nimport Validation from '../../services/Validation';\nimport { updateHeaderMenus } from '../../actions/header-action';\nimport './Login.css';\n\n\n\nclass Login extends Component {\n    state = {\n        controls: {\n            phone: {\n                value: '',\n                valid: null,\n                touched: false,\n                nullValue: null\n            },\n            password: {\n                value: '',\n                valid: null,\n                touched: false,\n                nullValue: null\n            }\n        }\n    }\n\n    componentDidMount() {\n        const token = StorageService.getToken();\n        if (token) {\n            this.props.history.push(\"/contact\");\n        }\n        // this.getPerson();\n    }\n\n    handleInputChange = (e) => {\n        const controlName = e.target.name;\n        const controlValue = e.target.value;\n        const { controls } = this.state;\n        controls[controlName].value = controlValue;\n        controls[controlName].touched = true;\n        this.setState({ controls });\n        // this.handleValidation();\n    }\n\n\n\n    handleValidation = (firstTime, isSubmit) => {\n        let { controls, isFormValid } = this.state;\n        let {\n            phone, password\n        } = controls;\n\n        if (firstTime === true || phone.touched === true || isSubmit) {\n            phone = Validation.notNullValidator(phone);\n            phone.valid = !(phone.nullValue);\n            if (((isSubmit || phone.touched) && phone.valid === false)) {\n                phone.showErrorMsg = true;\n            } else {\n                phone.showErrorMsg = false;\n            }\n        }\n\n        if (firstTime === true || password.touched === true || isSubmit) {\n            password = Validation.notNullValidator(password);\n            password.valid = !(password.nullValue);\n            if (((isSubmit || password.touched) && password.valid === false)) {\n                password.showErrorMsg = true;\n            } else {\n                password.showErrorMsg = false;\n            }\n        }\n\n        if (\n            phone.valid === true &&\n            password.valid === true\n        ) {\n            isFormValid = true;\n        } else {\n            isFormValid = false;\n        }\n\n        console.log(\"controls\", controls);\n        // console.log('controls', controls);\n        // console.log('isFormValid', isBusinessFormValid);\n        this.setState({ controls, isFormValid });\n        return isFormValid;\n    }\n\n\n\n    login = () => {\n        const { controls } = this.state;\n        const { phone, password } = controls;\n        const isFormValid = this.handleValidation(false, true);\n        if (isFormValid === false) {\n            return;\n        }\n        let obj = {\n            phone: phone.value,\n            password: password.value\n        }\n        AuthService.signin(obj)\n            .then(data => {\n                const token = data.data.data.token;\n                const userObj = {\n                    type: data.data.data.userType\n                }\n                StorageService.setUserDetail(userObj);\n                StorageService.setToken(token);\n                this.props.updateHeaderMenus(\"login\");\n                this.props.history.push(\"/home\");\n                //         this.getPerson();\n                //         this.resetControls();\n            })\n            .catch(e => {\n\n            })\n    }\n\n\n\n\n\n    render() {\n        const { controls } = this.state;\n        const { password, phone } = controls;\n\n        return (\n            <div id=\"login\">\n                <Row>\n                    <Col xl=\"5\">\n                        <Card>\n                            <CardBody>\n                                <Form>\n                                    <FormGroup>\n                                        <Label for=\"phone\">Phone Number</Label>\n                                        <Input\n                                            type=\"text\"\n                                            id=\"phone\"\n                                            name=\"phone\"\n                                            value={phone.value}\n                                            onChange={this.handleInputChange}\n                                        ></Input>\n                                        {phone.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Label for=\"password\">Password</Label>\n                                        <Input\n                                            type=\"password\"\n                                            id=\"password\"\n                                            name=\"password\"\n                                            value={password.value}\n                                            onChange={this.handleInputChange}\n                                        ></Input>\n                                        {password.showErrorMsg && <div className=\"error\">* Please enter password</div>}\n\n                                    </FormGroup>\n                                    <Button onClick={this.login}>Login</Button>\n                                </Form>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col sm=\"1\"></Col>\n                </Row>\n\n            </div>\n        );\n    }\n}\n\nexport default connect(null, { updateHeaderMenus })(Login);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n\nimport { updateHeaderMenus } from '../../actions/header-action';\nimport StorageService from '../../services/StorageService';\n\nimport './Logout.css';\n\n\n\nclass Logout extends Component {\n    state = {\n\n    }\n\n    componentDidMount() {\n        this.logout();\n        // this.getPerson();\n    }\n\n    logout = () => {\n        StorageService.removeToken();\n        this.props.updateHeaderMenus(\"logout\");\n        this.props.history.push(\"/\");\n    }\n\n    render() {\n\n        return (\n            <div id=\"login\">\n\n\n            </div>\n        );\n    }\n}\n\nexport default connect(null, { updateHeaderMenus })(Logout);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'; // or PropTypes = require('prop-types');\nimport classnames from 'classnames';\nimport Ionicon from 'react-ionicons';\n\nimport './Pagination.css';\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n\n    const { margin, page,totalRecords, pageSize } = props;\n    const count = Math.ceil(totalRecords / pageSize);\n    const startPage = page > margin ? page - margin : 1;\n    const endPage = page + margin > count ? count : page + margin;\n    this.state = {\n      startPage,\n      endPage,\n      count,\n    };\n\n\n    this.onPageChange = this.onPageChange.bind(this);\n    this.goFirstPage = this.goFirstPage.bind(this);\n    this.goLastPage = this.goLastPage.bind(this);\n    this.goPrevPage = this.goPrevPage.bind(this);\n    this.goNextPage = this.goNextPage.bind(this);\n  }\n\n  componentWillReceiveProps(newProps) {\n    console.log(\"newProps\", newProps);\n    if (newProps === this.props) return;\n    const { margin, page, totalRecords, pageSize } = newProps;\n    const count = Math.ceil(totalRecords / pageSize);\n    console.log(\"count\", count);\n    const startPage = page > margin ? page - margin : 1;\n    const endPage = page + margin > count ? count : page + margin;\n    this.setState({ startPage, endPage, count });\n  }\n\n  onPageChange(event) {\n    const index =\n      Array.prototype.indexOf.call(event.target.parentNode.children, event.target);\n    this.props.onPageChange(index + this.state.startPage);\n  }\n\n  goFirstPage() {\n    this.props.onPageChange(1);\n  }\n\n  goLastPage() {\n    this.props.onPageChange(this.state.count);\n  }\n\n  goPrevPage() {\n    this.props.onPageChange(this.props.page - 1);\n  }\n\n  goNextPage() {\n    this.props.onPageChange(this.props.page + 1);\n  }\n\n  findPageRange = (currentPage) => {\n    const { pageSize = 10 } = this.props;\n    let startPage = ((currentPage - 1) * pageSize) + 1;\n    let endPage = currentPage * pageSize;\n    if (endPage > this.props.totalRecords) {\n      let remainCounts = this.props.totalRecords % pageSize;\n      endPage = ((currentPage - 1) * pageSize) + remainCounts;\n    }\n    let range = `${startPage}-${endPage}`\n    return range;\n  }\n\n  render() {\n    const { startPage, endPage, count } = this.state;\n    console.log(\"count\", count);\n    const { page, margin } = this.props;\n    const pages = [];\n    const range = this.findPageRange(this.props.page);\n    const firstPage = page - margin > 1 ?\n      (\n        <div\n          className=\"pagination-button pagination-go-first\"\n          onClick={this.goFirstPage}\n          role=\"presentation\"\n        >1\n        </div>\n      ) :\n      null;\n\n    const lastPage = page + margin < count ?\n      (\n        <div\n          className=\"pagination-button pagination-go-last\"\n          onClick={this.goLastPage}\n          role=\"presentation\"\n        >{count}\n        </div>\n      ) :\n      null;\n\n    const prevPage = page === 1 ? null :\n      (\n        <div\n          className=\"pagination-button\"\n          onClick={this.goPrevPage}\n          role=\"presentation\"\n        >\n          <Ionicon icon=\"ios-arrow-back\" fontSize=\"24px\" color=\"#757575\" />\n        </div>\n      );\n\n    const nextPage = page === count ? null :\n      (\n        <div\n          className=\"pagination-button\"\n          onClick={this.goNextPage}\n          role=\"presentation\"\n        >\n          <Ionicon icon=\"ios-arrow-forward\" fontSize=\"24px\" color=\"#757575\" />\n        </div>\n      );\n\n    if (endPage !== 1) {\n      for (let i = startPage; i <= endPage; i++) {\n        pages.push(<li\n          key={i}\n          onClick={this.onPageChange}\n          role=\"presentation\"\n          className={classnames('pagination-list-item', 'pagination-button', {\n            active: i === this.props.page,\n          })}\n        >\n          {i}\n        </li>);\n      }\n    }\n\n    return (\n      <div id=\"pagination-container\">\n        <div id=\"pagination\">\n          <div style={{ lineHeight: '30px' }}>\n            <span className=\"showing-text\">Showing</span>\n            <span className=\"range\">{' '}{range}</span>\n          </div>\n          {prevPage}\n          {firstPage}\n          <ul id=\"pagination-list\">\n            {pages}\n          </ul>\n          {lastPage}\n          {nextPage}\n        </div>\n      </div>\n    );\n  }\n}\n\nPagination.propTypes = {\n  margin: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  // count: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func,\n};\n\nexport default Pagination;\n","import { request,csvUploadRequest } from './request';\nimport { routes } from '../constants/constant.routes';\n\nconst API_URL = routes.API_URL;\n\nexport default class ContactService {\n  static addContact(contactObj) {\n    return request('POST', `${API_URL}${routes.ADD_CONTACT}`, null, contactObj, null)\n  }\n\n  static updateContact(contactObj) {\n    return request('POST', `${API_URL}${routes.UPDATE_CONTACT}`, null, contactObj, null)\n  }\n\n  static getContacts(page, pageSize, search,isDownload,body) {\n    let qp = `?`;\n    if (page) {\n      qp += `page=${page}&`\n    }\n    if (pageSize) {\n      qp += `limit=${pageSize}&`\n    }\n    if (search) {\n      qp += `search=${search}&`\n    }\n    if (isDownload) {\n      qp += `downloadExcel=${isDownload}&`\n    }\n    return request('POST', `${API_URL}${routes.GET_CONTACTS}${qp}`, null, body, null)\n  }\n\n  static uploadExcel(file) {\n    let url = `${API_URL}${routes.UPLOAD_EXCEL}`;\n    return csvUploadRequest(url, file);\n  }\n} ","import React, { Component } from 'react';\nimport {\n  Spinner\n} from 'reactstrap';\n\nclass CustomSpinner extends Component {\n  render() {\n    return <div className=\"spinner-middle-con\">\n      <Spinner className=\"spinner-middle\" />\n    </div>;\n  }\n}\n\nexport default CustomSpinner;","import swal from 'sweetalert';\n\nexport default class ModalService {\n\n  static openAlert(title, msg, suceess) {\n    // swal(title, msg, suceess);\n    swal({\n      text: msg,\n      dangerMode: suceess === 'success' ? false : true,\n      button: {\n        text: \"OK\",\n        value: false,\n        visible: false,\n        className: \"\",\n        closeModal: true,\n      }\n    })\n  }\n\n}","import React, { Component, Fragment } from 'react';\nimport { Modal, ModalHeader, ModalFooter, ModalBody, Button, Row, Col, Input, Form, FormGroup, Label } from 'reactstrap';\n\nimport CustomSpinner from '../components/CustomSpinner/CustomSpinner';\n\nimport ContactService from '../services/ContactService';\nimport Validation from '../services/Validation';\nimport ModalService from '../services/ModalService';\n\nlet isLoading = false;\nconst typeDropdownOptions=[\n  {\n    key: 'Buyer',\n    value:'buyer'\n  },\n  {\n    key: 'Seller',\n    value:'seller'\n  },\n  {\n    key: 'Dalal',\n    value:'dalal'\n  } \n]\nlet defaultControls = {\n  name: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null\n  },\n  // last_name: {\n  //   value: '',\n  //   valid: null,\n  //   touched: false,\n  //   nullValue: null\n  // },\n  email: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  mobile1: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  mobile2: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  city: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  address: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  company: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  type: {\n    value: 'dalal',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  }  \n}\nexport default class AddContact extends Component {\n\n  state = {\n    controls: JSON.parse(JSON.stringify(defaultControls)),\n    isLoading: false\n  }\n\n  constructor() {\n    super();\n  }\n\n\n  componentDidMount() {\n    const { contactData } = this.props;\n    console.log(\"contactData\", contactData);\n    if (contactData) {\n      const { controls } = this.state;\n      const { name, email, address,\n        mobile1,mobile2,city,company,type\n      } = controls;\n      \n      name.value = contactData.name;\n      mobile1.value = contactData.mobile1;\n      mobile2.value = contactData.mobile2;\n      email.value = contactData.email;\n      address.value = contactData.address;\n      city.value = contactData.city;\n      company.value = contactData.company;\n      type.value = contactData.type;\n      this.setState({ controls });\n    }\n  }\n\n  handleInputChange = (e) => {\n    const controlName = e.target.name;\n    const controlValue = e.target.value;\n    const { controls } = this.state;\n    controls[controlName].value = controlValue;\n    controls[controlName].touched = true;\n    this.setState({ controls });\n    // this.handleValidation();\n  }\n\n  handleValidation = (firstTime, isSubmit) => {\n    let { controls, isFormValid } = this.state;\n    let { \n      name\n    } = controls;\n\n    if (firstTime === true || name.touched === true || isSubmit) {\n      name = Validation.notNullValidator(name);\n      name.valid = !(name.nullValue);\n      if (((isSubmit || name.touched) && name.valid === false)) {\n        name.showErrorMsg = true;\n      } else {\n        name.showErrorMsg = false;\n      }\n    }\n\n    // if (firstTime === true || last_name.touched === true || isSubmit) {\n    //   last_name = Validation.notNullValidator(last_name);\n    //   last_name.valid = !(last_name.nullValue);\n    //   if (((isSubmit || last_name.touched) && last_name.valid === false)) {\n    //     last_name.showErrorMsg = true;\n    //   } else {\n    //     last_name.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || mobile1.touched === true || isSubmit) {\n    //   // mobile1 = Validation.notNullValidator(mobile1);\n    //   // mobile1.valid = !(mobile1.nullValue);\n    //   if (((isSubmit || mobile1.touched) && mobile1.valid === false)) {\n    //     mobile1.showErrorMsg = true;\n    //   } else {\n    //     mobile1.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || mobile2.touched === true || isSubmit) {\n    //   // mobile2 = Validation.notNullValidator(mobile2);\n    //   // mobile2.valid = !(mobile2.nullValue);\n    //   if (((isSubmit || mobile2.touched) && mobile2.valid === false)) {\n    //     mobile2.showErrorMsg = true;\n    //   } else {\n    //     mobile2.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || mobile3.touched === true || isSubmit) {\n    //   // mobile3 = Validation.notNullValidator(mobile3);\n    //   // mobile3.valid = !(mobile3.nullValue);\n    //   if (((isSubmit || mobile3.touched) && mobile3.valid === false)) {\n    //     mobile3.showErrorMsg = true;\n    //   } else {\n    //     mobile3.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || mobile4.touched === true || isSubmit) {\n    //   // mobile4 = Validation.notNullValidator(mobile4);\n    //   // mobile4.valid = !(mobile4.nullValue);\n    //   if (((isSubmit || mobile4.touched) && mobile4.valid === false)) {\n    //     mobile4.showErrorMsg = true;\n    //   } else {\n    //     mobile4.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || email.touched === true || isSubmit) {\n    //   // email = Validation.notNullValidator(email);\n    //   email = Validation.emailValidator(email);\n    //   email.valid = !(email.invalidEmail);\n    //   if (((isSubmit || email.touched) && email.valid === false)) {\n    //     email.showErrorMsg = true;\n    //   } else {\n    //     email.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || address.touched === true || isSubmit) {\n    //   // address = Validation.notNullValidator(address);\n    //   address.valid = !(address.nullValue);\n    //   if (((isSubmit || address.touched) && address.valid === false)) {\n    //     address.showErrorMsg = true;\n    //   } else {\n    //     address.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || income.touched === true || isSubmit) {\n    //   // income = Validation.notNullValidator(income);\n    //   income.valid = !(income.nullValue);\n    //   if (((isSubmit || income.touched) && income.valid === false)) {\n    //     income.showErrorMsg = true;\n    //   } else {\n    //     income.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || living.touched === true || isSubmit) {\n    //   // living = Validation.notNullValidator(living);\n    //   living.valid = !(living.nullValue);\n    //   if (((isSubmit || living.touched) && living.valid === false)) {\n    //     living.showErrorMsg = true;\n    //   } else {\n    //     living.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || family_members.touched === true || isSubmit) {\n    //   // family_members = Validation.notNullValidator(family_members);\n    //   family_members.valid = !(family_members.nullValue);\n    //   if (((isSubmit || family_members.touched) && family_members.valid === false)) {\n    //     family_members.showErrorMsg = true;\n    //   } else {\n    //     family_members.showErrorMsg = false;\n    //   }\n    // }\n   \n    // if (firstTime === true || additional_detail.touched === true || isSubmit) {\n    //   // additional_detail = Validation.notNullValidator(additional_detail);\n    //   additional_detail.valid = !(additional_detail.nullValue);\n    //   if (((isSubmit || additional_detail.touched) && additional_detail.valid === false)) {\n    //     additional_detail.showErrorMsg = true;\n    //   } else {\n    //     additional_detail.showErrorMsg = false;\n    //   }\n    // }\n   \n\n    if (\n      name.valid === true \n      // last_name.valid === true &&\n      // email.valid === true &&\n      // mobile1.valid === true &&\n      // mobile2.valid === true &&\n      // mobile3.valid === true &&\n      // mobile4.valid === true &&\n      // address.valid === true &&\n      // living.valid === true &&\n      // income.valid === true &&\n      // family_members.valid === true &&\n      // additional_detail.valid === true \n    ) {\n      isFormValid = true;\n    } else {\n      isFormValid = false;\n    }\n    console.log(\"isFormValid\",isFormValid);\n    console.log(\"controls\", controls);\n    // console.log('controls', controls);\n    // console.log('isFormValid', isBusinessFormValid);\n    this.setState({ controls, isFormValid });\n    return isFormValid;\n  }\n\n  saveDetail = () => {\n    const { controls } = this.state;\n    const { name, email, address,\n      mobile1,mobile2,city,company,type\n    } = controls;   \n\n    if (isLoading === true) {\n      return;\n    }\n    const isFormValid = this.handleValidation(false, true);\n    if (isFormValid === false) {\n      return;\n    }\n    console.log(\"controls\", controls);\n    let obj = {\n      name: name.value,\n      email: email.value,\n      mobile1: mobile1.value,\n      mobile2: mobile2.value,\n      address: address.value,\n      city: city.value,\n      company: company.value,\n      type: type.value\n    }\n    this.setState({ isLoading: true });\n    isLoading = true;\n    ContactService.addContact(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        if (message) {\n          ModalService.openAlert('Person', message, 'success');\n        }\n        this.setState({ isLoading: false });\n        isLoading = false;\n        this.props.closeModal(true);\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        isLoading = false;\n      })\n  }\n\n  updateContact = () => {\n    const { contactData} = this.props;\n    const { controls } = this.state;\n    const { name, email, address,\n      mobile1,mobile2,city,company,type\n    } = controls;   \n    const isFormValid = this.handleValidation(false, true);\n    if (isFormValid === false) {\n      return;\n    }\n    console.log(\"controls\", controls);\n    let obj = {\n      name: name.value,\n      email: email.value,\n      mobile1: mobile1.value,\n      mobile2: mobile2.value,\n      address: address.value,\n      city: city.value,\n      company: company.value,\n      type:type.value,\n      contactId: contactData.uuid\n    }\n    this.setState({ isLoading: true });\n    ContactService.updateContact(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        this.setState({ isLoading: false });\n        if (message) {\n          ModalService.openAlert('Person', message, 'success');\n        }\n        this.props.closeModal(true);\n        // this.getPerson();\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        const message = e.response && e.response.data && e.response.data.message ? e.response.data.message : 'Something went wrong';\n        ModalService.openAlert('Person', message, 'error');\n      })\n  }\n\n  render() {\n    const { contactData } = this.props;\n    const { controls,isLoading } = this.state;\n    const { name, email, address,\n      mobile1,mobile2,city,company,type\n    } = controls;\n\n\n    return <Modal isOpen={this.props.show} toggle={this.props.closeModal} >\n      <ModalHeader toggle={this.props.closeModal}>Add Person</ModalHeader>\n      <ModalBody>\n        {isLoading && <CustomSpinner></CustomSpinner>}\n        <Form>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"name\">Name</Label>\n                <Input\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  value={name.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {name.showErrorMsg && <div className=\"error\">* Please enter name</div>}\n\n              </FormGroup>\n            </Col>\n            {/* <Col>\n              <FormGroup>\n                <Label for=\"name\">Last Name</Label>\n                <Input\n                  type=\"text\"\n                  id=\"last_name\"\n                  name=\"last_name\"\n                  value={last_name.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {last_name.showErrorMsg && <div className=\"error\">* Please enter last name</div>}\n              </FormGroup>\n            </Col> */}\n          </Row>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"mobile1\">Mobile Number 1</Label>\n                <Input\n                  type=\"number\"\n                  id=\"mobile1\"\n                  name=\"mobile1\"\n                  value={mobile1.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {mobile1.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"mobile2\">Mobile Number 2</Label>\n                <Input\n                  type=\"number\"\n                  id=\"mobile2\"\n                  name=\"mobile2\"\n                  value={mobile2.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {mobile2.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n              </FormGroup>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"email\">Email</Label>\n                <Input\n                  type=\"text\"\n                  id=\"email\"\n                  name=\"email\"\n                  value={email.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {email.showErrorMsg && <div className=\"error\">* Please enter valid email address</div>}\n\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"company\">company</Label>\n                <Input\n                  type=\"text\"\n                  id=\"company\"\n                  name=\"company\"\n                  value={company.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {company.showErrorMsg && <div className=\"error\">* Please enter valid company name</div>}\n\n              </FormGroup>\n            </Col>\n          </Row>\n          <FormGroup>\n            <Label for=\"address\">Address</Label>\n            <Input\n              type=\"text\"\n              id=\"address\"\n              name=\"address\"\n              value={address.value}\n              onChange={this.handleInputChange}\n            ></Input>\n            {address.showErrorMsg && <div className=\"error\">* Please enter  address</div>}\n\n          </FormGroup>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"city\">City</Label>\n                <Input\n                  type=\"text\"\n                  id=\"city\"\n                  name=\"city\"\n                  value={city.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {city.showErrorMsg && <div className=\"error\">* Please enter valid city name</div>}\n\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"type\">Type</Label>\n                <select name=\"type\" onChange={this.handleInputChange} value={type.value}>\n                  {typeDropdownOptions.map(t=><option value={t.value}>{t.key}</option>)}\n                </select>\n              </FormGroup>\n            </Col>\n          </Row>\n          <Button onClick={contactData ? this.updateContact: this.saveDetail}>\n            Save\n          </Button>\n        </Form>\n      </ModalBody>\n\n    </Modal>\n  }\n}","import React, { Component } from 'react';\nimport { Modal, ModalBody, ModalHeader, Button } from \"reactstrap\";\nimport Dropzone from 'react-dropzone';\nimport ContactService from '../services/ContactService';\nlet file = null;\n\nclass UploadContactModal extends Component {\n\n    state = {\n        file: null,\n        errorMessage: ''\n    }\n\n    componentDidMount(){\n        console.log(\"opening modal\")\n    }\n    uploadFile = () => {\n        if (!this.state.file) {\n            this.setState({ errorMessage: 'Please select file' })\n            return;\n        }\n        ContactService.uploadExcel(this.state.file)\n            .then(data => {\n                this.props.toggle(true);\n                console.log(\"data\", data);\n            })\n            .catch(e => {\n                console.error(\"e\", e);\n            })\n    }\n\n    onDropFile = (acceptedFiles) => {\n        file = acceptedFiles[0];\n        this.setState({ file: file });\n    }\n\n    render() {\n        return (\n            // <div>\n                <Modal isOpen={this.props.show} toggle={() => null} >\n                    <ModalHeader>\n                        <div>\n                            <span>Upload Excel</span>\n                            <span style={{ right: '10px', position: 'absolute' }} onClick={this.props.closeModal}>X</span>\n                        </div>\n                    </ModalHeader>\n                    <ModalBody>\n                        <Dropzone onDrop={acceptedFiles => this.onDropFile(acceptedFiles)}>\n                            {({ getRootProps, getInputProps }) => (\n                                <section>\n                                    <div {...getRootProps()} style={{ height: '300px', border: '1px solid black', marginBottom: '20px' }}>\n                                        <input {...getInputProps()} />\n                                        <p>Drag 'n' drop some files here, or click to select files</p>\n                                    </div>\n                                </section>\n                            )}\n                        </Dropzone>\n                        {this.state.file && <div>{this.state.file.name}</div>}\n                        {this.state.errorMessage && !this.state.file && <div className=\"error\">* {this.state.errorMessage}</div>}\n                        <div style={{ textAlign: 'right' }}>\n                            <Button style={{ width: '100%', backgroundColor: '#ab3b60' }} onClick={this.uploadFile.bind(this)}>Upload </Button>\n                        </div>\n                    </ModalBody>\n                </Modal>\n            // </div>\n        );\n    }\n}\n\nexport default UploadContactModal;\n\n// export default ImportAttendeeModal;","import ModalService from './services/ModalService';\n\nconst monthObj = {\n  1: \"Jan\",\n  2: \"Feb\",\n  3: \"Mar\",\n  4: \"Apr\",\n  5: \"May\",\n  6: \"Jun\",\n  7: \"Jul\",\n  8: \"Aug\",\n  9: \"Sep\",\n  10: \"Oct\",\n  11: \"Nov\",\n  12: \"Dec\"\n}\n\n\nexport function formatDate(date) {\n  date = new Date(date);\n  let day = date.getDate();\n  let month = date.getMonth() + 1;\n  let year = date.getFullYear().toString();\n  year = getYearString(year);\n  if (day < 10) {\n    day = `0` + day\n  }\n  month = monthObj[month];\n  return `${day} ${month}${year}`\n}\n\nfunction getYearString(year) {\n  if (!year) {\n    year = new Date().getFullYear().toString();\n  }\n  return \"'\" + year.slice(2);\n}\n\n\nexport function downlodFile(url) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.setAttribute('download', 'sample.xlsx');\n  link.setAttribute('target', '_blank');\n  // 3. Append to html page\n  document.body.appendChild(link);\n  // 4. Force download\n  link.click();\n  // 5. Clean up and remove the link\n  link.parentNode.removeChild(link);\n}\n\nexport function objectToQuerystring (obj) {\n  return Object.keys(obj).reduce(function (str, key, i) {\n    var delimiter, val;\n    delimiter = (i === 0) ? '?' : '&';\n    key = encodeURIComponent(key);\n    if(obj[key]){\n      val = encodeURIComponent(obj[key]);\n    }\n    return [str, delimiter, key, '=', val].join('');\n  }, '');\n}\n\nexport function showErrorMsg(title,e){\n  let msg= 'Something went wrong';\n  if(e && e.response && e.response.data && e.response.data.message){\n      msg = e.response.data.message;\n  }\n  ModalService.openAlert(title,msg,'failure');\n}","import React, { Component } from 'react';\nimport { Row, Col, Card, CardBody, Table, Form, FormGroup, Label, Input, Button } from 'reactstrap';\nimport Ionicon from 'react-ionicons';\n\nimport Pagination from '../../components/Pagination/Pagination';\n\nimport ContactService from '../../services/ContactService';\nimport Validation from '../../services/Validation';\n\nimport AddContact from '../../modal/AddContact';\nimport UploadContact from '../../modal/UploadContactModal';\n\nimport {downlodFile} from '../../utils';\nimport './Contact.css';\n\nconst pageSize = 10;\n\n\nclass Contact extends Component {\n    state = {\n        contacts: [],\n        downloadExcelFields:['all'],\n        selectedContactToUpdate: null,\n        isAddContactModalOpen: false,\n        isUploadContactModalOpen: false,\n        page: 1,\n        totalRecords: 0,\n        search: null,\n        controls:{\n            downloadCheckbox: {\n                value: ['all'],\n                valid: null,\n                touched: false,\n                required: true,\n                showErrorMsg: false\n              },\n        }\n    }\n\n    componentDidMount() {\n        this.getContacts(this.state.page);\n    }\n\n    getContacts = (page, search,isDownload) => {\n        let {controls}=this.state;\n        let {downloadCheckbox}=controls;\n        let body={\n            downloadExcelFields:downloadCheckbox.value\n        }\n        ContactService.getContacts(page, pageSize, search,isDownload,body)\n            .then(data => {\n                console.log(data.data);\n                if(isDownload){\n                    if(data.data.data && data.data.data.file){\n                        downlodFile(data.data.data.file);\n                    }\n                } else {\n                    const contacts = data.data.data.contacts;\n                    const totalRecords = data.data.data.count;\n                    this.setState({ contacts, totalRecords });\n                }      \n            })\n            .catch(e => {\n\n            })\n    }\n\n    openAddContactModal = (contactData) => {\n        this.setState({ isAddContactModalOpen: true, selectedContactToUpdate: contactData });\n    }\n    closeAddContactModal = (reload) => {\n        console.log(\"closing modal\");\n        this.setState({ isAddContactModalOpen: false, selectedContactToUpdate: null });\n        if (reload) {\n            this.getContacts(this.state.page);\n        }\n    }\n\n    openTransactions = (contactData) =>{\n        this.props.history.push({\n            pathname: \"/transactions\",\n            contactData\n        })\n    }\n\n    openUploadContactModal = () => {\n        this.setState({ isUploadContactModalOpen: true });\n    }\n    closeUploadContactModal = (reload) => {\n        this.setState({ isUploadContactModalOpen: false });\n        if (reload) {\n            this.getContacts(this.state.page);\n        }\n    }\n\n    \n\n    handlePageChange = (page) => {\n        this.setState({ page: page });\n        this.getContacts(page, this.state.search);\n        // this.getAllDealerReport(page, null, false, uuid);\n    }\n\n    handleSearchInput = (e) => {\n        const value = e.target.value;\n        this.setState({ search: value });\n        this.searchContactData(value);\n    }\n\n    searchContactData = (search) => {\n        this.setState({ page: 1 });\n        this.getContacts(1, search);\n    }\n\n    downloadExcel=()=>{\n        this.getContacts(this.state.page,this.state.search,true);\n    }\n\n\n    render() {\n        const { contacts, selectedContactToUpdate, isAddContactModalOpen,\n             page, totalRecords, search,controls,\n             isUploadContactModalOpen\n            } = this.state;\n        const {downloadCheckbox}=controls;\n        const prepareRows = contacts.map(c => <tr>\n            <td>{c.name}</td>\n            <td>\n                <div>{c.mobile1}</div>\n                <div>{c.mobile2}</div>\n            </td>\n            <td>{c.email}</td>\n            <td>{c.address}</td>\n            <td>{c.city}</td>\n            <td>{c.company}</td>\n            <td>{c.type}</td>\n            <td>\n                <span  onClick={this.openAddContactModal.bind(this, c)}>\n                    <Ionicon icon=\"md-create\" fontSize=\"16px\" color=\"#fdbb1f\" />    \n                </span>&nbsp;\n                <span  onClick={this.openTransactions.bind(this, c)} title=\"Transactions\">\n                    <Ionicon icon=\"md-git-compare\" fontSize=\"16px\" color=\"#fdbb1f\"></Ionicon>\n                </span>\n            </td>\n        </tr>)\n        return (\n            <div id=\"contact\">\n                {isAddContactModalOpen &&\n                    <AddContact\n                        show={isAddContactModalOpen}\n                        closeModal={this.closeAddContactModal}\n                        contactData={selectedContactToUpdate}>\n                    </AddContact>}\n\n                    {isUploadContactModalOpen &&\n                    <UploadContact\n                        show={isUploadContactModalOpen}\n                        closeModal={this.closeUploadContactModal}\n                        >\n                    </UploadContact>}\n                <Row>\n                    <Col xl=\"12\">\n                        <Card>\n                            <CardBody>\n                                <Row>\n                                    <Col sm=\"4\">\n                                        <Input\n                                            name=\"search\"\n                                            id=\"search\"\n                                            type=\"text\"\n                                            placeholder=\"Enter person name,phone numeber or company\"\n                                            onChange={this.handleSearchInput}\n                                            value={search}\n                                        ></Input>\n                                    </Col>\n                                    <Col className=\"text-align-right\">\n                                    <span className=\"download-link\" onClick={this.openAddContactModal.bind(this, null)}>Add Contact</span>&nbsp;&nbsp;\n                                        <span className=\"download-link\" onClick={this.openUploadContactModal}>Upload Contact</span>\n                                    </Col>\n                                </Row>\n\n                                <Table className=\"width-100 margin-top-10\">\n                                    <thead>\n                                        <tr>\n                                            <th>Name</th>\n                                            <th>Phone</th>\n                                            <th>Email</th>\n                                            <th>Address</th>\n                                            <th>City</th>\n                                            <th>Company</th>\n                                            <th>Type</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {prepareRows}\n                                    </tbody>\n                                </Table>\n                                {<Pagination\n                                    margin={2}\n                                    page={page}\n                                    pageSize={pageSize}\n                                    totalRecords={totalRecords}\n                                    onPageChange={this.handlePageChange}\n                                ></Pagination>}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    \n                </Row>\n\n            </div>\n        );\n    }\n}\n\nexport default Contact;","import { request,csvUploadRequest } from './request';\nimport { routes } from '../constants/constant.routes';\n\nconst API_URL = routes.API_URL;\n\nexport default class StockService {\n  static addStock(contactObj) {\n    return request('POST', `${API_URL}${routes.ADD_STOCK}`, null, contactObj, null)\n  }\n\n  static updateStock(contactObj) {\n    return request('POST', `${API_URL}${routes.UPDATE_STOCK}`, null, contactObj, null)\n  }\n\n  static deleteStock(uuid) {\n    let qp = `?`;\n    if (uuid) {\n      qp += `u=${uuid}&`\n    }\n    return request('DELETE', `${API_URL}${routes.DELETE_STOCKS}${qp}`, null, null, null)\n  }\n\n  static getStocks(page, pageSize, search,isDownload,body,status) {\n    let qp = `?`;\n    if (page) {\n      qp += `page=${page}&`\n    }\n    if (pageSize) {\n      qp += `limit=${pageSize}&`\n    }\n    if (search) {\n      qp += `search=${search}&`\n    }\n    if (status) {\n      qp += `status=${status}&`\n    }\n    if (isDownload) {\n      qp += `downloadExcel=${isDownload}&`\n    }\n    return request('POST', `${API_URL}${routes.GET_STOCKS}${qp}`, null, body, null)\n  }\n} ","import React,{ Component } from 'react';\nimport { Label, Input, Button } from 'reactstrap';\nimport ContactService from '../../services/ContactService';\n\nclass SearchContact extends Component {\n  state = {\n    contacts:[],\n    personName :null, \n    showPersonList : false,\n    controls:{\n      person: {\n        value: '',\n        valid: null,\n        touched: false,\n        nullValue: null,\n        invalidPassword: null\n      },\n    }\n  }\n\n  componentDidMount() {\n    let { controls } =this.state;\n    const { person: personProp } = this.props;\n    controls.person = personProp;\n    this.setState({ controls });\n    this.getContacts(true);\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n   handleClickOutside = event => {\n      const { forwardedRef } = this.props;\n      if (forwardedRef.current && !forwardedRef.current.contains(event.target)) {\n        this.setState({\n          showPersonList: false,\n        });\n      }\n  }\n\n  handlePersonSearchChange = (e) => {\n    let { personName, controls } = this.state;\n    const { person } = controls;\n    personName = e.target.value;\n    person.value = null;\n    // const value = e.target.value;\n    this.setState({ personName,controls  },()=>{\n      this.getContacts();\n    });\n  }\n\n  openPersonToggle = () => {\n    let { showPersonList } = this.state;\n    showPersonList = true;\n    this.setState({\n      showPersonList\n    });\n  }\n\n  onSelectPerson = (contact) => {\n    let { personName, showPersonList, controls } = this.state;\n    const { person } = controls;\n    const { name, uuid } = contact;\n    personName = name;\n    person.value = uuid;\n    showPersonList = false;\n    this.props.getSelectedPersonControl(person);\n    this.setState({ personName, controls, showPersonList });\n  }\n\n  getContacts = (firstTime) =>{\n    let { personName } =this.state;\n    const { person } = this.props;\n    ContactService.getContacts(1,1000000,personName,false)\n      .then(data=>{\n        console.log(\"data\",data);\n        if(data.data && data.data.data && data.data.data.contacts){\n          this.setState({ contacts : data.data.data.contacts })\n          if(person.value){\n            let contactIndex = data.data.data.contacts.findIndex(c=>c.uuid === person.value)\n            personName = data.data.data.contacts[contactIndex].name;\n            this.setState({personName})\n          }\n        }\n      })\n      .catch(e=>{\n        console.log(\"e\",e);\n      })\n  }\n  \n  render(){\n    const { personName, showPersonList, controls, contacts } = this.state;\n    const { person } = controls;\n    const { forwardedRef } = this.props;\n\n    return <div ref={forwardedRef}>\n        {/* <Label for=\"status\">Contact Name</Label> */}\n        <Input type=\"text\" name=\"person\" autoComplete=\"off\" value={personName} onChange={this.handlePersonSearchChange.bind(this)}\n          onFocus={this.openPersonToggle.bind(this)}></Input>\n        {showPersonList &&\n          <div className=\"p-list\">\n            {contacts.map((c, i) =>\n              <Button\n                className=\"list-button\"\n                onClick={this.onSelectPerson.bind(this, c)}\n              >\n                {c.name}\n              </Button>\n            )}\n          </div>\n        }\n      </div>\n    \n  }\n}\n\nexport default React.forwardRef(\n  function myFunction(props, ref) {\n    return <SearchContact {...props} forwardedRef={ref} />;\n  }\n);","import React, { Component, Fragment } from 'react';\nimport { Modal, ModalHeader, ModalFooter, ModalBody, Button, Row, Col, Input, Form, FormGroup, Label,InputGroup } from 'reactstrap';\nimport DatePicker from 'react-datepicker';\n\nimport CustomSpinner from '../components/CustomSpinner/CustomSpinner';\nimport SearchContact from '../components/SearchContact/SearchContact';\n\nimport StockService from '../services/StockService';\nimport ContactService from '../services/ContactService';\nimport Validation from '../services/Validation';\nimport ModalService from '../services/ModalService';\n\nlet isLoading = false;\nlet statusDropDownOptions = [\n  {\n    key:'Current Stock',\n    value:'current-stock'\n  },\n  {\n    key:'Jangad',\n    value:'jangad'\n  },\n  {\n    key:'Sold',\n    value:'sold'\n  }\n]\n\nlet defaultControls = {\n  stockId: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null\n  },\n  // last_name: {\n  //   value: '',\n  //   valid: null,\n  //   touched: false,\n  //   nullValue: null\n  // },\n  status: {\n    value: 'current-stock',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  weight: {\n    value: null,\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  buyDate: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  buyPrice: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  sellDate: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  sellPrice: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  buyPersonId: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  sellPersonId: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  }\n}\nexport default class AddStock extends Component {\n\n  state = {\n    controls: JSON.parse(JSON.stringify(defaultControls)),\n    contacts:[],\n    isLoading: false\n  }\n\n  constructor() {\n    super();\n    this.buyPersonIdContainer = React.createRef();\n    this.sellPersonIdContainer = React.createRef();\n  }\n\n \n\n  componentDidMount() {\n    const { stockData } = this.props;\n    console.log(\"stockData\", stockData);\n    if (stockData) {\n      const { controls } = this.state;\n      const { \n        stockId,buyDate,buyPrice,buyPersonId,sellDate,\n        sellPersonId,sellPrice,status,weight\n      } = controls;\n      \n      stockId.value = stockData.stock_id;\n      buyDate.value = new Date(stockData.buy_date);\n      buyPrice.value = stockData.buy_price;\n      buyPersonId.value = stockData.buy_person_id;\n      if(stockData.sell_date){\n        sellDate.value = new Date(stockData.sell_date);\n      }\n      sellPrice.value = stockData.sell_price;\n      sellPersonId.value = stockData.sell_person_id;\n      status.value = stockData.status;\n      weight.value = stockData.weight;\n      this.setState({ controls });\n    }\n    this.getContacts();\n  }\n\n  handleInputChange = (e) => {\n    const controlName = e.target.name;\n    const controlValue = e.target.value;\n    const { controls } = this.state;\n    controls[controlName].value = controlValue;\n    controls[controlName].touched = true;\n    this.setState({ controls });\n    // this.handleValidation();\n  }\n\n  handleDateChange = (controlName, e) => {\n    console.log(\"e\", e);\n    console.log(\"controlName\", controlName);\n    const { controls } = this.state;\n    let dateControl = controls[controlName];\n    dateControl.value = e;\n    dateControl.touched = true;\n    this.setState({ controls });\n    // this.handleValidation();\n  }\n\n  handleValidation = (firstTime, isSubmit) => {\n    let { controls, isFormValid } = this.state;\n    let { \n      name,weight\n    } = controls;\n\n    if (firstTime === true || name.touched === true || isSubmit) {\n      name = Validation.notNullValidator(name);\n      name.valid = !(name.nullValue);\n      if (((isSubmit || name.touched) && name.valid === false)) {\n        name.showErrorMsg = true;\n      } else {\n        name.showErrorMsg = false;\n      }\n    }\n\n    // if (firstTime === true || last_name.touched === true || isSubmit) {\n    //   last_name = Validation.notNullValidator(last_name);\n    //   last_name.valid = !(last_name.nullValue);\n    //   if (((isSubmit || last_name.touched) && last_name.valid === false)) {\n    //     last_name.showErrorMsg = true;\n    //   } else {\n    //     last_name.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || mobile1.touched === true || isSubmit) {\n    //   // mobile1 = Validation.notNullValidator(mobile1);\n    //   // mobile1.valid = !(mobile1.nullValue);\n    //   if (((isSubmit || mobile1.touched) && mobile1.valid === false)) {\n    //     mobile1.showErrorMsg = true;\n    //   } else {\n    //     mobile1.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || mobile2.touched === true || isSubmit) {\n    //   // mobile2 = Validation.notNullValidator(mobile2);\n    //   // mobile2.valid = !(mobile2.nullValue);\n    //   if (((isSubmit || mobile2.touched) && mobile2.valid === false)) {\n    //     mobile2.showErrorMsg = true;\n    //   } else {\n    //     mobile2.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || mobile3.touched === true || isSubmit) {\n    //   // mobile3 = Validation.notNullValidator(mobile3);\n    //   // mobile3.valid = !(mobile3.nullValue);\n    //   if (((isSubmit || mobile3.touched) && mobile3.valid === false)) {\n    //     mobile3.showErrorMsg = true;\n    //   } else {\n    //     mobile3.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || mobile4.touched === true || isSubmit) {\n    //   // mobile4 = Validation.notNullValidator(mobile4);\n    //   // mobile4.valid = !(mobile4.nullValue);\n    //   if (((isSubmit || mobile4.touched) && mobile4.valid === false)) {\n    //     mobile4.showErrorMsg = true;\n    //   } else {\n    //     mobile4.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || email.touched === true || isSubmit) {\n    //   // email = Validation.notNullValidator(email);\n    //   email = Validation.emailValidator(email);\n    //   email.valid = !(email.invalidEmail);\n    //   if (((isSubmit || email.touched) && email.valid === false)) {\n    //     email.showErrorMsg = true;\n    //   } else {\n    //     email.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || address.touched === true || isSubmit) {\n    //   // address = Validation.notNullValidator(address);\n    //   address.valid = !(address.nullValue);\n    //   if (((isSubmit || address.touched) && address.valid === false)) {\n    //     address.showErrorMsg = true;\n    //   } else {\n    //     address.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || income.touched === true || isSubmit) {\n    //   // income = Validation.notNullValidator(income);\n    //   income.valid = !(income.nullValue);\n    //   if (((isSubmit || income.touched) && income.valid === false)) {\n    //     income.showErrorMsg = true;\n    //   } else {\n    //     income.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || living.touched === true || isSubmit) {\n    //   // living = Validation.notNullValidator(living);\n    //   living.valid = !(living.nullValue);\n    //   if (((isSubmit || living.touched) && living.valid === false)) {\n    //     living.showErrorMsg = true;\n    //   } else {\n    //     living.showErrorMsg = false;\n    //   }\n    // }\n\n    // if (firstTime === true || family_members.touched === true || isSubmit) {\n    //   // family_members = Validation.notNullValidator(family_members);\n    //   family_members.valid = !(family_members.nullValue);\n    //   if (((isSubmit || family_members.touched) && family_members.valid === false)) {\n    //     family_members.showErrorMsg = true;\n    //   } else {\n    //     family_members.showErrorMsg = false;\n    //   }\n    // }\n   \n    // if (firstTime === true || additional_detail.touched === true || isSubmit) {\n    //   // additional_detail = Validation.notNullValidator(additional_detail);\n    //   additional_detail.valid = !(additional_detail.nullValue);\n    //   if (((isSubmit || additional_detail.touched) && additional_detail.valid === false)) {\n    //     additional_detail.showErrorMsg = true;\n    //   } else {\n    //     additional_detail.showErrorMsg = false;\n    //   }\n    // }\n   \n\n    if (\n      name.valid === true \n      // last_name.valid === true &&\n      // email.valid === true &&\n      // mobile1.valid === true &&\n      // mobile2.valid === true &&\n      // mobile3.valid === true &&\n      // mobile4.valid === true &&\n      // address.valid === true &&\n      // living.valid === true &&\n      // income.valid === true &&\n      // family_members.valid === true &&\n      // additional_detail.valid === true \n    ) {\n      isFormValid = true;\n    } else {\n      isFormValid = false;\n    }\n    console.log(\"isFormValid\",isFormValid);\n    console.log(\"controls\", controls);\n    // console.log('controls', controls);\n    // console.log('isFormValid', isBusinessFormValid);\n    this.setState({ controls, isFormValid });\n    return isFormValid;\n  }\n\n  getSelectedBuyPersonControl = (personControl) => {\n    const { controls } = this.state;\n    controls.buyPersonId = personControl;\n    console.log(\"person\",controls);\n    this.setState({ controls });\n  }\n\n  getSelectedSellPersonControl = (personControl) => {\n    const { controls } = this.state;\n    controls.sellPersonId = personControl;\n    console.log(\"person\",controls);\n    this.setState({ controls });\n  }\n\n  getContacts = () =>{\n    ContactService.getContacts(1,10,null,false)\n      .then(data=>{\n        console.log(\"data\",data);\n        if(data.data && data.data.data && data.data.data.contacts){\n          this.setState({ contacts : data.data.data.contacts })\n        }\n      })\n      .catch(e=>{\n        console.log(\"e\",e);\n      })\n  }\n\n  saveDetail = () => {\n    const { controls } = this.state;\n    const { stockId,buyDate, buyPersonId,\n      buyPrice,sellDate,sellPrice,sellPersonId,status,weight\n    } = controls;   \n\n    if (isLoading === true) {\n      return;\n    }\n    // const isFormValid = this.handleValidation(false, true);\n    // if (isFormValid === false) {\n    //   return;\n    // }\n    let buyDateVar = null;\n    let sellDateVar = null;\n    if(buyDate.value){\n      buyDate.value.setHours(5,30,0,0);\n      console.log(\"buyDate\",buyDate);\n      buyDateVar = buyDate.value.toISOString();\n    }\n    if(sellDate.value){\n      sellDate.value.setHours(5,30,0,0);\n      console.log(\"sellDate\",sellDate);\n      sellDateVar = sellDate.value.toISOString();\n    }\n    console.log(\"controls\", controls);\n    let obj = {\n      stockId: stockId.value,\n      buyDate: buyDateVar,\n      buyPersonId: buyPersonId.value,\n      buyPrice: buyPrice.value,\n      sellDate: sellDateVar,\n      sellPersonId: sellPersonId.value,\n      sellPrice: sellPrice.value,\n      status: status.value,\n      weight:weight.value\n    }\n    this.setState({ isLoading: true });\n    isLoading = true;\n    StockService.addStock(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        if (message) {\n          ModalService.openAlert('Person', message, 'success');\n        }\n        this.setState({ isLoading: false });\n        isLoading = false;\n        this.props.closeModal(true);\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        isLoading = false;\n      })\n  }\n\n  updateStock = () => {\n    const { stockData} = this.props;\n    const { controls } = this.state;\n    const { stockId,buyDate, buyPersonId,\n      buyPrice,sellDate,sellPrice,sellPersonId,status,weight\n    } = controls;   \n    // const isFormValid = this.handleValidation(false, true);\n    // if (isFormValid === false) {\n    //   return;\n    // }\n    console.log(\"controls\", controls);\n    let buyDateVar = null;\n    let sellDateVar = null;\n    if(buyDate.value){\n      buyDate.value.setHours(5,30,0,0);\n      console.log(\"buyDate\",buyDate);\n      buyDateVar = buyDate.value.toISOString();\n    }\n    if(sellDate.value){\n      sellDate.value.setHours(5,30,0,0);\n      console.log(\"sellDate\",sellDate);\n      sellDateVar = sellDate.value.toISOString();\n    }\n\n    let obj = {\n      stockId: stockId.value,\n      buyDate:buyDateVar,\n      buyPersonId: buyPersonId.value,\n      buyPrice: buyPrice.value,\n      sellDate: sellDateVar,\n      sellPersonId: sellPersonId.value,\n      sellPrice: sellPrice.value,\n      status: status.value,\n      weight:weight.value,\n      id: stockData.uuid\n    }\n    this.setState({ isLoading: true });\n    StockService.updateStock(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        this.setState({ isLoading: false });\n        if (message) {\n          ModalService.openAlert('Person', message, 'success');\n        }\n        this.props.closeModal(true);\n        // this.getPerson();\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        const message = e.response && e.response.data && e.response.data.message ? e.response.data.message : 'Something went wrong';\n        ModalService.openAlert('Person', message, 'error');\n      })\n  }\n\n  render() {\n    const { stockData, } = this.props;\n    const { controls, contacts } = this.state;\n    const { stockId,buyDate, buyPersonId,\n      buyPrice,sellDate,sellPrice,sellPersonId,status,weight\n    } = controls;   \n\n    return <Modal isOpen={this.props.show} toggle={this.props.closeModal} >\n      <ModalHeader toggle={this.props.closeModal}>Add Stock</ModalHeader>\n      <ModalBody>\n        {isLoading && <CustomSpinner></CustomSpinner>}\n        <Form>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"name\">Stock Id</Label>\n                <Input\n                  type=\"text\"\n                  id=\"stockId\"\n                  name=\"stockId\"\n                  value={stockId.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {stockId.showErrorMsg && <div className=\"error\">* Please enter name</div>}\n\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"weight\">Weight</Label>\n                <Input\n                  type=\"number\"\n                  id=\"weight\"\n                  name=\"weight\"\n                  value={weight.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {weight.showErrorMsg && <div className=\"error\">* Please enter weight</div>}\n              </FormGroup>\n            </Col>\n            {/* <Col>\n              <FormGroup>\n                <Label for=\"name\">Last Name</Label>\n                <Input\n                  type=\"text\"\n                  id=\"last_name\"\n                  name=\"last_name\"\n                  value={last_name.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {last_name.showErrorMsg && <div className=\"error\">* Please enter last name</div>}\n              </FormGroup>\n            </Col> */}\n          </Row>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"status\">Status</Label>\n                <select name=\"status\" onChange={this.handleInputChange} value={status.value}>\n                  {statusDropDownOptions.map(s=><option value={s.value}>{s.key}</option>)}\n                </select>\n              </FormGroup>\n            </Col>\n          </Row>\n          {status.value === 'current-stock' && <Row>\n            <Col>\n                <FormGroup>\n                <Label for=\"password\" className=\"field-title\">Buy Date</Label>\n                <div>\n                  <Label className=\"width-100\"\n                    onClick={e => this.buyDate.state.open && e.preventDefault()}\n                  >\n                    <InputGroup>\n                      <DatePicker className={\"form-control calendar-input\"}\n                        selected={buyDate.value}\n                        onChange={this.handleDateChange.bind(this, 'buyDate')}\n                        showMonthDropdown\n                        ref={r => this.buyDate = r}\n                        // shouldCloseOnSelect={true}\n                        dateFormat=\"dd/MM/yyyy\"\n                        showYearDropdown\n                        placeholderText=\"Select\"\n                        shouldCloseOnSelect\n                        dropdownMode=\"select\"\n                      />\n                    </InputGroup>\n                  </Label>\n                  {buyDate.showErrorMsg && <div className=\"error\">\n                    {/* {EMPTY_BANNER_END_DATE} */}\n                  </div>}\n                </div>\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"buyPrice\">Buy Price</Label>\n                <Input\n                  type=\"number\"\n                  id=\"buyPrice\"\n                  name=\"buyPrice\"\n                  value={buyPrice.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {buyPrice.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"buyPersonId\">Buy Contact</Label>\n                <SearchContact \n                  ref={this.buyPersonIdContainer} \n                  person={buyPersonId}\n                  getSelectedPersonControl={this.getSelectedBuyPersonControl}\n                ></SearchContact>\n                {/* <select name=\"buyPersonId\" onChange={this.handleInputChange} value={buyPersonId.value}>\n                  <option>None</option>\n                  {contacts.map(c=><option value={c.uuid}>{c.name}</option>)}\n                </select> */}\n                {buyPersonId.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n              </FormGroup>\n            </Col>\n          </Row>}\n\n          {(status.value === 'jangad' || status.value === 'sold') && <Row>\n            <Col>\n                <FormGroup>\n                <Label for=\"password\" className=\"field-title\">Sell Date</Label>\n                <div>\n                  <Label className=\"width-100\"\n                    onClick={e => this.sellDate.state.open && e.preventDefault()}\n                  >\n                    <InputGroup>\n                      <DatePicker className={\"form-control calendar-input\"}\n                        selected={sellDate.value}\n                        onChange={this.handleDateChange.bind(this, 'sellDate')}\n                        showMonthDropdown\n                        ref={r => this.sellDate = r}\n                        // shouldCloseOnSelect={true}\n                        dateFormat=\"dd/MM/yyyy\"\n                        showYearDropdown\n                        placeholderText=\"Select\"\n                        shouldCloseOnSelect\n                        dropdownMode=\"select\"\n                      />\n                    </InputGroup>\n                  </Label>\n                  {sellDate.showErrorMsg && <div className=\"error\">\n                    {/* {EMPTY_BANNER_END_DATE} */}\n                  </div>}\n                </div>\n              </FormGroup>\n            </Col>\n            {<Col>\n              <FormGroup>\n                <Label for=\"sellPrice\">Sell Price</Label>\n                <Input\n                  type=\"number\"\n                  id=\"sellPrice\"\n                  name=\"sellPrice\"\n                  value={sellPrice.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {sellPrice.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n              </FormGroup>\n            </Col>}\n            <Col>\n              <FormGroup>\n                <Label for=\"sellPersonId\">Sell Contact</Label>\n                <SearchContact \n                  ref={this.sellPersonIdContainer} \n                  person={sellPersonId}\n                  getSelectedPersonControl={this.getSelectedSellPersonControl}\n                ></SearchContact>\n                {/* <select name=\"sellPersonId\" onChange={this.handleInputChange} value={sellPersonId.value}>\n                  <option>None</option>\n                  {contacts.map(c=><option value={c.uuid}>{c.name}</option>)}\n                </select> */}\n                {sellPersonId.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n              </FormGroup>\n            </Col>\n          </Row>}\n\n          \n          <Button onClick={stockData ? this.updateStock: this.saveDetail}>\n            Save\n          </Button>\n        </Form>\n      </ModalBody>\n\n    </Modal>\n  }\n}","import React, { Component } from 'react';\nimport { Row, Col, Card, CardBody, Table, Input,Label } from 'reactstrap';\nimport Ionicon from 'react-ionicons';\nimport Pagination from '../../components/Pagination/Pagination';\n\nimport StockService from '../../services/StockService';\nimport ModalService from '../../services/ModalService';\n\nimport AddStock from '../../modal/AddStock';\nimport {downlodFile,formatDate, showErrorMsg} from '../../utils';\n\nimport './Stocks.css';\n\nconst pageSize = 10;\n\nlet statusDropDownOptions = [\n    {\n        key:'All',\n        value:'all'\n    },\n    {\n      key:'Current Stock',\n      value:'current-stock'\n    },\n    {\n      key:'Jangad',\n      value:'jangad'\n    },\n    {\n      key:'Sold',\n      value:'sold'\n    }\n]\n\nclass Stocks extends Component {\n    state = {\n      stocks: [],\n      downloadExcelFields:['all'],\n      selectedStockToUpdate: null,\n      isAddContactModalOpen: false,\n      isAddStockModalOpen: false,\n      isUploadContactModalOpen: false,\n      page: 1,\n      totalRecords: 0,\n      search: null,\n      controls:{\n          downloadCheckbox: {\n              value: ['all'],\n              valid: null,\n              touched: false,\n              required: true,\n              showErrorMsg: false\n            },\n      },\n      selectedStatus:'all'\n    }\n\n    componentDidMount() {\n        this.getStocks(this.state.page);\n    }\n\n    handleInputChange = (e) => {\n        const controlName = e.target.name;\n        const controlValue = e.target.value;\n        console.log(\"controlName\",)\n        let stateValue = controlValue;\n        let obj = {\n            page:1\n        };\n        obj[controlName]=stateValue;\n        console.log(\"obj\",obj);\n        this.setState(obj,()=>{\n            this.getStocks()\n        });\n        // this.handleValidation();\n      }\n    \n\n    getStocks = (page, search,isDownload) => {\n        let { controls, selectedStatus  }=this.state;\n        let {downloadCheckbox}=controls;\n        let body={\n            downloadExcelFields:downloadCheckbox.value\n        }\n        StockService.getStocks(page, pageSize, search,isDownload,body,selectedStatus)\n            .then(data => {\n                console.log(data.data);\n                if(isDownload){\n                    if(data.data.data && data.data.data.file){\n                        downlodFile(data.data.data.file);\n                    }\n                } else {\n                    const stocks = data.data.data.stocks;\n                    const totalRecords = data.data.data.count;\n                    this.setState({ stocks, totalRecords });\n                }      \n            })\n            .catch(e => {\n                \n            })\n    }\n\n    openAddStockModal = (stockData) => {\n        this.setState({ isAddStockModalOpen: true, selectedStockToUpdate: stockData });\n    }\n    closeAddStockModal = (reload) => {\n        console.log(\"closing modal\");\n        this.setState({ isAddStockModalOpen: false, selectedStockToUpdate: null });\n        if (reload) {\n            this.getStocks(this.state.page);\n        }\n    }\n\n    deleteStock = (uuid) => {\n        StockService.deleteStock(uuid)\n            .then(data=>{\n                this.setState({page:1},()=>{\n                    this.getStocks(1,this.state.search);\n                })\n            })\n            .catch(e=>{\n                showErrorMsg('',e);\n            })\n    }\n\n    handlePageChange = (page) => {\n        this.setState({ page: page });\n        this.getStocks(page, this.state.search);\n        // this.getAllDealerReport(page, null, false, uuid);\n    }\n\n    handleSearchInput = (e) => {\n        const value = e.target.value;\n        this.setState({ search: value });\n        this.searchContactData(value);\n    }\n\n    searchContactData = (search) => {\n        this.setState({ page: 1 });\n        this.getStocks(1, search);\n    }\n\n    downloadExcel=()=>{\n        this.getStocks(this.state.page,this.state.search,true);\n    }\n\n    handledownloadCheckboxInput = (e) => {\n        const { controls } = this.state;\n        const { downloadCheckbox } = controls;\n        let checkBoxValue = downloadCheckbox.value;\n        let valueIndex = checkBoxValue.indexOf(e);\n        if (valueIndex < 0) {\n          if ((e !== 'all' && checkBoxValue && checkBoxValue[0] === 'all') || e === 'all') {\n            checkBoxValue = [e];\n          } else {\n            checkBoxValue.push(e);\n          }\n        } else {\n          checkBoxValue.splice(valueIndex, 1);\n        }\n        downloadCheckbox.value = checkBoxValue;\n        \n        this.setState({ controls })\n      }\n\n    render() {\n        const { stocks, selectedStockToUpdate, isAddContactModalOpen,\n             page, totalRecords, search,controls,\n             isAddStockModalOpen,selectedStatus\n            } = this.state;\n        const { downloadCheckbox }=controls;\n        const prepareRows = stocks.map(s => <tr>\n            <td>{s.stock_id}</td>\n            <td>{s.status}</td>\n            <td>{s.weight}</td>\n            <td>{s.buy_person_name}</td>\n            <td>\n                <div>{formatDate(s.buy_date)}</div>\n            </td>\n            <td>{s.buy_price}</td>\n            <td>{s.sell_person_name}</td>\n            <td>{s.sell_date && formatDate(s.sell_date)}</td>\n            <td>{s.sell_price}</td>\n            <td>\n              <Ionicon onClick={this.openAddStockModal.bind(this, s)} icon=\"md-create\" fontSize=\"16px\" color=\"#fdbb1f\" />&nbsp;\n              {!(s.sell_person_name || s.sell_date || s.sell_price) && <Ionicon onClick={this.deleteStock.bind(this, s.uuid)} icon=\"md-trash\" fontSize=\"16px\" color=\"#fdbb1f\" />}\n            </td>\n        </tr>)\n        return (\n            <div id=\"contact\">\n                {/* {isAddContactModalOpen &&\n                    <AddContact\n                        show={isAddContactModalOpen}\n                        closeModal={this.closeAddContactModal}\n                        contactData={selectedContactToUpdate}>\n                    </AddContact>} */}\n\n                {isAddStockModalOpen &&\n                    <AddStock\n                        show={isAddStockModalOpen}\n                        closeModal={this.closeAddStockModal}\n                        stockData={selectedStockToUpdate}>\n                    </AddStock>}\n\n                <Row>\n                    <Col xl=\"10\">\n                        <Card>\n                            <CardBody>\n                                <Row>\n                                    <Col sm=\"3\">\n                                    <Label for=\"status\">Search</Label>\n                                        <Input\n                                            name=\"search\"\n                                            id=\"search\"\n                                            type=\"text\"\n                                            placeholder=\"Enter person name,phone numeber or company\"\n                                            onChange={this.handleSearchInput}\n                                            value={search}\n                                        ></Input>\n                                    </Col>\n                                    <Col sm=\"2\">\n                                        <Label for=\"status\">Status</Label>\n                                        <select name=\"selectedStatus\" onChange={this.handleInputChange} value={selectedStatus}>\n                                            {statusDropDownOptions.map(s=><option value={s.value}>{s.key}</option>)}\n                                        </select>\n                                    </Col>\n                                    <Col className=\"text-align-right\">\n                                    <span className=\"download-link\" onClick={this.openAddStockModal.bind(this, null)}>Add Stock</span>&nbsp;&nbsp;\n                                        {/* <span className=\"download-link\" onClick={this.openUploadContactModal}>Upload Contact</span> */}\n                                    </Col>\n                                </Row>\n\n                                <Table className=\"width-100 margin-top-10\">\n                                    <thead>\n                                        <tr>\n                                            <th>Stock Id</th>\n                                            <th>Status</th>\n                                            <th>Weight</th>\n                                            <th>Buy Contact</th>\n                                            <th>Buy Date</th>\n                                            <th>Buy Price</th>\n                                            <th>Sell Contact</th>\n                                            <th>Sell Date</th>\n                                            <th>Sell Price</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {prepareRows}\n                                    </tbody>\n                                </Table>\n                                {<Pagination\n                                    margin={2}\n                                    page={page}\n                                    pageSize={pageSize}\n                                    totalRecords={totalRecords}\n                                    onPageChange={this.handlePageChange}\n                                ></Pagination>}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                   \n                </Row>\n\n            </div>\n        );\n    }\n}\n\nexport default Stocks;","import { request,csvUploadRequest } from './request';\nimport { routes } from '../constants/constant.routes';\n\nconst API_URL = routes.API_URL;\n\nexport default class TransactionService {\n  static addTransaction(contactObj) {\n    return request('POST', `${API_URL}${routes.ADD_TRANSACTION}`, null, contactObj, null)\n  }\n\n  static updateTransaction(contactObj) {\n    return request('POST', `${API_URL}${routes.UPDATE_TRANSACTION}`, null, contactObj, null)\n  }\n\n  static getTransactions(page, pageSize, search,isDownload,body,personId,mode) {\n    let qp = `?`;\n    if (page) {\n      qp += `page=${page}&`\n    }\n    if (pageSize) {\n      qp += `limit=${pageSize}&`\n    }\n    if (search) {\n      qp += `search=${search}&`\n    }\n    if (mode) {\n      qp += `mode=${mode}&`\n    }\n    if (isDownload) {\n      qp += `downloadExcel=${isDownload}&`\n    }\n    if (personId) {\n      qp += `u=${personId}&`\n    }\n    return request('POST', `${API_URL}${routes.GET_TRANSACTIONS}${qp}`, null, body, null)\n  }\n\n  static getCloseAmountToday() {\n    return request('GET', `${API_URL}${routes.GET_CLOSE_AMOUNT_TODAY}`, null, null, null)\n  }\n} ","import React, { Component, Fragment } from 'react';\nimport { Modal, ModalHeader, ModalFooter, ModalBody, Button, Row, Col, Input, Form, FormGroup, Label, InputGroup } from 'reactstrap';\nimport DatePicker from 'react-datepicker';\n\nimport CustomSpinner from '../components/CustomSpinner/CustomSpinner';\nimport SearchContact from '../components/SearchContact/SearchContact';\n\nimport TransactionService from '../services/TransactionService';\nimport ContactService from '../services/ContactService';\nimport Validation from '../services/Validation';\nimport ModalService from '../services/ModalService';\n\nlet isLoading = false;\n\nlet defaultControls = {\n  transactionDate: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null\n  },\n  // last_name: {\n  //   value: '',\n  //   valid: null,\n  //   touched: false,\n  //   nullValue: null\n  // },\n  person: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  type: {\n    value: 'credit',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  mode: {\n    value: 'cash',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  note: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  },\n  amount: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null,\n    invalidPassword: null\n  } \n}\n\nexport default class AddTransaction extends Component {\n\n  state = {\n    contacts:[],\n    controls: JSON.parse(JSON.stringify(defaultControls)),\n    isLoading: false,\n    personName :null, \n    search:null,\n    showPersonList : false\n  }\n\n  constructor() {\n    super();\n    this.container = React.createRef();\n  }\n\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n    const { transactionData } = this.props;\n    console.log(\"transactionData\", transactionData);\n    this.getContacts();\n    if (transactionData) {\n      const { controls } = this.state;\n      const { \n        transactionDate, type, mode, note, amount, person\n      } = controls;\n      \n      transactionDate.value = new Date(transactionData.transaction_date);\n      if(transactionData.credit){\n        type.value = 'credit';\n        amount.value = transactionData.credit;\n      } \n      if(transactionData.debit) {\n        type.value = 'debit';\n        amount.value = transactionData.debit;\n      }\n      mode.value = transactionData.mode;\n      note.value = transactionData.note;\n      person.value = transactionData.person_id;\n\n      this.setState({ controls });\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  handleInputChange = (e) => {\n    const controlName = e.target.name;\n    const controlValue = e.target.value;\n    const { controls } = this.state;\n    controls[controlName].value = controlValue;\n    controls[controlName].touched = true;\n    this.setState({ controls });\n    // this.handleValidation();\n  }\n\n\n  handleDateChange = (controlName, e) => {\n    console.log(\"e\", e);\n    console.log(\"controlName\", controlName);\n    const { controls } = this.state;\n    let dateControl = controls[controlName];\n    dateControl.value = e;\n    dateControl.touched = true;\n    this.setState({ controls });\n    // this.handleValidation();\n  }\n\n  handleValidation = (firstTime, isSubmit) => {\n    let { controls, isFormValid } = this.state;\n    let { \n      transactionDate, type, mode, note, amount, person\n    } = controls;\n\n    if (firstTime === true || person.touched === true || isSubmit) {\n      person = Validation.notNullValidator(person);\n      person.valid = !(person.nullValue);\n      if (((isSubmit || person.touched) && person.valid === false)) {\n        person.showErrorMsg = true;\n      } else {\n        person.showErrorMsg = false;\n      }\n    }\n\n    if (firstTime === true || type.touched === true || isSubmit) {\n      type = Validation.notNullValidator(type);\n      type.valid = !(type.nullValue);\n      if (((isSubmit || type.touched) && type.valid === false)) {\n        type.showErrorMsg = true;\n      } else {\n        type.showErrorMsg = false;\n      }\n    }\n\n\n    if (firstTime === true || mode.touched === true || isSubmit) {\n      mode = Validation.notNullValidator(mode);\n      mode.valid = !(mode.nullValue);\n      if (((isSubmit || mode.touched) && mode.valid === false)) {\n        mode.showErrorMsg = true;\n      } else {\n        mode.showErrorMsg = false;\n      }\n    }\n\n    if (firstTime === true || amount.touched === true || isSubmit) {\n      amount = Validation.notNullValidator(amount);\n      amount.valid = !(amount.nullValue);\n      if (((isSubmit || amount.touched) && amount.valid === false)) {\n        amount.showErrorMsg = true;\n      } else {\n        amount.showErrorMsg = false;\n      }\n    }\n\n    \n\n    if (\n      type.valid === true &&\n      mode.valid === true && \n      amount.valid === true &&  \n      person.valid === true\n      // last_name.valid === true &&\n      // email.valid === true &&\n      // mobile1.valid === true &&\n      // mobile2.valid === true &&\n      // mobile3.valid === true &&\n      // mobile4.valid === true &&\n      // address.valid === true &&\n      // living.valid === true &&\n      // income.valid === true &&\n      // family_members.valid === true &&\n      // additional_detail.valid === true \n    ) {\n      isFormValid = true;\n    } else {\n      isFormValid = false;\n    }\n    console.log(\"isFormValid\",isFormValid);\n    console.log(\"controls\", controls);\n    // console.log('controls', controls);\n    // console.log('isFormValid', isBusinessFormValid);\n    this.setState({ controls, isFormValid });\n    return isFormValid;\n  }\n\n  getContacts = () => {\n    const { personName } =this.state;\n    ContactService.getContacts(1,1000000,personName,false)\n      .then(data=>{\n        console.log(\"data\",data);\n        if(data.data && data.data.data && data.data.data.contacts){\n          this.setState({ contacts : data.data.data.contacts })\n        }\n      })\n      .catch(e=>{\n        console.log(\"e\",e);\n      })\n  }\n\n\n  // handlePersonSearchChange = (e) => {\n  //   let { personName, controls } = this.state;\n  //   const { person } = controls;\n  //   personName = e.target.value;\n  //   person.value = null;\n  //   // const value = e.target.value;\n  //   this.setState({ personName,controls  },()=>{\n  //     this.getContacts();\n  //   });\n  // }\n\n  // openPersonToggle = () => {\n  //   let { showPersonList } = this.state;\n  //   showPersonList = true;\n  //   this.setState({\n  //     showPersonList\n  //   });\n  // }\n\n  // onSelectPerson = (contact) => {\n  //   let { personName, showPersonList, controls } = this.state;\n  //   const { person } = controls;\n  //   const { name, uuid } = contact;\n  //   personName = name;\n  //   person.value = uuid;\n  //   showPersonList = false;\n  //   this.setState({ personName, controls, showPersonList });\n  // }\n\n  saveDetail = (isEdit) => {\n    const { controls } = this.state;\n    const { transactionDate, type, mode, amount, note, person } = controls;   \n    const { transactionData } = this.props;\n    if (isLoading === true) {\n      return;\n    }\n    const isFormValid = this.handleValidation(false, true);\n    if (isFormValid === false) {\n      return;\n    }\n    console.log(\"controls\", controls);\n    const { contactData } = this.props;\n    let transactionDateVar = null;\n    if(transactionDate.value){\n      transactionDate.value.setHours(5,30,0,0);\n      console.log(\"transactionDate\",transactionDate);\n      transactionDateVar = transactionDate.value.toISOString();\n    }\n    let obj = {\n      transactionDate: transactionDateVar,\n      type: type.value,\n      mode: mode.value,\n      amount: amount.value,\n      note: note.value,\n      personId: person.value\n    }\n    \n    if(isEdit === true){\n      obj.id = transactionData.uuid\n    }\n\n    this.setState({ isLoading: true });\n    isLoading = true;\n    let functionToCall = null;\n    if(isEdit === true){\n      functionToCall = TransactionService.updateTransaction(obj);\n    } else {\n      functionToCall = TransactionService.addTransaction(obj);\n    }\n\n    functionToCall\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        if (message) {\n          ModalService.openAlert('Person', message, 'success');\n        }\n        this.setState({ isLoading: false });\n        isLoading = false;\n        this.props.closeModal(true);\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        isLoading = false;\n      })\n  }\n\n  handleClickOutside = event => {\n      if (this.container.current && !this.container.current.contains(event.target)) {\n        // if (!this.container.current ) {\n        console.log(\"setting to hide\")\n        this.setState({\n          showPersonList: false,\n        });\n      }\n  }\n  \n  getSelectedPersonControl = (personControl) => {\n    const { controls } = this.state;\n    controls.person = personControl;\n    console.log(\"person\",controls);\n    this.setState({ controls });\n  }\n\n  render() {\n    const { transactionData } = this.props;\n    const { controls,isLoading, contacts, personName, personUuid, showPersonList } = this.state;\n    const { transactionDate, mode, type, amount, note, person } = controls;\n\n\n    return <Modal isOpen={this.props.show} toggle={this.props.closeModal} >\n      <ModalHeader toggle={this.props.closeModal}>Add Transaction</ModalHeader>\n      <ModalBody>\n        {isLoading && <CustomSpinner></CustomSpinner>}\n        <Form>\n          <Row>\n          <Col>\n                <FormGroup>\n                <Label for=\"password\" className=\"field-title\">Transaction Date</Label>\n                <div>\n                  <Label className=\"width-100\"\n                    onClick={e => this.transactionDate.state.open && e.preventDefault()}\n                  >\n                    <InputGroup>\n                      <DatePicker className={\"form-control calendar-input\"}\n                        selected={transactionDate.value}\n                        onChange={this.handleDateChange.bind(this, 'transactionDate')}\n                        showMonthDropdown\n                        ref={r => this.transactionDate = r}\n                        // shouldCloseOnSelect={true}\n                        dateFormat=\"dd/MM/yyyy\"\n                        showYearDropdown\n                        placeholderText=\"Select\"\n                        shouldCloseOnSelect\n                        dropdownMode=\"select\"\n                      />\n                    </InputGroup>\n                  </Label>\n                  {transactionDate.showErrorMsg && <div className=\"error\">\n                    {/* {EMPTY_BANNER_END_DATE} */}\n                  </div>}\n                </div>\n              </FormGroup>\n            </Col>\n            \n          </Row>\n          <Row >\n            <Col>\n              <Label for=\"person\">Contact Name</Label>\n              <SearchContact \n                ref={this.container} \n                person={person}\n                getSelectedPersonControl={this.getSelectedPersonControl}\n              ></SearchContact>\n              {person.showErrorMsg && <div className=\"error\">* Please select person name</div>}\n\n                {/* <div ref={this.container}>\n                  <Label for=\"status\">Contact Name</Label>\n                  <Input type=\"text\" name=\"person\" autoComplete=\"off\" value={personName} onChange={this.handlePersonSearchChange.bind(this)}\n                    onFocus={this.openPersonToggle.bind(this)}></Input>\n                  {person.showErrorMsg && <div className=\"error\">* Please select person name</div>}\n                  {showPersonList &&\n                    <div className=\"p-list\">\n                      {contacts.map((c, i) =>\n                        <Button\n                          className=\"list-button\"\n                          onClick={this.onSelectPerson.bind(this, c)}\n                        >\n                          {c.name}\n                        </Button>\n                      )}\n                    </div>\n                  }\n                </div> */}\n\n              </Col>\n          </Row>\n          <Row className=\"margin-top-5\">\n            <Col>\n              <FormGroup>\n                <Label for=\"type\">Type</Label>\n                <div>\n                  <select name=\"type\" onChange={this.handleInputChange} value={type.value}>\n                    <option value='credit'>Credit</option>\n                    <option value='debit'>Debit</option>\n                  </select>\n                  {type.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n                </div>\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"mode\">Mode</Label>\n                <div>\n                  <select name=\"mode\" onChange={this.handleInputChange} value={mode.value}>\n                    <option value='cash'>Cash</option>\n                    <option value='check'>Check</option>\n                    <option value='stock'>Stock</option>\n                  </select>\n                  {mode.showErrorMsg && <div className=\"error\">* Please enter phone number</div>}\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"amount\">Amount</Label>\n                <Input\n                  type=\"number\"\n                  id=\"amount\"\n                  name=\"amount\"\n                  value={amount.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {amount.showErrorMsg && <div className=\"error\">* Please enter valid amount</div>}\n\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"note\">Note</Label>\n                <Input\n                  type=\"text\"\n                  id=\"note\"\n                  name=\"note\"\n                  value={note.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {note.showErrorMsg && <div className=\"error\">* Please enter valid company name</div>}\n\n              </FormGroup>\n            </Col>\n          </Row>\n          \n          \n          <Button onClick={transactionData ? this.saveDetail.bind(this,true): this.saveDetail}>\n            Save\n          </Button>\n        </Form>\n      </ModalBody>\n\n    </Modal>\n  }\n}","import React, { Component } from 'react';\nimport { Row, Col, Card, CardBody, Table, Form, FormGroup, Label, Input, Button } from 'reactstrap';\nimport Ionicon from 'react-ionicons';\n\nimport Pagination from '../../components/Pagination/Pagination';\n\n\nimport TransactionService from '../../services/TransactionService';\nimport Validation from '../../services/Validation';\n\nimport AddContact from '../../modal/AddContact';\nimport UploadContact from '../../modal/UploadContactModal';\nimport AddTransaction from '../../modal/AddTransaction';\n\nimport {downlodFile,formatDate} from '../../utils';\nimport './Transactions.css';\n\nconst pageSize = 10;\n\n\nclass Transactions extends Component {\n    state = {\n        transactions: [],\n        downloadExcelFields:['all'],\n        selectedContactToUpdate: null,\n        selectedTransactionToUpdate: null,\n        isAddContactModalOpen: false,\n        isAddTransactionModalOpen: false,\n        isUploadContactModalOpen: false,\n        page: 1,\n        totalRecords: 0,\n        search: null,\n        controls:{\n            downloadCheckbox: {\n                value: ['all'],\n                valid: null,\n                touched: false,\n                required: true,\n                showErrorMsg: false\n              },\n        },\n        mode:'all'\n    }\n\n    componentDidMount() {   \n        this.getTransactions();\n    }\n\n    handleInputChange = (e) => {\n        const controlName = e.target.name;\n        const controlValue = e.target.value;\n        let stateValue = controlValue;\n        let obj = {\n            page:1\n        };\n        obj[controlName]=stateValue;\n        console.log(\"obj\",obj);\n        this.setState(obj,()=>{\n            this.getTransactions()\n        });\n        // this.handleValidation();\n    }\n\n    getTransactions = (isDownload) => {\n        let { controls, page, search,mode }=this.state;\n        console.log(\"this.props\",this.props);\n        let personId = null;\n        if(this.props.location && this.props.location.contactData){\n            personId = this.props.location.contactData.uuid;\n        }\n        let {downloadCheckbox} = controls;\n        let body={\n            downloadExcelFields:downloadCheckbox.value\n        }\n        TransactionService.getTransactions(page, pageSize, search,isDownload,body,personId,mode)\n            .then(data => {\n                console.log(data.data);\n                if(isDownload){\n                    if(data.data.data && data.data.data.file){\n                        downlodFile(data.data.data.file);\n                    }\n                } else {\n                    const transactions = data.data.data.transaction;\n                    const totalRecords = data.data.data.count;\n                    this.setState({ transactions, totalRecords });\n                }      \n            })\n            .catch(e => {\n\n            })\n    }\n\n    openAddContactModal = (contactData) => {\n        this.setState({ isAddContactModalOpen: true, selectedContactToUpdate: contactData });\n    }\n    closeAddContactModal = (reload) => {\n        console.log(\"closing modal\");\n        this.setState({ isAddContactModalOpen: false, selectedContactToUpdate: null });\n        if (reload) {\n            this.getContacts(this.state.page);\n        }\n    }\n\n    openAddTransactionModal = (contactData) => {\n        this.setState({ isAddTransactionModalOpen: true, selectedTransactionToUpdate: contactData });\n    }\n    \n    closeAddTransactionModal = (reload) => {\n        console.log(\"closing modal\");\n        this.setState({ isAddTransactionModalOpen: false, selectedTransactionToUpdate: null });\n        if (reload) {\n            this.getTransactions();\n        }\n    }\n\n    openUploadContactModal = () => {\n        this.setState({ isUploadContactModalOpen: true });\n    }\n    closeUploadContactModal = (reload) => {\n        this.setState({ isUploadContactModalOpen: false });\n        if (reload) {\n            this.getContacts(this.state.page);\n        }\n    }\n\n    handlePageChange = (page) => {\n        this.setState({ page: page },() => {\n            this.getTransactions();\n        });\n    }\n\n    handleSearchInput = (e) => {\n        const value = e.target.value;\n        this.setState({ page:1, search: value },()=>{\n            this.getTransactions();\n        })\n    }\n\n    downloadExcel=()=>{\n        this.getContacts(this.state.page,this.state.search,true);\n    }\n\n    handledownloadCheckboxInput = (e) => {\n        const { controls } = this.state;\n        const { downloadCheckbox } = controls;\n        let checkBoxValue = downloadCheckbox.value;\n        let valueIndex = checkBoxValue.indexOf(e);\n        if (valueIndex < 0) {\n          if ((e !== 'all' && checkBoxValue && checkBoxValue[0] === 'all') || e === 'all') {\n            checkBoxValue = [e];\n          } else {\n            checkBoxValue.push(e);\n          }\n        } else {\n          checkBoxValue.splice(valueIndex, 1);\n        }\n        downloadCheckbox.value = checkBoxValue;\n        \n        this.setState({ controls })\n      }\n\n    render() {\n        const { transactions, selectedContactToUpdate, isAddContactModalOpen,\n             page, totalRecords, search,controls,\n             isUploadContactModalOpen,isAddTransactionModalOpen,selectedTransactionToUpdate,mode\n            } = this.state;\n        const {downloadCheckbox}=controls;\n        const prepareRows = transactions.map(t => <tr>\n            <td>{t.name}</td>\n            <td>{formatDate(t.transaction_date)}</td>\n            <td>\n                <div>{t.credit}</div>\n                \n            </td>\n            <td>{t.debit}</td>\n            <td>{t.mode}</td>\n            <td>{t.note}</td>\n            <td>\n              {t.mode !== 'stock' && <Ionicon onClick={this.openAddTransactionModal.bind(this, t)} icon=\"md-create\" fontSize=\"16px\" color=\"#fdbb1f\" />}\n            </td>\n        </tr>)\n        return (\n            <div id=\"contact\">\n                {/* {isAddContactModalOpen &&\n                    <AddContact\n                        show={isAddContactModalOpen}\n                        closeModal={this.closeAddContactModal}\n                        contactData={selectedContactToUpdate}>\n                    </AddContact>}\n\n                    {isUploadContactModalOpen &&\n                    <UploadContact\n                        show={isUploadContactModalOpen}\n                        closeModal={this.closeUploadContactModal}\n                        >\n                    </UploadContact>} */}\n\n                    {isAddTransactionModalOpen &&\n                    <AddTransaction\n                        show={isAddTransactionModalOpen}\n                        closeModal={this.closeAddTransactionModal}\n                        transactionData={selectedTransactionToUpdate}>\n                    </AddTransaction>}\n                <Row>\n                    <Col xl=\"12\">\n                        <Card>\n                            <CardBody>\n                                <Row>\n                                    <Col sm=\"3\">\n                                    <Label for=\"mode\">Search</Label>\n                                        <Input\n                                            name=\"search\"\n                                            id=\"search\"\n                                            type=\"text\"\n                                            placeholder=\"Enter person name,phone numeber or company\"\n                                            onChange={this.handleSearchInput}\n                                            value={search}\n                                        ></Input>\n                                    </Col>\n                                    <Col sm=\"2\">\n                                        <Label for=\"mode\">Mode</Label>\n                                        <div>\n                                            <select name=\"mode\" onChange={this.handleInputChange} value={mode}>\n                                                <option value='all'>All</option>\n                                                <option value='cash'>Cash</option>\n                                                <option value='check'>Check</option>\n                                                <option value='stock'>Stock</option>\n                                            </select>\n                                        </div>\n                                    </Col>\n                                    <Col className=\"text-align-right\">\n                                    <span className=\"download-link\" onClick={this.openAddTransactionModal.bind(this, null)}>Add Transaction</span>&nbsp;&nbsp;\n                                    {/* <span className=\"download-link\" onClick={this.openAddContactModal.bind(this, null)}>Add Contact</span>&nbsp;&nbsp; */}\n                                        {/* <span className=\"download-link\" onClick={this.openUploadContactModal}>Upload Contact</span> */}\n                                    </Col>\n                                </Row>\n\n                                <Table className=\"width-100 margin-top-10\">\n                                    <thead>\n                                        <tr>\n                                            <th>Name</th>\n                                            <th>Date</th>\n                                            <th>Credit</th>\n                                            <th>Debit</th>\n                                            <th>Mode</th>\n                                            <th>Note</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {prepareRows}\n                                    </tbody>\n                                </Table>\n                                {<Pagination\n                                    margin={2}\n                                    page={page}\n                                    pageSize={pageSize}\n                                    totalRecords={totalRecords}\n                                    onPageChange={this.handlePageChange}\n                                ></Pagination>}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                   \n                </Row>\n\n            </div>\n        );\n    }\n}\n\nexport default Transactions;","import { request,csvUploadRequest } from './request';\nimport { routes } from '../constants/constant.routes';\nconst {\n  ADD_OPENING_BALANCE,\n  UPDATE_OPENING_BALANCE,\n  GET_TODAY_OPENING_BALANCE\n} = routes;\n\nconst API_URL = routes.API_URL;\n\nexport default class OpeningBalanceService {\n  static addOpeningBalance(obj) {\n    return request('POST', `${API_URL}${ADD_OPENING_BALANCE}`, null, obj, null)\n  }\n\n  static updateOpeningBalance(obj) {\n    return request('POST', `${API_URL}${UPDATE_OPENING_BALANCE}`, null, obj, null)\n  }\n\n  static getTodayOpeningBalance(obj) {\n    return request('GET', `${API_URL}${GET_TODAY_OPENING_BALANCE}`, null, null, null)\n  }\n}\n","import { request,csvUploadRequest } from './request';\nimport { routes } from '../constants/constant.routes';\nimport { objectToQuerystring } from '../utils';\n\nconst API_URL = routes.API_URL;\n\nconst { GET_STOCK_AND_AMT_WITH_DALAL, GET_ACCOUNT_SUMMARY } = routes;\n\nexport default class DashboardService {\n  static getStockAndAmtWithDalal(obj) {\n    const query = objectToQuerystring(obj);\n    return request('GET', `${API_URL}${GET_STOCK_AND_AMT_WITH_DALAL}${query}`, null,null , null)\n  }\n\n  static getAccountSummary(obj) {\n    const query = objectToQuerystring(obj);\n    return request('GET', `${API_URL}${GET_ACCOUNT_SUMMARY}${query}`, null,null , null)\n  }\n}","import React, { Component, Fragment } from 'react';\nimport { Modal, ModalHeader, ModalFooter, ModalBody, Button, Row, Col, Input, Form, FormGroup, Label } from 'reactstrap';\n\nimport CustomSpinner from '../components/CustomSpinner/CustomSpinner';\n\nimport OpeningBalanceService from '../services/OpeningBalanceService';\nimport Validation from '../services/Validation';\nimport ModalService from '../services/ModalService';\n\nlet isLoading = false;\n\nlet defaultControls = {\n  amount: {\n    value: '',\n    valid: null,\n    touched: false,\n    nullValue: null\n  }\n}\nexport default class AddContact extends Component {\n\n  state = {\n    controls: JSON.parse(JSON.stringify(defaultControls)),\n    isLoading: false\n  }\n\n  constructor() {\n    super();\n  }\n\n\n  componentDidMount() {\n    const { openingBalanceData } = this.props;\n    console.log(\"openingBalanceData\", openingBalanceData);\n    if (openingBalanceData) {\n      const { controls } = this.state;\n      const { amount } = controls;\n      \n      amount.value = openingBalanceData.amount;\n      \n      this.setState({ controls });\n    }\n  }\n\n  handleInputChange = (e) => {\n    const controlName = e.target.name;\n    const controlValue = e.target.value;\n    const { controls } = this.state;\n    controls[controlName].value = controlValue;\n    controls[controlName].touched = true;\n    this.setState({ controls });\n    // this.handleValidation();\n  }\n\n  handleValidation = (firstTime, isSubmit) => {\n    let { controls, isFormValid } = this.state;\n    let { \n      amount\n    } = controls;\n\n    if (firstTime === true || amount.touched === true || isSubmit) {\n      amount = Validation.notNullValidator(amount);\n      amount.valid = !(amount.nullValue);\n      if (((isSubmit || amount.touched) && amount.valid === false)) {\n        amount.showErrorMsg = true;\n      } else {\n        amount.showErrorMsg = false;\n      }\n    }   \n\n    if (\n      amount.valid === true \n    ) {\n      isFormValid = true;\n    } else {\n      isFormValid = false;\n    }\n    console.log(\"isFormValid\",isFormValid);\n    console.log(\"controls\", controls);\n    \n    this.setState({ controls, isFormValid });\n    return isFormValid;\n  }\n\n  saveDetail = () => {\n    const { controls } = this.state;\n    const { amount } = controls;   \n\n    if (isLoading === true) {\n      return;\n    }\n    const isFormValid = this.handleValidation(false, true);\n    if (isFormValid === false) {\n      return;\n    }\n    console.log(\"controls\", controls);\n    let obj = {\n      amount: amount.value\n    }\n    this.setState({ isLoading: true });\n    isLoading = true;\n    OpeningBalanceService.addOpeningBalance(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        if (message) {\n          ModalService.openAlert('Opening Balance', message, 'success');\n        }\n        this.setState({ isLoading: false });\n        isLoading = false;\n        this.props.closeModal(true);\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        isLoading = false;\n      })\n  }\n\n  updateOpeningBalance = () => {\n    const { openingBalanceData } = this.props;\n    const { controls } = this.state;\n    const { amount } = controls;   \n    const isFormValid = this.handleValidation(false, true);\n    if (isFormValid === false) {\n      return;\n    }\n    console.log(\"controls\", controls);\n    let obj = {\n      amount: amount.value,\n      openingBalanceId: openingBalanceData.uuid\n    }\n    this.setState({ isLoading: true });\n    OpeningBalanceService.updateOpeningBalance(obj)\n      .then(data => {\n        const message = data.data && data.data.message ? data.data.message : null;\n        this.setState({ isLoading: false });\n        if (message) {\n          ModalService.openAlert('Opening Balance', message, 'success');\n        }\n        this.props.closeModal(true);\n        // this.getPerson();\n        // this.resetControls();\n      })\n      .catch(e => {\n        this.setState({ isLoading: false });\n        const message = e.response && e.response.data && e.response.data.message ? e.response.data.message : 'Something went wrong';\n        ModalService.openAlert('Person', message, 'error');\n      })\n  }\n\n  render() {\n    const { openingBalanceData } = this.props;\n    const { controls,isLoading } = this.state;\n    const { amount } = controls;\n\n\n    return <Modal isOpen={this.props.show} toggle={this.props.closeModal} >\n      <ModalHeader toggle={this.props.closeModal}>Add Opening Balance</ModalHeader>\n      <ModalBody>\n        {isLoading && <CustomSpinner></CustomSpinner>}\n        <Form>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"amount\">Amount</Label>\n                <Input\n                  type=\"text\"\n                  id=\"amount\"\n                  name=\"amount\"\n                  value={amount.value}\n                  onChange={this.handleInputChange}\n                ></Input>\n                {amount.showErrorMsg && <div className=\"error\">* Please enter amount</div>}\n\n              </FormGroup>\n            </Col>\n\n          </Row>\n          <Button onClick={openingBalanceData ? this.updateOpeningBalance: this.saveDetail}>\n            Save\n          </Button>\n        </Form>\n      </ModalBody>\n\n    </Modal>\n  }\n}","import React, { Component } from 'react';\nimport { Card, CardBody, Row, Col,Input, Table } from 'reactstrap';\nimport Ionicon from 'react-ionicons';\n\nimport Pagination from '../../components/Pagination/Pagination';\n\nimport OpeningBalanceService from '../../services/OpeningBalanceService';\nimport TransactionService from '../../services/TransactionService';\nimport DashboardService from '../../services/DashboardService';\n\nimport AddStock from '../../modal/AddStock';\nimport AddOpeningBalance from '../../modal/AddOpeningBalance';\nimport AddTransaction from '../../modal/AddTransaction';\n\nclass Dashboard extends Component {\n  state = {\n    isAddOpeningBalanceModalOpen: false,\n    isAddOpeningBalanceButtonVisible:false,\n    openingBalanceData:{},\n    selectedOpeningBalanceToUpdate: null,\n    closingBalanceData:{},\n    dalalData: [],\n    searchDalal: null,\n    pageDalal: 1,\n    pageSizeDalal: 10,\n    totalDalals:0,\n    pageAccountSummary: 1,\n    pageSizeAccountSummary: 10,\n    totalAccountSummary:0,\n    searchAccountSummary: null,\n    accountSummaryData:[],\n    isAddStockModalOpen:false,\n    isAddTransactionModalOpen: false,\n  }\n\n  componentDidMount(){\n    this.getTodayOpeningBalance();\n    this.getTodayCloseAmount();\n    this.getStockAndAmtWithDalal();\n    this.getAccountSummary();\n  }\n\n  openAddOpeningBalanceModal = (OpeningBalanceData) => {\n    this.setState({ isAddOpeningBalanceModalOpen: true, selectedOpeningBalanceToUpdate:OpeningBalanceData });\n  }\n  \n  closeAddOpeningBalanceModal = (reload) => {\n    this.setState({ isAddOpeningBalanceModalOpen: false,selectedOpeningBalanceToUpdate:null });\n    if (reload) {\n        this.getTodayOpeningBalance();\n    }\n  }\n\n  getTodayOpeningBalance = () => {\n    OpeningBalanceService.getTodayOpeningBalance()\n      .then(data=>{\n        if(data.data.data){\n          this.setState({openingBalanceData: data.data.data });\n        } else {\n          this.setState({ isAddOpeningBalanceButtonVisible:true });\n        }\n        console.error(\"data\",data);\n      })\n      .catch(e=>{\n        console.error(\"e\",e);\n      })\n  }\n\n  getTodayCloseAmount = () => {\n    TransactionService.getCloseAmountToday()\n    .then(data=>{\n      if(data.data.data){\n        this.setState({ closingBalanceData: data.data.data });\n      }\n    })\n    .catch(e=>{\n\n    })\n  }\n\n  getStockAndAmtWithDalal = () => {\n    const { pageDalal, pageSizeDalal, searchDalal }=this.state;\n    const obj={\n      page: pageDalal,\n      limit: pageSizeDalal,\n      search: searchDalal\n    }\n    DashboardService.getStockAndAmtWithDalal(obj)\n    .then(data=>{\n      if(data.data.data && data.data.data.data){\n        this.setState({ dalalData: data.data.data.data });\n      }\n      if(data.data.data && data.data.data.count){\n        this.setState({ totalDalals: data.data.data.count });\n      }\n    })\n    .catch(e=>{\n\n    })\n  }\n\n  getAccountSummary = () => {\n    const { pageAccountSummary, pageSizeAccountSummary, searchAccountSummary }=this.state;\n    const obj={\n      page: pageAccountSummary,\n      limit: pageSizeAccountSummary,\n      search: searchAccountSummary\n    }\n    DashboardService.getAccountSummary(obj)\n    .then(data=>{\n      if(data.data.data && data.data.data.data){\n        this.setState({ accountSummaryData: data.data.data.data });\n      }\n      if(data.data.data && data.data.data.count){\n        this.setState({ totalAccountSummary: data.data.data.count });\n      }\n    })\n    .catch(e=>{\n\n    })\n  }\n\n  handleSearchDalalInput = (e) => {\n    const value = e.target.value;\n    this.setState({ pageDalal:1, searchDalal: value },()=>{;\n      this.getStockAndAmtWithDalal();\n    })\n  }\n\n  handlePageChange = (page) => {\n    this.setState({ pageDalal: page },()=>{\n      this.getStockAndAmtWithDalal();\n    });\n  }\n\n  handleSearchAccountSummaryInput = (e) => {\n    const value = e.target.value;\n    this.setState({ pageAccountSummary:1, searchAccountSummary: value },()=>{;\n      this.getAccountSummary();\n    })\n  }\n\n  handleAccountSummaryPageChange = (page) => {\n    this.setState({ pageAccountSummary: page },()=>{\n      this.getAccountSummary();\n    });\n  }\n\n  openAddStockModal = (stockData) => {\n    this.setState({ isAddStockModalOpen: true, selectedStockToUpdate: stockData });\n  }\n  \n  closeAddStockModal = (reload) => {\n    console.log(\"closing modal\");\n    this.setState({ isAddStockModalOpen: false, selectedStockToUpdate: null });\n    // if (reload) {\n    //     this.getStocks(this.state.page);\n    // }\n  }\n\n  openAddTransactionModal = (contactData) => {\n    this.setState({ isAddTransactionModalOpen: true, selectedTransactionToUpdate: contactData });\n  }\n\n  closeAddTransactionModal = (reload) => {\n    console.log(\"closing modal\");\n    this.setState({ isAddTransactionModalOpen: false, selectedTransactionToUpdate: null });\n    // if (reload) {\n    //     this.getTransactions();\n    // }\n  }\n\n  \n  render(){\n    const { \n      isAddOpeningBalanceModalOpen,isAddOpeningBalanceButtonVisible,\n      openingBalanceData ={}, selectedOpeningBalanceToUpdate,\n      closingBalanceData={}, dalalData=[], searchDalal, pageDalal, pageSizeDalal, searchAccountSummary,\n      totalDalals, accountSummaryData, pageAccountSummary, pageSizeAccountSummary, totalAccountSummary,\n      isAddStockModalOpen, isAddTransactionModalOpen\n    } = this.state;\n    const { amount, uuid } = openingBalanceData;\n    const { total, openingBalance } = closingBalanceData;\n    return <div>\n      {\n        isAddOpeningBalanceModalOpen &&\n        <AddOpeningBalance\n          show={isAddOpeningBalanceModalOpen}\n          closeModal={this.closeAddOpeningBalanceModal}\n          openingBalanceData={selectedOpeningBalanceToUpdate}\n        >\n        </AddOpeningBalance>\n      }\n\n      {isAddStockModalOpen &&\n        <AddStock\n            show={isAddStockModalOpen}\n            closeModal={this.closeAddStockModal}\n            // stockData={selectedStockToUpdate}\n          >\n        </AddStock>\n      }\n\n      {isAddTransactionModalOpen &&\n        <AddTransaction\n            show={isAddTransactionModalOpen}\n            closeModal={this.closeAddTransactionModal}\n            // transactionData={selectedTransactionToUpdate}\n          >\n        </AddTransaction>\n      }\n       <Row>\n        <Col sm=\"3\">\n          <Card>\n            <CardBody>\n              {!isAddOpeningBalanceButtonVisible &&\n              <>\n                \n                <Row>\n                  <Col sm=\"10\">Opening Balance : {amount}</Col>\n                  <Col className=\"text-align-right\">\n                    <div onClick={this.openAddOpeningBalanceModal.bind(this,openingBalanceData)}>\n                    <Ionicon icon=\"md-create\" fontSize=\"16px\" color=\"#fdbb1f\" />\n                </div>\n                  </Col>\n                </Row>\n                <div> </div>\n              </>}\n\n              {isAddOpeningBalanceButtonVisible &&\n              <>\n                <div onClick={this.openAddOpeningBalanceModal.bind(this,null)}>Add Opening Balance</div>\n              </>}\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm=\"3\">\n          <Card>\n            <CardBody>\n              {/* <div>Opening Balance : {openingBalance}</div> */}\n              <div>Current Balance : {total}</div>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm=\"6\" className=\"text-align-right\">\n          {/* <Card>\n            <CardBody> */}\n              {/* <div>Opening Balance : {openingBalance}</div> */}\n              <button onClick={this.openAddStockModal.bind(this,null)}>Add Stock</button>&nbsp;\n              <button onClick={this.openAddTransactionModal.bind(this,null)}>Add Transaction</button>\n\n            {/* </CardBody>\n          </Card> */}\n        </Col>\n      </Row>\n      <Row>\n        <Col sm=\"6\">\n          <Card className=\"width-100 margin-top-10\">\n            <CardBody>\n            <Row>\n              <Col>\n                <h4>Dalal Data</h4>\n              </Col>\n            </Row>\n            <Row>\n              <Col sm=\"6\">\n                <Input\n                  name=\"search\"\n                  id=\"search\"\n                  type=\"text\"\n                  placeholder=\"Enter person name,phone numeber or company\"\n                  onChange={this.handleSearchDalalInput}\n                  value={searchDalal}\n                ></Input>\n              </Col>\n            </Row>\n              <Table className=\"width-100 margin-top-10\">\n                <thead>\n                  <tr>\n                    <th style={{width:'190px'}}>Name</th>\n                    <th>Stock Id</th>\n                    <th>Total Weight</th>\n                    <th>Total diamond piece</th>\n                    <th>Total diamond price</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {dalalData.map(d=><tr>\n                    <td>{d.name}</td>\n                    <td>{d.stones}</td>\n                    <td>{d.weight}</td>\n                    <td>{d.totalStones}</td>\n                    <td>{d.amount}</td>\n                  </tr>)}\n                </tbody>\n              </Table>\n              {<Pagination\n                  margin={2}\n                  page={pageDalal}\n                  pageSize={pageSizeDalal}\n                  totalRecords={totalDalals}\n                  onPageChange={this.handlePageChange}\n              ></Pagination>}\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm=\"6\">\n          <Card className=\"width-100 margin-top-10\">\n            <CardBody>\n            <Row>\n              <Col>\n                <h4>Account Summary</h4>\n              </Col>\n            </Row>\n            <Row>\n              <Col sm=\"6\">\n                <Input\n                  name=\"search\"\n                  id=\"search\"\n                  type=\"text\"\n                  placeholder=\"Enter person name,phone numeber or company\"\n                  onChange={this.handleSearchAccountSummaryInput}\n                  value={searchAccountSummary}\n                ></Input>\n              </Col>\n            </Row>\n              <Table className=\"width-100 margin-top-10\">\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Debit</th>\n                    <th>Credit</th>\n                    <th>Total</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {accountSummaryData.map(d=><tr>\n                    <td>{d.name}</td>\n                    <td>{d.debit}</td>\n                    <td>{d.credit}</td>\n                    <td>{d.total}</td>\n                  </tr>)}\n                </tbody>\n              </Table>\n              {<Pagination\n                  margin={2}\n                  page={pageAccountSummary}\n                  pageSize={pageSizeAccountSummary}\n                  totalRecords={totalAccountSummary}\n                  onPageChange={this.handleAccountSummaryPageChange}\n              ></Pagination>}\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  }\n}\n\nexport default Dashboard;","// import { Home, About, Login, Logout, Users, Product, ForgotPassword, Exchanges, PaymentHistory } from '../containers';\n// import Loadable from 'react-loadable';\n// import { connect } from 'react-redux';\n\nimport Login from '../pages/Login/Login';\nimport Logout from '../pages/Logout/Logout';\nimport Contact from '../pages/Contact/Contact';\nimport Stocks from '../pages/Stocks/Stocks';\nimport Transactions from '../pages/Transactions/Transactions';\nimport Dashboard from '../pages/Dashboard/Dashboard';\n// Lazy loading sample code\n// const Home = Loadable({\n//   loader: () => import(/* webpackChunkName: \"home\" */ '../containers/Home'),\n//   loading: () => <div>Loading...</div>,\n// });\n\n\nexport const publicRouteObj = [\n  {\n    exact: true,\n    path: '/',\n    component: Login,\n    key: 'Login',\n  },\n  {\n    exact: true,\n    path: '/logout',\n    component: Logout,\n    key: 'Logout',\n  },\n];\n\nexport const privateRouteObj = [\n  {\n    exact: true,\n    path: '/contact',\n    component: Contact,\n    key: 'contact',\n  },\n  {\n    exact: true,\n    path: '/stocks',\n    component: Stocks,\n    key: 'Stocks',\n  },\n  {\n    exact: true,\n    path: '/transactions',\n    component: Transactions,\n    key: 'Transactions',\n  },\n  {\n    exact: true,\n    path: '/dashboard',\n    component: Dashboard,\n    key: 'Dashboard',\n  }\n];\n\n// class RouterConfig extends Component {\n\n//   componentWillReceiveProps(nextProps) {\n//     console.log(\"Router config\", nextProps);\n//   }\n\n//   render() {\n//     return (\n//       <div>\n\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => ({\n//   route: state.route\n// })\n\n// export default connect(mapStateToProps, null)(RouterConfig);\n// export default RouterConfig;","import React, { Component } from 'react';\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\n// import { connect } from 'react-redux';\n\nimport PrivateRoute from '../components/PrivateRoutes';\nimport { publicRouteObj, privateRouteObj } from './router-config';\n// import PrivateRoute from '../component/private-route/PrivateRoute';\n\n\nlet privateRoutes = privateRouteObj;\n\nclass Routes extends Component {\n\n    componentWillReceiveProps(nextProps) {\n        console.log(\"Router config\", nextProps);\n        // privateRoutes = privateRouteObj.filter(route => {\n        //     return true;\n        // })\n    }\n\n    render() {\n        const publicRoutesObj = publicRouteObj.map(route => (\n            <Route key={route.key} exact={route.exact} path={route.path} component={route.component} />\n        ));\n\n        const privateRoutesObj = privateRoutes.map(route => (\n            <PrivateRoute\n                key={route.key}\n                exact={route.exact}\n                path={route.path}\n                component={route.component}\n            />\n        ));\n        return (\n            <Switch>\n                {publicRoutesObj}\n                {privateRoutesObj}\n                {/* if user enter wrong path redirect to home page */}\n                <Redirect from=\"*\" to=\"/\" />\n            </Switch>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    route: state.routeReducer\n})\n\n// export default connect(mapStateToProps, null)(Routes);\n// export default (withRouter(Routes));\nexport default Routes;\n","import React, { Fragment, Component } from 'react';\nimport { HashRouter as Router, NavLink } from 'react-router-dom';\nimport { Row, Col } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport Routes from './router/routes';\n\nimport StorageService from './services/StorageService';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    updateHeader: 'login'\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(\"nextProps\", nextProps);\n    const updateHeader = nextProps.headerReducer && nextProps.headerReducer.header ? nextProps.headerReducer.header : 'login';\n    this.setState({ updateHeader: updateHeader });\n  }\n\n  render() {\n    const { updateHeader } = this.state;\n    console.log(\"updateHeader\", updateHeader);\n    const token = StorageService.getToken();\n    return (\n      <div>\n        <Router>\n\n          {/* <header className=\"App-header\">\n        </header> */}\n          <header style={{ height: '50px' }}>\n            <Row>\n              <Col sm=\"2\" style={{ lineHeight: '67px' }}>\n                <span style={{ fontWeight: 'bold', fontSize: '20px', paddingLeft: '20px' }}>AV&Co.</span>\n              </Col>\n              {token && <Fragment>\n                <Col sm=\"8\" className=\"text-align-right\">\n                  <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/dashboard\">Dashboard</NavLink>\n                  <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/contact\">Contact</NavLink>\n                  <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/stocks\">Stock</NavLink>\n                  <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/transactions\">Transactions</NavLink>\n                </Col>\n                <Col sm=\"2\" className=\"text-align-right\">\n                  <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/logout\">Logout</NavLink>\n\n                </Col>\n              </Fragment>}\n            </Row>\n          </header>\n          <hr />\n\n          <Routes />\n        </Router>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  headerReducer: state.headerReducer\n})\n\nexport default connect(mapStateToProps)(App);\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { UPDATE_HEADER_MENUS } from '../constants/action-type';\n\nconst initialState = {\n    header: null,\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_HEADER_MENUS:\n            return {\n                ...state,\n                header: action.payload,\n            };\n\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport headerReducer from \"./header-reducer\";\n\nexport default combineReducers({\n    headerReducer: headerReducer,\n})","import { createStore, applyMiddleware,compose } from \"redux\";\nimport reducer from \"./reducer\"\nimport thunk from \"redux-thunk\";\n\nconst initialState = {};\n\n// create custom middle ware for thunk\nconst customMiddleWare = store => next => action => {\n    console.log(\"Middleware triggered:\", action);\n    next(action);\n}\n\nconst middleware = [thunk,customMiddleWare];\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeEnhancers(\n        applyMiddleware(...middleware)\n        // ,\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect, Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';    \nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport store from './store';\n\nReactDOM.render(\n  // Provider is root component for app because of redux\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}